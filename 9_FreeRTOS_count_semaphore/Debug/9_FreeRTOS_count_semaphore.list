
9_FreeRTOS_count_semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008bd0  08008bd0  00018bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d6c  08008d6c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d6c  08008d6c  00018d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d74  08008d74  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d78  08008d78  00018d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08008d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145a0  200000cc  08008e48  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001466c  08008e48  0002466c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002005f  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000041d7  00000000  00000000  0004015b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017c8  00000000  00000000  00044338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b0  00000000  00000000  00045b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026528  00000000  00000000  000470b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017160  00000000  00000000  0006d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df3b8  00000000  00000000  00084738  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065f0  00000000  00000000  00163b6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bb8 	.word	0x08008bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08008bb8 	.word	0x08008bb8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200145c0 	.word	0x200145c0

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295
 8000340:	f04f 30ff 	movne.w	r0, #4294967295
 8000344:	f000 b972 	b.w	800062c <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9e08      	ldr	r6, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	4688      	mov	r8, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14b      	bne.n	8000406 <__udivmoddi4+0xa6>
 800036e:	428a      	cmp	r2, r1
 8000370:	4615      	mov	r5, r2
 8000372:	d967      	bls.n	8000444 <__udivmoddi4+0xe4>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b14a      	cbz	r2, 800038e <__udivmoddi4+0x2e>
 800037a:	f1c2 0720 	rsb	r7, r2, #32
 800037e:	fa01 f302 	lsl.w	r3, r1, r2
 8000382:	fa20 f707 	lsr.w	r7, r0, r7
 8000386:	4095      	lsls	r5, r2
 8000388:	ea47 0803 	orr.w	r8, r7, r3
 800038c:	4094      	lsls	r4, r2
 800038e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000392:	0c23      	lsrs	r3, r4, #16
 8000394:	fbb8 f7fe 	udiv	r7, r8, lr
 8000398:	fa1f fc85 	uxth.w	ip, r5
 800039c:	fb0e 8817 	mls	r8, lr, r7, r8
 80003a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003a4:	fb07 f10c 	mul.w	r1, r7, ip
 80003a8:	4299      	cmp	r1, r3
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x60>
 80003ac:	18eb      	adds	r3, r5, r3
 80003ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80003b2:	f080 811b 	bcs.w	80005ec <__udivmoddi4+0x28c>
 80003b6:	4299      	cmp	r1, r3
 80003b8:	f240 8118 	bls.w	80005ec <__udivmoddi4+0x28c>
 80003bc:	3f02      	subs	r7, #2
 80003be:	442b      	add	r3, r5
 80003c0:	1a5b      	subs	r3, r3, r1
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d909      	bls.n	80003ec <__udivmoddi4+0x8c>
 80003d8:	192c      	adds	r4, r5, r4
 80003da:	f100 33ff 	add.w	r3, r0, #4294967295
 80003de:	f080 8107 	bcs.w	80005f0 <__udivmoddi4+0x290>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	f240 8104 	bls.w	80005f0 <__udivmoddi4+0x290>
 80003e8:	3802      	subs	r0, #2
 80003ea:	442c      	add	r4, r5
 80003ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003f0:	eba4 040c 	sub.w	r4, r4, ip
 80003f4:	2700      	movs	r7, #0
 80003f6:	b11e      	cbz	r6, 8000400 <__udivmoddi4+0xa0>
 80003f8:	40d4      	lsrs	r4, r2
 80003fa:	2300      	movs	r3, #0
 80003fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000400:	4639      	mov	r1, r7
 8000402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0xbe>
 800040a:	2e00      	cmp	r6, #0
 800040c:	f000 80eb 	beq.w	80005e6 <__udivmoddi4+0x286>
 8000410:	2700      	movs	r7, #0
 8000412:	e9c6 0100 	strd	r0, r1, [r6]
 8000416:	4638      	mov	r0, r7
 8000418:	4639      	mov	r1, r7
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f783 	clz	r7, r3
 8000422:	2f00      	cmp	r7, #0
 8000424:	d147      	bne.n	80004b6 <__udivmoddi4+0x156>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0xd0>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80fa 	bhi.w	8000624 <__udivmoddi4+0x2c4>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0303 	sbc.w	r3, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	4698      	mov	r8, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d0e0      	beq.n	8000400 <__udivmoddi4+0xa0>
 800043e:	e9c6 4800 	strd	r4, r8, [r6]
 8000442:	e7dd      	b.n	8000400 <__udivmoddi4+0xa0>
 8000444:	b902      	cbnz	r2, 8000448 <__udivmoddi4+0xe8>
 8000446:	deff      	udf	#255	; 0xff
 8000448:	fab2 f282 	clz	r2, r2
 800044c:	2a00      	cmp	r2, #0
 800044e:	f040 808f 	bne.w	8000570 <__udivmoddi4+0x210>
 8000452:	1b49      	subs	r1, r1, r5
 8000454:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000458:	fa1f f885 	uxth.w	r8, r5
 800045c:	2701      	movs	r7, #1
 800045e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000462:	0c23      	lsrs	r3, r4, #16
 8000464:	fb0e 111c 	mls	r1, lr, ip, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb08 f10c 	mul.w	r1, r8, ip
 8000470:	4299      	cmp	r1, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x124>
 8000474:	18eb      	adds	r3, r5, r3
 8000476:	f10c 30ff 	add.w	r0, ip, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x122>
 800047c:	4299      	cmp	r1, r3
 800047e:	f200 80cd 	bhi.w	800061c <__udivmoddi4+0x2bc>
 8000482:	4684      	mov	ip, r0
 8000484:	1a59      	subs	r1, r3, r1
 8000486:	b2a3      	uxth	r3, r4
 8000488:	fbb1 f0fe 	udiv	r0, r1, lr
 800048c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000490:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000494:	fb08 f800 	mul.w	r8, r8, r0
 8000498:	45a0      	cmp	r8, r4
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x14c>
 800049c:	192c      	adds	r4, r5, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x14a>
 80004a4:	45a0      	cmp	r8, r4
 80004a6:	f200 80b6 	bhi.w	8000616 <__udivmoddi4+0x2b6>
 80004aa:	4618      	mov	r0, r3
 80004ac:	eba4 0408 	sub.w	r4, r4, r8
 80004b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004b4:	e79f      	b.n	80003f6 <__udivmoddi4+0x96>
 80004b6:	f1c7 0c20 	rsb	ip, r7, #32
 80004ba:	40bb      	lsls	r3, r7
 80004bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004c4:	fa01 f407 	lsl.w	r4, r1, r7
 80004c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80004d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004d4:	4325      	orrs	r5, r4
 80004d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004da:	0c2c      	lsrs	r4, r5, #16
 80004dc:	fb08 3319 	mls	r3, r8, r9, r3
 80004e0:	fa1f fa8e 	uxth.w	sl, lr
 80004e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004e8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ec:	429c      	cmp	r4, r3
 80004ee:	fa02 f207 	lsl.w	r2, r2, r7
 80004f2:	fa00 f107 	lsl.w	r1, r0, r7
 80004f6:	d90b      	bls.n	8000510 <__udivmoddi4+0x1b0>
 80004f8:	eb1e 0303 	adds.w	r3, lr, r3
 80004fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000500:	f080 8087 	bcs.w	8000612 <__udivmoddi4+0x2b2>
 8000504:	429c      	cmp	r4, r3
 8000506:	f240 8084 	bls.w	8000612 <__udivmoddi4+0x2b2>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4473      	add	r3, lr
 8000510:	1b1b      	subs	r3, r3, r4
 8000512:	b2ad      	uxth	r5, r5
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3310 	mls	r3, r8, r0, r3
 800051c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000520:	fb00 fa0a 	mul.w	sl, r0, sl
 8000524:	45a2      	cmp	sl, r4
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x1da>
 8000528:	eb1e 0404 	adds.w	r4, lr, r4
 800052c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000530:	d26b      	bcs.n	800060a <__udivmoddi4+0x2aa>
 8000532:	45a2      	cmp	sl, r4
 8000534:	d969      	bls.n	800060a <__udivmoddi4+0x2aa>
 8000536:	3802      	subs	r0, #2
 8000538:	4474      	add	r4, lr
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	fba0 8902 	umull	r8, r9, r0, r2
 8000542:	eba4 040a 	sub.w	r4, r4, sl
 8000546:	454c      	cmp	r4, r9
 8000548:	46c2      	mov	sl, r8
 800054a:	464b      	mov	r3, r9
 800054c:	d354      	bcc.n	80005f8 <__udivmoddi4+0x298>
 800054e:	d051      	beq.n	80005f4 <__udivmoddi4+0x294>
 8000550:	2e00      	cmp	r6, #0
 8000552:	d069      	beq.n	8000628 <__udivmoddi4+0x2c8>
 8000554:	ebb1 050a 	subs.w	r5, r1, sl
 8000558:	eb64 0403 	sbc.w	r4, r4, r3
 800055c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000560:	40fd      	lsrs	r5, r7
 8000562:	40fc      	lsrs	r4, r7
 8000564:	ea4c 0505 	orr.w	r5, ip, r5
 8000568:	e9c6 5400 	strd	r5, r4, [r6]
 800056c:	2700      	movs	r7, #0
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0xa0>
 8000570:	f1c2 0320 	rsb	r3, r2, #32
 8000574:	fa20 f703 	lsr.w	r7, r0, r3
 8000578:	4095      	lsls	r5, r2
 800057a:	fa01 f002 	lsl.w	r0, r1, r2
 800057e:	fa21 f303 	lsr.w	r3, r1, r3
 8000582:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000586:	4338      	orrs	r0, r7
 8000588:	0c01      	lsrs	r1, r0, #16
 800058a:	fbb3 f7fe 	udiv	r7, r3, lr
 800058e:	fa1f f885 	uxth.w	r8, r5
 8000592:	fb0e 3317 	mls	r3, lr, r7, r3
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb07 f308 	mul.w	r3, r7, r8
 800059e:	428b      	cmp	r3, r1
 80005a0:	fa04 f402 	lsl.w	r4, r4, r2
 80005a4:	d907      	bls.n	80005b6 <__udivmoddi4+0x256>
 80005a6:	1869      	adds	r1, r5, r1
 80005a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005ac:	d22f      	bcs.n	800060e <__udivmoddi4+0x2ae>
 80005ae:	428b      	cmp	r3, r1
 80005b0:	d92d      	bls.n	800060e <__udivmoddi4+0x2ae>
 80005b2:	3f02      	subs	r7, #2
 80005b4:	4429      	add	r1, r5
 80005b6:	1acb      	subs	r3, r1, r3
 80005b8:	b281      	uxth	r1, r0
 80005ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80005be:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c6:	fb00 f308 	mul.w	r3, r0, r8
 80005ca:	428b      	cmp	r3, r1
 80005cc:	d907      	bls.n	80005de <__udivmoddi4+0x27e>
 80005ce:	1869      	adds	r1, r5, r1
 80005d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005d4:	d217      	bcs.n	8000606 <__udivmoddi4+0x2a6>
 80005d6:	428b      	cmp	r3, r1
 80005d8:	d915      	bls.n	8000606 <__udivmoddi4+0x2a6>
 80005da:	3802      	subs	r0, #2
 80005dc:	4429      	add	r1, r5
 80005de:	1ac9      	subs	r1, r1, r3
 80005e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005e4:	e73b      	b.n	800045e <__udivmoddi4+0xfe>
 80005e6:	4637      	mov	r7, r6
 80005e8:	4630      	mov	r0, r6
 80005ea:	e709      	b.n	8000400 <__udivmoddi4+0xa0>
 80005ec:	4607      	mov	r7, r0
 80005ee:	e6e7      	b.n	80003c0 <__udivmoddi4+0x60>
 80005f0:	4618      	mov	r0, r3
 80005f2:	e6fb      	b.n	80003ec <__udivmoddi4+0x8c>
 80005f4:	4541      	cmp	r1, r8
 80005f6:	d2ab      	bcs.n	8000550 <__udivmoddi4+0x1f0>
 80005f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000600:	3801      	subs	r0, #1
 8000602:	4613      	mov	r3, r2
 8000604:	e7a4      	b.n	8000550 <__udivmoddi4+0x1f0>
 8000606:	4660      	mov	r0, ip
 8000608:	e7e9      	b.n	80005de <__udivmoddi4+0x27e>
 800060a:	4618      	mov	r0, r3
 800060c:	e795      	b.n	800053a <__udivmoddi4+0x1da>
 800060e:	4667      	mov	r7, ip
 8000610:	e7d1      	b.n	80005b6 <__udivmoddi4+0x256>
 8000612:	4681      	mov	r9, r0
 8000614:	e77c      	b.n	8000510 <__udivmoddi4+0x1b0>
 8000616:	3802      	subs	r0, #2
 8000618:	442c      	add	r4, r5
 800061a:	e747      	b.n	80004ac <__udivmoddi4+0x14c>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	442b      	add	r3, r5
 8000622:	e72f      	b.n	8000484 <__udivmoddi4+0x124>
 8000624:	4638      	mov	r0, r7
 8000626:	e708      	b.n	800043a <__udivmoddi4+0xda>
 8000628:	4637      	mov	r7, r6
 800062a:	e6e9      	b.n	8000400 <__udivmoddi4+0xa0>

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fd7a 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f824 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f91e 	bl	800087c <MX_GPIO_Init>
  MX_RTC_Init();
 8000640:	f000 f8a2 	bl	8000788 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f8f0 	bl	8000828 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000648:	f000 f8c4 	bl	80007d4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= 1;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <main+0x48>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a09      	ldr	r2, [pc, #36]	; (8000678 <main+0x48>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000658:	f006 f83a 	bl	80066d0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800065c:	f007 f828 	bl	80076b0 <SEGGER_SYSVIEW_Start>

  task_create();
 8000660:	f000 fae6 	bl	8000c30 <task_create>
  queue_create();
 8000664:	f000 fb46 	bl	8000cf4 <queue_create>

  /* Burada UART paketlerini IT modda aldık.
   * Her ISR a düştüğünde 1 byte alıp bunu da receiving_data_from_UART değikenine yazacağımızı söylüyoruz.*/
  HAL_UART_Receive_IT(&huart2, (uint8_t *)&receiving_data_from_USART_2, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	4904      	ldr	r1, [pc, #16]	; (800067c <main+0x4c>)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <main+0x50>)
 800066e:	f002 f9f1 	bl	8002a54 <HAL_UART_Receive_IT>
  //HAL_UART_Receive_IT(&huart4, (uint8_t *)&receiving_data_from_UART_4, 10);


  vTaskStartScheduler();   // schedular ı başlat
 8000672:	f004 f969 	bl	8004948 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x46>
 8000678:	e0001000 	.word	0xe0001000
 800067c:	20014440 	.word	0x20014440
 8000680:	200144dc 	.word	0x200144dc

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b098      	sub	sp, #96	; 0x60
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 fe1a 	bl	80082cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemClock_Config+0xfc>)
 80006bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemClock_Config+0xfc>)
 80006c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c4:	6413      	str	r3, [r2, #64]	; 0x40
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemClock_Config+0xfc>)
 80006c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <SystemClock_Config+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a2a      	ldr	r2, [pc, #168]	; (8000784 <SystemClock_Config+0x100>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <SystemClock_Config+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006ee:	230a      	movs	r3, #10
 80006f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2310      	movs	r3, #16
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000702:	2300      	movs	r3, #0
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000706:	2308      	movs	r3, #8
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 800070a:	2332      	movs	r3, #50	; 0x32
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070e:	2304      	movs	r3, #4
 8000710:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000712:	2307      	movs	r3, #7
 8000714:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071a:	4618      	mov	r0, r3
 800071c:	f001 f81c 	bl	8001758 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 fb2f 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fa75 	bl	8001c38 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f000 fb18 	bl	8000d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800075c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000760:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fc8a 	bl	8002080 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000772:	f000 fb09 	bl	8000d88 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3760      	adds	r7, #96	; 0x60
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_RTC_Init+0x44>)
 800078e:	4a10      	ldr	r2, [pc, #64]	; (80007d0 <MX_RTC_Init+0x48>)
 8000790:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_RTC_Init+0x44>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_RTC_Init+0x44>)
 800079a:	227f      	movs	r2, #127	; 0x7f
 800079c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_RTC_Init+0x44>)
 80007a0:	22ff      	movs	r2, #255	; 0xff
 80007a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_RTC_Init+0x44>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_RTC_Init+0x44>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_RTC_Init+0x44>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_RTC_Init+0x44>)
 80007b8:	f001 fd44 	bl	8002244 <HAL_RTC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007c2:	f000 fae1 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20014478 	.word	0x20014478
 80007d0:	40002800 	.word	0x40002800

080007d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_UART4_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_UART4_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_UART4_Init+0x4c>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_UART4_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_UART4_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_UART4_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_UART4_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_UART4_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_UART4_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_UART4_Init+0x4c>)
 800080c:	f002 f83c 	bl	8002888 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 fab7 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2001449c 	.word	0x2001449c
 8000824:	40004c00 	.word	0x40004c00

08000828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800082e:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_USART2_UART_Init+0x50>)
 8000830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_USART2_UART_Init+0x4c>)
 8000860:	f002 f812 	bl	8002888 <HAL_UART_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800086a:	f000 fa8d 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200144dc 	.word	0x200144dc
 8000878:	40004400 	.word	0x40004400

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b9b      	ldr	r3, [pc, #620]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a9a      	ldr	r2, [pc, #616]	; (8000b04 <MX_GPIO_Init+0x288>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b98      	ldr	r3, [pc, #608]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b94      	ldr	r3, [pc, #592]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a93      	ldr	r2, [pc, #588]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b91      	ldr	r3, [pc, #580]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b8d      	ldr	r3, [pc, #564]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a8c      	ldr	r2, [pc, #560]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b8a      	ldr	r3, [pc, #552]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b86      	ldr	r3, [pc, #536]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a85      	ldr	r2, [pc, #532]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b83      	ldr	r3, [pc, #524]	; (8000b04 <MX_GPIO_Init+0x288>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b7f      	ldr	r3, [pc, #508]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a7e      	ldr	r2, [pc, #504]	; (8000b04 <MX_GPIO_Init+0x288>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b7c      	ldr	r3, [pc, #496]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b78      	ldr	r3, [pc, #480]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a77      	ldr	r2, [pc, #476]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b75      	ldr	r3, [pc, #468]	; (8000b04 <MX_GPIO_Init+0x288>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	4872      	ldr	r0, [pc, #456]	; (8000b08 <MX_GPIO_Init+0x28c>)
 8000940:	f000 fed4 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4870      	ldr	r0, [pc, #448]	; (8000b0c <MX_GPIO_Init+0x290>)
 800094a:	f000 fecf 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000954:	486e      	ldr	r0, [pc, #440]	; (8000b10 <MX_GPIO_Init+0x294>)
 8000956:	f000 fec9 	bl	80016ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800095a:	2308      	movs	r3, #8
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4865      	ldr	r0, [pc, #404]	; (8000b08 <MX_GPIO_Init+0x28c>)
 8000972:	f000 fd21 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000976:	2301      	movs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	485f      	ldr	r0, [pc, #380]	; (8000b0c <MX_GPIO_Init+0x290>)
 800098e:	f000 fd13 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000992:	2308      	movs	r3, #8
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a2:	2305      	movs	r3, #5
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4857      	ldr	r0, [pc, #348]	; (8000b0c <MX_GPIO_Init+0x290>)
 80009ae:	f000 fd03 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009b2:	2310      	movs	r3, #16
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c2:	2306      	movs	r3, #6
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4851      	ldr	r0, [pc, #324]	; (8000b14 <MX_GPIO_Init+0x298>)
 80009ce:	f000 fcf3 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009d2:	23e0      	movs	r3, #224	; 0xe0
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009e2:	2305      	movs	r3, #5
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	4849      	ldr	r0, [pc, #292]	; (8000b14 <MX_GPIO_Init+0x298>)
 80009ee:	f000 fce3 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009f2:	2304      	movs	r3, #4
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4844      	ldr	r0, [pc, #272]	; (8000b18 <MX_GPIO_Init+0x29c>)
 8000a06:	f000 fcd7 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	4619      	mov	r1, r3
 8000a26:	483c      	ldr	r0, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x29c>)
 8000a28:	f000 fcc6 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a2c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a30:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	4832      	ldr	r0, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x294>)
 8000a46:	f000 fcb7 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a4a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4829      	ldr	r0, [pc, #164]	; (8000b0c <MX_GPIO_Init+0x290>)
 8000a68:	f000 fca6 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4824      	ldr	r0, [pc, #144]	; (8000b14 <MX_GPIO_Init+0x298>)
 8000a82:	f000 fc99 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a86:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a98:	230a      	movs	r3, #10
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x298>)
 8000aa4:	f000 fc88 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000aa8:	2320      	movs	r3, #32
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_GPIO_Init+0x294>)
 8000abc:	f000 fc7c 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ac0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4619      	mov	r1, r3
 8000adc:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_GPIO_Init+0x29c>)
 8000ade:	f000 fc6b 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_GPIO_Init+0x2a0>)
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_GPIO_Init+0x28c>)
 8000af6:	f000 fc5f 	bl	80013b8 <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	10120000 	.word	0x10120000

08000b20 <send_UART>:

/* USER CODE BEGIN 4 */
int send_UART(uint8_t * pData, uint16_t Size)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	460b      	mov	r3, r1
 8000b2a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, pData, Size, HAL_MAX_DELAY);
 8000b2c:	887a      	ldrh	r2, [r7, #2]
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <send_UART+0x24>)
 8000b36:	f001 fef4 	bl	8002922 <HAL_UART_Transmit>
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200144dc 	.word	0x200144dc

08000b48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART2) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a2f      	ldr	r2, [pc, #188]	; (8000c14 <HAL_UART_RxCpltCallback+0xcc>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d159      	bne.n	8000c0e <HAL_UART_RxCpltCallback+0xc6>

		 if(xQueueIsQueueFullFromISR(q_read_data))
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_UART_RxCpltCallback+0xd0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fccf 	bl	8004502 <xQueueIsQueueFullFromISR>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d150      	bne.n	8000c0c <HAL_UART_RxCpltCallback+0xc4>
		 	{
		 		return;
		 	}
		 	else
		 	{
		 		if(index_of_UART_data < LOG_MAX_COMMAND_LENGTH
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b0e      	cmp	r3, #14
 8000b72:	d816      	bhi.n	8000ba2 <HAL_UART_RxCpltCallback+0x5a>
		 				&& receiving_data_from_USART_2 != '\r'
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <HAL_UART_RxCpltCallback+0xd8>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b0d      	cmp	r3, #13
 8000b7c:	d011      	beq.n	8000ba2 <HAL_UART_RxCpltCallback+0x5a>
		 				&& receiving_data_from_USART_2 != '\n'		)
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_UART_RxCpltCallback+0xd8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b0a      	cmp	r3, #10
 8000b86:	d00c      	beq.n	8000ba2 <HAL_UART_RxCpltCallback+0x5a>
		 			received_command_from_UART[index_of_UART_data++] = receiving_data_from_USART_2;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	b2d1      	uxtb	r1, r2
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000b94:	7011      	strb	r1, [r2, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_UART_RxCpltCallback+0xd8>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b2d9      	uxtb	r1, r3
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_UART_RxCpltCallback+0xdc>)
 8000ba0:	5499      	strb	r1, [r3, r2]
		 		/*else if(receiving_data_from_UART == '\n')
		 			received_command_from_UART[LOG_MAX_COMMAND_LENGTH - 1] = receiving_data_from_UART;*/

		 		if(receiving_data_from_USART_2 == '\n')
 8000ba2:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <HAL_UART_RxCpltCallback+0xd8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b0a      	cmp	r3, #10
 8000baa:	d129      	bne.n	8000c00 <HAL_UART_RxCpltCallback+0xb8>
		 		{
		 			if(index_of_UART_data > 0)  // Doğrudan entera basılırsa onu yoksaysın \r\n
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d024      	beq.n	8000c00 <HAL_UART_RxCpltCallback+0xb8>
		 			{
		 				if(index_of_UART_data < LOG_MAX_COMMAND_LENGTH)
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b0e      	cmp	r3, #14
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_UART_RxCpltCallback+0x8e>
		 					received_command_from_UART[index_of_UART_data++] = '\0';
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	b2d1      	uxtb	r1, r2
 8000bca:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000bcc:	7011      	strb	r1, [r2, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_UART_RxCpltCallback+0xdc>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	5499      	strb	r1, [r3, r2]
		 				xQueueSendFromISR(q_read_data,(void *)&received_command_from_UART,NULL);
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_UART_RxCpltCallback+0xd0>)
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4911      	ldr	r1, [pc, #68]	; (8000c24 <HAL_UART_RxCpltCallback+0xdc>)
 8000be0:	f003 f994 	bl	8003f0c <xQueueGenericSendFromISR>
		 				index_of_UART_data = 0;
 8000be4:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_UART_RxCpltCallback+0xd4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		 				xTaskNotifyFromISR(Command_handling_task_handle,0,eNoAction,NULL);
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_UART_RxCpltCallback+0xe0>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f004 fc0c 	bl	8005418 <xTaskGenericNotifyFromISR>
		 			}
		 		}
		 	}

		 	/* Enable UART data byte reception again in IT mode */
		 	HAL_UART_Receive_IT(&huart2, (uint8_t *)&receiving_data_from_USART_2, 1);
 8000c00:	2201      	movs	r2, #1
 8000c02:	4907      	ldr	r1, [pc, #28]	; (8000c20 <HAL_UART_RxCpltCallback+0xd8>)
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_UART_RxCpltCallback+0xe4>)
 8000c06:	f001 ff25 	bl	8002a54 <HAL_UART_Receive_IT>
 8000c0a:	e000      	b.n	8000c0e <HAL_UART_RxCpltCallback+0xc6>
		 		return;
 8000c0c:	bf00      	nop

		 HAL_UART_Receive_IT(&huart4, (uint8_t *)&receiving_data_from_UART_4, 10);*/
	 }


}
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	2001443c 	.word	0x2001443c
 8000c1c:	200000e8 	.word	0x200000e8
 8000c20:	20014440 	.word	0x20014440
 8000c24:	2001452c 	.word	0x2001452c
 8000c28:	200000f4 	.word	0x200000f4
 8000c2c:	200144dc 	.word	0x200144dc

08000c30 <task_create>:

void task_create()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af02      	add	r7, sp, #8
	BaseType_t status;

	status = xTaskCreate(GS_task_handler,"GS",STACK_SIZE,NULL,HIGH_PRI,&GS_task_handle);
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <task_create+0xa0>)
 8000c38:	9301      	str	r3, [sp, #4]
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2300      	movs	r3, #0
 8000c40:	22c8      	movs	r2, #200	; 0xc8
 8000c42:	4924      	ldr	r1, [pc, #144]	; (8000cd4 <task_create+0xa4>)
 8000c44:	4824      	ldr	r0, [pc, #144]	; (8000cd8 <task_create+0xa8>)
 8000c46:	f003 fce5 	bl	8004614 <xTaskCreate>
 8000c4a:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d009      	beq.n	8000c66 <task_create+0x36>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c56:	f383 8811 	msr	BASEPRI, r3
 8000c5a:	f3bf 8f6f 	isb	sy
 8000c5e:	f3bf 8f4f 	dsb	sy
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	e7fe      	b.n	8000c64 <task_create+0x34>

	status = xTaskCreate(FB_task_handler,"FB",STACK_SIZE,NULL,HIGH_PRI,&FB_task_handle);
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <task_create+0xac>)
 8000c68:	9301      	str	r3, [sp, #4]
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2300      	movs	r3, #0
 8000c70:	22c8      	movs	r2, #200	; 0xc8
 8000c72:	491b      	ldr	r1, [pc, #108]	; (8000ce0 <task_create+0xb0>)
 8000c74:	481b      	ldr	r0, [pc, #108]	; (8000ce4 <task_create+0xb4>)
 8000c76:	f003 fccd 	bl	8004614 <xTaskCreate>
 8000c7a:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d009      	beq.n	8000c96 <task_create+0x66>
 8000c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c86:	f383 8811 	msr	BASEPRI, r3
 8000c8a:	f3bf 8f6f 	isb	sy
 8000c8e:	f3bf 8f4f 	dsb	sy
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	e7fe      	b.n	8000c94 <task_create+0x64>

	status = xTaskCreate(command_task_handler,"CMD",STACK_SIZE,NULL,HIGH_PRI,&Command_handling_task_handle);
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <task_create+0xb8>)
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	22c8      	movs	r2, #200	; 0xc8
 8000ca2:	4912      	ldr	r1, [pc, #72]	; (8000cec <task_create+0xbc>)
 8000ca4:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <task_create+0xc0>)
 8000ca6:	f003 fcb5 	bl	8004614 <xTaskCreate>
 8000caa:	60f8      	str	r0, [r7, #12]
	configASSERT(status == pdPASS);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d009      	beq.n	8000cc6 <task_create+0x96>
 8000cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb6:	f383 8811 	msr	BASEPRI, r3
 8000cba:	f3bf 8f6f 	isb	sy
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	e7fe      	b.n	8000cc4 <task_create+0x94>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000ec 	.word	0x200000ec
 8000cd4:	08008bd0 	.word	0x08008bd0
 8000cd8:	080037e9 	.word	0x080037e9
 8000cdc:	200000f0 	.word	0x200000f0
 8000ce0:	08008bd4 	.word	0x08008bd4
 8000ce4:	08003821 	.word	0x08003821
 8000ce8:	200000f4 	.word	0x200000f4
 8000cec:	08008bd8 	.word	0x08008bd8
 8000cf0:	08003795 	.word	0x08003795

08000cf4 <queue_create>:

void queue_create()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	q_print = xQueueCreate(SIZE_OF_PRINT_QUE,sizeof(size_t));
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	2014      	movs	r0, #20
 8000d00:	f002 ff5c 	bl	8003bbc <xQueueGenericCreate>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <queue_create+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
	configASSERT(q_print != NULL);
 8000d0a:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <queue_create+0x68>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d109      	bne.n	8000d26 <queue_create+0x32>
 8000d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d16:	f383 8811 	msr	BASEPRI, r3
 8000d1a:	f3bf 8f6f 	isb	sy
 8000d1e:	f3bf 8f4f 	dsb	sy
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	e7fe      	b.n	8000d24 <queue_create+0x30>

	q_read_data = xQueueCreate(SIZE_OF_READ_DATA_QUE,sizeof(char[LOG_MAX_COMMAND_LENGTH]));
 8000d26:	2200      	movs	r2, #0
 8000d28:	210f      	movs	r1, #15
 8000d2a:	2014      	movs	r0, #20
 8000d2c:	f002 ff46 	bl	8003bbc <xQueueGenericCreate>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <queue_create+0x6c>)
 8000d34:	601a      	str	r2, [r3, #0]
	configASSERT(q_read_data != NULL);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <queue_create+0x6c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d109      	bne.n	8000d52 <queue_create+0x5e>
 8000d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
 8000d4a:	f3bf 8f4f 	dsb	sy
 8000d4e:	603b      	str	r3, [r7, #0]
 8000d50:	e7fe      	b.n	8000d50 <queue_create+0x5c>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20014474 	.word	0x20014474
 8000d60:	2001443c 	.word	0x2001443c

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 f9fb 	bl	8001170 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <Error_Handler+0x6>

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();  //BY:
 8000dce:	f005 f8df 	bl	8005f90 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <HAL_RTC_MspInit+0x24>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d102      	bne.n	8000df8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_RTC_MspInit+0x28>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	40002800 	.word	0x40002800
 8000e08:	42470e3c 	.word	0x42470e3c

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <HAL_UART_MspInit+0x108>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d134      	bne.n	8000e98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e66:	2303      	movs	r3, #3
 8000e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e76:	2308      	movs	r3, #8
 8000e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 031c 	add.w	r3, r7, #28
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4826      	ldr	r0, [pc, #152]	; (8000f1c <HAL_UART_MspInit+0x110>)
 8000e82:	f000 fa99 	bl	80013b8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2106      	movs	r1, #6
 8000e8a:	2034      	movs	r0, #52	; 0x34
 8000e8c:	f000 fa48 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e90:	2034      	movs	r0, #52	; 0x34
 8000e92:	f000 fa61 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e96:	e038      	b.n	8000f0a <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a20      	ldr	r2, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0x114>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d133      	bne.n	8000f0a <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_UART_MspInit+0x10c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000eda:	230c      	movs	r3, #12
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 031c 	add.w	r3, r7, #28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <HAL_UART_MspInit+0x110>)
 8000ef6:	f000 fa5f 	bl	80013b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2106      	movs	r1, #6
 8000efe:	2026      	movs	r0, #38	; 0x26
 8000f00:	f000 fa0e 	bl	8001320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f04:	2026      	movs	r0, #38	; 0x26
 8000f06:	f000 fa27 	bl	8001358 <HAL_NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3730      	adds	r7, #48	; 0x30
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004c00 	.word	0x40004c00
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40004400 	.word	0x40004400

08000f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	; 0x30
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	2036      	movs	r0, #54	; 0x36
 8000f3a:	f000 f9f1 	bl	8001320 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f3e:	2036      	movs	r0, #54	; 0x36
 8000f40:	f000 fa0a 	bl	8001358 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f4e:	f043 0310 	orr.w	r3, r3, #16
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_InitTick+0xa4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f60:	f107 0210 	add.w	r2, r7, #16
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f001 f856 	bl	800201c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f70:	f001 f82c 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8000f74:	4603      	mov	r3, r0
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	4a13      	ldr	r2, [pc, #76]	; (8000fcc <HAL_InitTick+0xa8>)
 8000f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f82:	0c9b      	lsrs	r3, r3, #18
 8000f84:	3b01      	subs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_InitTick+0xac>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <HAL_InitTick+0xb0>)
 8000f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_InitTick+0xac>)
 8000f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_InitTick+0xac>)
 8000f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_InitTick+0xac>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_InitTick+0xac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fa8:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <HAL_InitTick+0xac>)
 8000faa:	f001 fa30 	bl	800240e <HAL_TIM_Base_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d104      	bne.n	8000fbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <HAL_InitTick+0xac>)
 8000fb6:	f001 fa5f 	bl	8002478 <HAL_TIM_Base_Start_IT>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e000      	b.n	8000fc0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3730      	adds	r7, #48	; 0x30
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	431bde83 	.word	0x431bde83
 8000fd0:	2001453c 	.word	0x2001453c
 8000fd4:	40001000 	.word	0x40001000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <USART2_IRQHandler+0x10>)
 800100a:	f001 fd79 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200144dc 	.word	0x200144dc

08001018 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <UART4_IRQHandler+0x10>)
 800101e:	f001 fd6f 	bl	8002b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2001449c 	.word	0x2001449c

0800102c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <TIM6_DAC_IRQHandler+0x10>)
 8001032:	f001 fa45 	bl	80024c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2001453c 	.word	0x2001453c

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f007 f8e8 	bl	8008244 <__errno>
 8001074:	4602      	mov	r2, r0
 8001076:	230c      	movs	r3, #12
 8001078:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200000f8 	.word	0x200000f8
 80010a8:	20014670 	.word	0x20014670

080010ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SystemInit+0x28>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SystemInit+0x28>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SystemInit+0x28>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	609a      	str	r2, [r3, #8]
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
  ldr  r2, =_sbss
 80010f2:	4a0b      	ldr	r2, [pc, #44]	; (8001120 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001102:	f7ff ffd3 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f007 f8a3 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fa91 	bl	8000630 <main>
  bx  lr    
 800110e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001110:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001114:	08008d7c 	.word	0x08008d7c
  ldr  r0, =_sdata
 8001118:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800111c:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 8001120:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 8001124:	2001466c 	.word	0x2001466c

08001128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <HAL_Init+0x40>)
 8001136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <HAL_Init+0x40>)
 8001142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001146:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a07      	ldr	r2, [pc, #28]	; (800116c <HAL_Init+0x40>)
 800114e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001152:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f8d8 	bl	800130a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fee2 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001160:	f7ff fe16 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	2001457c 	.word	0x2001457c

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2001457c 	.word	0x2001457c

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff4c 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001332:	f7ff ff61 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001336:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	6978      	ldr	r0, [r7, #20]
 800133e:	f7ff ffb1 	bl	80012a4 <NVIC_EncodePriority>
 8001342:	4602      	mov	r2, r0
 8001344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff80 	bl	8001250 <__NVIC_SetPriority>
}
 8001350:	bf00      	nop
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff54 	bl	8001214 <__NVIC_EnableIRQ>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d004      	beq.n	8001392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00c      	b.n	80013ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2205      	movs	r2, #5
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e16b      	b.n	80016ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 815a 	bne.w	80016a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d00b      	beq.n	8001412 <HAL_GPIO_Init+0x5a>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001406:	2b11      	cmp	r3, #17
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b12      	cmp	r3, #18
 8001410:	d130      	bne.n	8001474 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0xfc>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b12      	cmp	r3, #18
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 80b4 	beq.w	80016a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b5f      	ldr	r3, [pc, #380]	; (80016c0 <HAL_GPIO_Init+0x308>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a5e      	ldr	r2, [pc, #376]	; (80016c0 <HAL_GPIO_Init+0x308>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b5c      	ldr	r3, [pc, #368]	; (80016c0 <HAL_GPIO_Init+0x308>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a5a      	ldr	r2, [pc, #360]	; (80016c4 <HAL_GPIO_Init+0x30c>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a51      	ldr	r2, [pc, #324]	; (80016c8 <HAL_GPIO_Init+0x310>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d02b      	beq.n	80015de <HAL_GPIO_Init+0x226>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_GPIO_Init+0x314>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d025      	beq.n	80015da <HAL_GPIO_Init+0x222>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4f      	ldr	r2, [pc, #316]	; (80016d0 <HAL_GPIO_Init+0x318>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d01f      	beq.n	80015d6 <HAL_GPIO_Init+0x21e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4e      	ldr	r2, [pc, #312]	; (80016d4 <HAL_GPIO_Init+0x31c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d019      	beq.n	80015d2 <HAL_GPIO_Init+0x21a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a4d      	ldr	r2, [pc, #308]	; (80016d8 <HAL_GPIO_Init+0x320>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d013      	beq.n	80015ce <HAL_GPIO_Init+0x216>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x324>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d00d      	beq.n	80015ca <HAL_GPIO_Init+0x212>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x328>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d007      	beq.n	80015c6 <HAL_GPIO_Init+0x20e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x32c>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_GPIO_Init+0x20a>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00e      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c2:	2308      	movs	r3, #8
 80015c4:	e00c      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015c6:	2306      	movs	r3, #6
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x228>
 80015de:	2300      	movs	r3, #0
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f0:	4934      	ldr	r1, [pc, #208]	; (80016c4 <HAL_GPIO_Init+0x30c>)
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <HAL_GPIO_Init+0x330>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001622:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <HAL_GPIO_Init+0x330>)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001628:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_GPIO_Init+0x330>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4313      	orrs	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <HAL_GPIO_Init+0x330>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <HAL_GPIO_Init+0x330>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001676:	4a1c      	ldr	r2, [pc, #112]	; (80016e8 <HAL_GPIO_Init+0x330>)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <HAL_GPIO_Init+0x330>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016a0:	4a11      	ldr	r2, [pc, #68]	; (80016e8 <HAL_GPIO_Init+0x330>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	f67f ae90 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b4:	bf00      	nop
 80016b6:	3724      	adds	r7, #36	; 0x24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40021400 	.word	0x40021400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40021c00 	.word	0x40021c00
 80016e8:	40013c00 	.word	0x40013c00

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_PWR_EnterSLEEPMode+0x34>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800173e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001740:	e002      	b.n	8001748 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001742:	bf40      	sev
    __WFE();
 8001744:	bf20      	wfe
    __WFE();
 8001746:	bf20      	wfe
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e25b      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d075      	beq.n	8001862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001776:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d00c      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4ba0      	ldr	r3, [pc, #640]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b9d      	ldr	r3, [pc, #628]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b99      	ldr	r3, [pc, #612]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e236      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_OscConfig+0x74>
 80017be:	4b91      	ldr	r3, [pc, #580]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a90      	ldr	r2, [pc, #576]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a8a      	ldr	r2, [pc, #552]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a87      	ldr	r2, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a83      	ldr	r2, [pc, #524]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a80      	ldr	r2, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fcc2 	bl	8001198 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fcbe 	bl	8001198 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1fb      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xc0>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fcae 	bl	8001198 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fcaa 	bl	8001198 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1e7      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1bb      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4952      	ldr	r1, [pc, #328]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fc63 	bl	8001198 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fc5f 	bl	8001198 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e19c      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b43      	ldr	r3, [pc, #268]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4940      	ldr	r1, [pc, #256]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_OscConfig+0x2b0>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fc42 	bl	8001198 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fc3e 	bl	8001198 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e17b      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d030      	beq.n	80019a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fc22 	bl	8001198 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fc1e 	bl	8001198 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e15b      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x200>
 8001976:	e015      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x2b4>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fc0b 	bl	8001198 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fc07 	bl	8001198 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e144      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 800199a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80a0 	beq.w	8001af2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d121      	bne.n	8001a32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_RCC_OscConfig+0x2b8>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fbcd 	bl	8001198 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
 8001a10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a14:	f7ff fbc0 	bl	8001198 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0fd      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	4b81      	ldr	r3, [pc, #516]	; (8001c2c <HAL_RCC_OscConfig+0x4d4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
 8001a3a:	4b7d      	ldr	r3, [pc, #500]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	4a7c      	ldr	r2, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6713      	str	r3, [r2, #112]	; 0x70
 8001a46:	e01c      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x312>
 8001a50:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a54:	4a76      	ldr	r2, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5c:	4b74      	ldr	r3, [pc, #464]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	4a73      	ldr	r2, [pc, #460]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	; 0x70
 8001a68:	e00b      	b.n	8001a82 <HAL_RCC_OscConfig+0x32a>
 8001a6a:	4b71      	ldr	r3, [pc, #452]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	4a70      	ldr	r2, [pc, #448]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7a:	4a6d      	ldr	r2, [pc, #436]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d015      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fb85 	bl	8001198 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f7ff fb81 	bl	8001198 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e0bc      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa8:	4b61      	ldr	r3, [pc, #388]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ee      	beq.n	8001a92 <HAL_RCC_OscConfig+0x33a>
 8001ab4:	e014      	b.n	8001ae0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab6:	f7ff fb6f 	bl	8001198 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abc:	e00a      	b.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abe:	f7ff fb6b 	bl	8001198 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e0a6      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad4:	4b56      	ldr	r3, [pc, #344]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ee      	bne.n	8001abe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae6:	4b52      	ldr	r3, [pc, #328]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	4a51      	ldr	r2, [pc, #324]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001af0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8092 	beq.w	8001c20 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d05c      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d141      	bne.n	8001b94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b48      	ldr	r3, [pc, #288]	; (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fb3f 	bl	8001198 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7ff fb3b 	bl	8001198 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e078      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b30:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f0      	bne.n	8001b1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	4933      	ldr	r1, [pc, #204]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb14 	bl	8001198 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b74:	f7ff fb10 	bl	8001198 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e04d      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x41c>
 8001b92:	e045      	b.n	8001c20 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x4dc>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff fafd 	bl	8001198 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba2:	f7ff faf9 	bl	8001198 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e036      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x44a>
 8001bc0:	e02e      	b.n	8001c20 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e029      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_OscConfig+0x4d8>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d11c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d115      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d106      	bne.n	8001c1c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	40023800 	.word	0x40023800
 8001c34:	42470060 	.word	0x42470060

08001c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0cc      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 030f 	and.w	r3, r3, #15
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d90c      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b63      	ldr	r3, [pc, #396]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0b8      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d020      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c8c:	4b59      	ldr	r3, [pc, #356]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	4a58      	ldr	r2, [pc, #352]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ca4:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	494d      	ldr	r1, [pc, #308]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d044      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d107      	bne.n	8001ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d119      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e07f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d109      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e06f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e067      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d16:	4b37      	ldr	r3, [pc, #220]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 0203 	bic.w	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	4934      	ldr	r1, [pc, #208]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d28:	f7ff fa36 	bl	8001198 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d30:	f7ff fa32 	bl	8001198 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e04f      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 020c 	and.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d1eb      	bne.n	8001d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d20c      	bcs.n	8001d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e032      	b.n	8001de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d008      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4916      	ldr	r1, [pc, #88]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	490e      	ldr	r1, [pc, #56]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dbe:	f000 f821 	bl	8001e04 <HAL_RCC_GetSysClockFreq>
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd6:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f8a0 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023c00 	.word	0x40023c00
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08008d0c 	.word	0x08008d0c
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e1a:	4b63      	ldr	r3, [pc, #396]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d007      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x32>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d008      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x38>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f040 80b4 	bne.w	8001f98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e30:	4b5e      	ldr	r3, [pc, #376]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e32:	60bb      	str	r3, [r7, #8]
       break;
 8001e34:	e0b3      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e36:	4b5e      	ldr	r3, [pc, #376]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001e38:	60bb      	str	r3, [r7, #8]
      break;
 8001e3a:	e0b0      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e3c:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e46:	4b58      	ldr	r3, [pc, #352]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d04a      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e52:	4b55      	ldr	r3, [pc, #340]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	099b      	lsrs	r3, r3, #6
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	ea03 0501 	and.w	r5, r3, r1
 8001e68:	ea04 0602 	and.w	r6, r4, r2
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4632      	mov	r2, r6
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	f04f 0400 	mov.w	r4, #0
 8001e78:	0154      	lsls	r4, r2, #5
 8001e7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e7e:	014b      	lsls	r3, r1, #5
 8001e80:	4619      	mov	r1, r3
 8001e82:	4622      	mov	r2, r4
 8001e84:	1b49      	subs	r1, r1, r5
 8001e86:	eb62 0206 	sbc.w	r2, r2, r6
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	f04f 0400 	mov.w	r4, #0
 8001e92:	0194      	lsls	r4, r2, #6
 8001e94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e98:	018b      	lsls	r3, r1, #6
 8001e9a:	1a5b      	subs	r3, r3, r1
 8001e9c:	eb64 0402 	sbc.w	r4, r4, r2
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	00e2      	lsls	r2, r4, #3
 8001eaa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001eae:	00d9      	lsls	r1, r3, #3
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	195b      	adds	r3, r3, r5
 8001eb6:	eb44 0406 	adc.w	r4, r4, r6
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	0262      	lsls	r2, r4, #9
 8001ec4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001ec8:	0259      	lsls	r1, r3, #9
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	f7fe fa28 	bl	8000330 <__aeabi_uldivmod>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	e049      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	ea03 0501 	and.w	r5, r3, r1
 8001efe:	ea04 0602 	and.w	r6, r4, r2
 8001f02:	4629      	mov	r1, r5
 8001f04:	4632      	mov	r2, r6
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f04f 0400 	mov.w	r4, #0
 8001f0e:	0154      	lsls	r4, r2, #5
 8001f10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f14:	014b      	lsls	r3, r1, #5
 8001f16:	4619      	mov	r1, r3
 8001f18:	4622      	mov	r2, r4
 8001f1a:	1b49      	subs	r1, r1, r5
 8001f1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	f04f 0400 	mov.w	r4, #0
 8001f28:	0194      	lsls	r4, r2, #6
 8001f2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f2e:	018b      	lsls	r3, r1, #6
 8001f30:	1a5b      	subs	r3, r3, r1
 8001f32:	eb64 0402 	sbc.w	r4, r4, r2
 8001f36:	f04f 0100 	mov.w	r1, #0
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	00e2      	lsls	r2, r4, #3
 8001f40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f44:	00d9      	lsls	r1, r3, #3
 8001f46:	460b      	mov	r3, r1
 8001f48:	4614      	mov	r4, r2
 8001f4a:	195b      	adds	r3, r3, r5
 8001f4c:	eb44 0406 	adc.w	r4, r4, r6
 8001f50:	f04f 0100 	mov.w	r1, #0
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	02a2      	lsls	r2, r4, #10
 8001f5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f5e:	0299      	lsls	r1, r3, #10
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f04f 0400 	mov.w	r4, #0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4623      	mov	r3, r4
 8001f72:	f7fe f9dd 	bl	8000330 <__aeabi_uldivmod>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	60bb      	str	r3, [r7, #8]
      break;
 8001f96:	e002      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f9a:	60bb      	str	r3, [r7, #8]
      break;
 8001f9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00f42400 	.word	0x00f42400
 8001fb0:	007a1200 	.word	0x007a1200

08001fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000000 	.word	0x20000000

08001fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fd0:	f7ff fff0 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4601      	mov	r1, r0
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	0a9b      	lsrs	r3, r3, #10
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	4a03      	ldr	r2, [pc, #12]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe2:	5cd3      	ldrb	r3, [r2, r3]
 8001fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	08008d1c 	.word	0x08008d1c

08001ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ff8:	f7ff ffdc 	bl	8001fb4 <HAL_RCC_GetHCLKFreq>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4a03      	ldr	r2, [pc, #12]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08008d1c 	.word	0x08008d1c

0800201c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	220f      	movs	r2, #15
 800202a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800202c:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_GetClockConfig+0x5c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <HAL_RCC_GetClockConfig+0x60>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 020f 	and.w	r2, r3, #15
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40023c00 	.word	0x40023c00

08002080 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d035      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020a8:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ae:	f7ff f873 	bl	8001198 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020b6:	f7ff f86f 	bl	8001198 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0b0      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020c8:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	019a      	lsls	r2, r3, #6
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	071b      	lsls	r3, r3, #28
 80020e0:	4955      	ldr	r1, [pc, #340]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020e8:	4b52      	ldr	r3, [pc, #328]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020ee:	f7ff f853 	bl	8001198 <HAL_GetTick>
 80020f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020f6:	f7ff f84f 	bl	8001198 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e090      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8083 	beq.w	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a43      	ldr	r2, [pc, #268]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800213e:	4b3f      	ldr	r3, [pc, #252]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a3e      	ldr	r2, [pc, #248]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800214a:	f7ff f825 	bl	8001198 <HAL_GetTick>
 800214e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7ff f821 	bl	8001198 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e062      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002170:	4b31      	ldr	r3, [pc, #196]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002178:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02f      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	429a      	cmp	r2, r3
 800218c:	d028      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002196:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021a4:	4a24      	ldr	r2, [pc, #144]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021aa:	4b23      	ldr	r3, [pc, #140]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d114      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe ffef 	bl	8001198 <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7fe ffeb 	bl	8001198 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e02a      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021ec:	d10d      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80021fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002204:	4313      	orrs	r3, r2
 8002206:	608b      	str	r3, [r1, #8]
 8002208:	e005      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002210:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002214:	6093      	str	r3, [r2, #8]
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002218:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002222:	4905      	ldr	r1, [pc, #20]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	42470068 	.word	0x42470068
 8002238:	40023800 	.word	0x40023800
 800223c:	40007000 	.word	0x40007000
 8002240:	42470e40 	.word	0x42470e40

08002244 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e083      	b.n	800235e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7f5b      	ldrb	r3, [r3, #29]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d105      	bne.n	800226c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fdba 	bl	8000de0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	22ca      	movs	r2, #202	; 0xca
 8002278:	625a      	str	r2, [r3, #36]	; 0x24
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2253      	movs	r2, #83	; 0x53
 8002280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f897 	bl	80023b6 <RTC_EnterInitMode>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d008      	beq.n	80022a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	22ff      	movs	r2, #255	; 0xff
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2204      	movs	r2, #4
 800229a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e05e      	b.n	800235e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80022ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68d2      	ldr	r2, [r2, #12]
 80022da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	041a      	lsls	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f829 	bl	8002366 <HAL_RTC_WaitForSynchro>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	22ff      	movs	r2, #255	; 0xff
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2204      	movs	r2, #4
 8002326:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e018      	b.n	800235e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
  }
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002380:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002382:	f7fe ff09 	bl	8001198 <HAL_GetTick>
 8002386:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002388:	e009      	b.n	800239e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800238a:	f7fe ff05 	bl	8001198 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002398:	d901      	bls.n	800239e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e007      	b.n	80023ae <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0320 	and.w	r3, r3, #32
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d119      	bne.n	8002404 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023da:	f7fe fedd 	bl	8001198 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023e0:	e009      	b.n	80023f6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80023e2:	f7fe fed9 	bl	8001198 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f0:	d901      	bls.n	80023f6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e007      	b.n	8002406 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ee      	beq.n	80023e2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e01d      	b.n	800245c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d106      	bne.n	800243a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f815 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3304      	adds	r3, #4
 800244a:	4619      	mov	r1, r3
 800244c:	4610      	mov	r0, r2
 800244e:	f000 f967 	bl	8002720 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d007      	beq.n	80024b2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0201 	orr.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d122      	bne.n	800251c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d11b      	bne.n	800251c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0202 	mvn.w	r2, #2
 80024ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f8ee 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 8002508:	e005      	b.n	8002516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f8e0 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f8f1 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d122      	bne.n	8002570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b04      	cmp	r3, #4
 8002536:	d11b      	bne.n	8002570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0204 	mvn.w	r2, #4
 8002540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2202      	movs	r2, #2
 8002546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f8c4 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 800255c:	e005      	b.n	800256a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8b6 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f8c7 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0308 	and.w	r3, r3, #8
 800257a:	2b08      	cmp	r3, #8
 800257c:	d122      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b08      	cmp	r3, #8
 800258a:	d11b      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0208 	mvn.w	r2, #8
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2204      	movs	r2, #4
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f89a 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f88c 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f89d 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d122      	bne.n	8002618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d11b      	bne.n	8002618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0210 	mvn.w	r2, #16
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2208      	movs	r2, #8
 80025ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f870 	bl	80026e4 <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f862 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f873 	bl	80026f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b01      	cmp	r3, #1
 8002632:	d107      	bne.n	8002644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0201 	mvn.w	r2, #1
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe fb90 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264e:	2b80      	cmp	r3, #128	; 0x80
 8002650:	d10e      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265c:	2b80      	cmp	r3, #128	; 0x80
 800265e:	d107      	bne.n	8002670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f902 	bl	8002874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267a:	2b40      	cmp	r3, #64	; 0x40
 800267c:	d10e      	bne.n	800269c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d107      	bne.n	800269c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f838 	bl	800270c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d10e      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d107      	bne.n	80026c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0220 	mvn.w	r2, #32
 80026c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8cc 	bl	8002860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a40      	ldr	r2, [pc, #256]	; (8002834 <TIM_Base_SetConfig+0x114>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d013      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d00f      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a3d      	ldr	r2, [pc, #244]	; (8002838 <TIM_Base_SetConfig+0x118>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00b      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a3c      	ldr	r2, [pc, #240]	; (800283c <TIM_Base_SetConfig+0x11c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d007      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a3b      	ldr	r2, [pc, #236]	; (8002840 <TIM_Base_SetConfig+0x120>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0x40>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a3a      	ldr	r2, [pc, #232]	; (8002844 <TIM_Base_SetConfig+0x124>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d108      	bne.n	8002772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <TIM_Base_SetConfig+0x114>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02b      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d027      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <TIM_Base_SetConfig+0x118>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d023      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a2b      	ldr	r2, [pc, #172]	; (800283c <TIM_Base_SetConfig+0x11c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01f      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <TIM_Base_SetConfig+0x120>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01b      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a29      	ldr	r2, [pc, #164]	; (8002844 <TIM_Base_SetConfig+0x124>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d017      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a28      	ldr	r2, [pc, #160]	; (8002848 <TIM_Base_SetConfig+0x128>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a27      	ldr	r2, [pc, #156]	; (800284c <TIM_Base_SetConfig+0x12c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00f      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <TIM_Base_SetConfig+0x130>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d00b      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a25      	ldr	r2, [pc, #148]	; (8002854 <TIM_Base_SetConfig+0x134>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d007      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a24      	ldr	r2, [pc, #144]	; (8002858 <TIM_Base_SetConfig+0x138>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d003      	beq.n	80027d2 <TIM_Base_SetConfig+0xb2>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a23      	ldr	r2, [pc, #140]	; (800285c <TIM_Base_SetConfig+0x13c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d108      	bne.n	80027e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0a      	ldr	r2, [pc, #40]	; (8002834 <TIM_Base_SetConfig+0x114>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d003      	beq.n	8002818 <TIM_Base_SetConfig+0xf8>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <TIM_Base_SetConfig+0x124>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40010000 	.word	0x40010000
 8002838:	40000400 	.word	0x40000400
 800283c:	40000800 	.word	0x40000800
 8002840:	40000c00 	.word	0x40000c00
 8002844:	40010400 	.word	0x40010400
 8002848:	40014000 	.word	0x40014000
 800284c:	40014400 	.word	0x40014400
 8002850:	40014800 	.word	0x40014800
 8002854:	40001800 	.word	0x40001800
 8002858:	40001c00 	.word	0x40001c00
 800285c:	40002000 	.word	0x40002000

08002860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e03f      	b.n	800291a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe faac 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb97 	bl	8003000 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b088      	sub	sp, #32
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	f040 8083 	bne.w	8002a4a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Transmit+0x2e>
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e07b      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_UART_Transmit+0x40>
 800295e:	2302      	movs	r3, #2
 8002960:	e074      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2221      	movs	r2, #33	; 0x21
 8002974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002978:	f7fe fc0e 	bl	8001198 <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	88fa      	ldrh	r2, [r7, #6]
 8002982:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	88fa      	ldrh	r2, [r7, #6]
 8002988:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002992:	e042      	b.n	8002a1a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029aa:	d122      	bne.n	80029f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	2200      	movs	r2, #0
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f9b6 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e042      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3302      	adds	r3, #2
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	e017      	b.n	8002a1a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	3301      	adds	r3, #1
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	e013      	b.n	8002a1a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 f993 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e01f      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	60ba      	str	r2, [r7, #8]
 8002a12:	781a      	ldrb	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1b7      	bne.n	8002994 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f97a 	bl	8002d28 <UART_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e006      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b20      	cmp	r3, #32
 8002a6c:	d140      	bne.n	8002af0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <HAL_UART_Receive_IT+0x26>
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e039      	b.n	8002af2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Receive_IT+0x38>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e032      	b.n	8002af2 <HAL_UART_Receive_IT+0x9e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2222      	movs	r2, #34	; 0x22
 8002ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aca:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	e000      	b.n	8002af2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002af0:	2302      	movs	r3, #2
  }
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10d      	bne.n	8002b52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <HAL_UART_IRQHandler+0x52>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f9d6 	bl	8002efc <UART_Receive_IT>
      return;
 8002b50:	e0d1      	b.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80b0 	beq.w	8002cba <HAL_UART_IRQHandler+0x1ba>
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_UART_IRQHandler+0x70>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80a5 	beq.w	8002cba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <HAL_UART_IRQHandler+0x90>
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <HAL_UART_IRQHandler+0xb0>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f043 0202 	orr.w	r2, r3, #2
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xd0>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00f      	beq.n	8002bfa <HAL_UART_IRQHandler+0xfa>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	f003 0320 	and.w	r3, r3, #32
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_UART_IRQHandler+0xee>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	f043 0208 	orr.w	r2, r3, #8
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d078      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0320 	and.w	r3, r3, #32
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_UART_IRQHandler+0x11c>
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f970 	bl	8002efc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	bf0c      	ite	eq
 8002c2a:	2301      	moveq	r3, #1
 8002c2c:	2300      	movne	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_UART_IRQHandler+0x144>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d031      	beq.n	8002ca8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f8b9 	bl	8002dbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d123      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <HAL_UART_IRQHandler+0x1fc>)
 8002c76:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe fb79 	bl	8001374 <HAL_DMA_Abort_IT>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c92:	4610      	mov	r0, r2
 8002c94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c96:	e00e      	b.n	8002cb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f83b 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9e:	e00a      	b.n	8002cb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f837 	bl	8002d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca6:	e006      	b.n	8002cb6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f833 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002cb4:	e01e      	b.n	8002cf4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	bf00      	nop
    return;
 8002cb8:	e01c      	b.n	8002cf4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x1d6>
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8a6 	bl	8002e20 <UART_Transmit_IT>
    return;
 8002cd4:	e00f      	b.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d005      	beq.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8ee 	bl	8002ecc <UART_EndTransmit_IT>
    return;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002cf4:	bf00      	nop
  }
}
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08002df9 	.word	0x08002df9

08002d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	4613      	mov	r3, r2
 8002d36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d38:	e02c      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d40:	d028      	beq.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d007      	beq.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d48:	f7fe fa26 	bl	8001198 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d21d      	bcs.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68da      	ldr	r2, [r3, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e00f      	b.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d0c3      	beq.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002dd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f7ff ff7e 	bl	8002d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b21      	cmp	r3, #33	; 0x21
 8002e32:	d144      	bne.n	8002ebe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3c:	d11a      	bne.n	8002e74 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e52:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	1c9a      	adds	r2, r3, #2
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	621a      	str	r2, [r3, #32]
 8002e66:	e00e      	b.n	8002e86 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	621a      	str	r2, [r3, #32]
 8002e72:	e008      	b.n	8002e86 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	1c59      	adds	r1, r3, #1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6211      	str	r1, [r2, #32]
 8002e7e:	781a      	ldrb	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4619      	mov	r1, r3
 8002e94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10f      	bne.n	8002eba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff07 	bl	8002d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b22      	cmp	r3, #34	; 0x22
 8002f0e:	d171      	bne.n	8002ff4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d123      	bne.n	8002f62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10e      	bne.n	8002f46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3e:	1c9a      	adds	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	e029      	b.n	8002f9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f60:	e01b      	b.n	8002f9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6858      	ldr	r0, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	1c59      	adds	r1, r3, #1
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6291      	str	r1, [r2, #40]	; 0x28
 8002f7a:	b2c2      	uxtb	r2, r0
 8002f7c:	701a      	strb	r2, [r3, #0]
 8002f7e:	e00c      	b.n	8002f9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	1c58      	adds	r0, r3, #1
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	6288      	str	r0, [r1, #40]	; 0x28
 8002f92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d120      	bne.n	8002ff0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0220 	bic.w	r2, r2, #32
 8002fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7fd fdae 	bl	8000b48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e002      	b.n	8002ff6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	b085      	sub	sp, #20
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4313      	orrs	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003042:	f023 030c 	bic.w	r3, r3, #12
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	430b      	orrs	r3, r1
 800304e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306e:	f040 818b 	bne.w	8003388 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4ac1      	ldr	r2, [pc, #772]	; (800337c <UART_SetConfig+0x37c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d005      	beq.n	8003088 <UART_SetConfig+0x88>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4abf      	ldr	r2, [pc, #764]	; (8003380 <UART_SetConfig+0x380>)
 8003082:	4293      	cmp	r3, r2
 8003084:	f040 80bd 	bne.w	8003202 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003088:	f7fe ffb4 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 800308c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	461d      	mov	r5, r3
 8003092:	f04f 0600 	mov.w	r6, #0
 8003096:	46a8      	mov	r8, r5
 8003098:	46b1      	mov	r9, r6
 800309a:	eb18 0308 	adds.w	r3, r8, r8
 800309e:	eb49 0409 	adc.w	r4, r9, r9
 80030a2:	4698      	mov	r8, r3
 80030a4:	46a1      	mov	r9, r4
 80030a6:	eb18 0805 	adds.w	r8, r8, r5
 80030aa:	eb49 0906 	adc.w	r9, r9, r6
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030ba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030be:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030c2:	4688      	mov	r8, r1
 80030c4:	4691      	mov	r9, r2
 80030c6:	eb18 0005 	adds.w	r0, r8, r5
 80030ca:	eb49 0106 	adc.w	r1, r9, r6
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461d      	mov	r5, r3
 80030d4:	f04f 0600 	mov.w	r6, #0
 80030d8:	196b      	adds	r3, r5, r5
 80030da:	eb46 0406 	adc.w	r4, r6, r6
 80030de:	461a      	mov	r2, r3
 80030e0:	4623      	mov	r3, r4
 80030e2:	f7fd f925 	bl	8000330 <__aeabi_uldivmod>
 80030e6:	4603      	mov	r3, r0
 80030e8:	460c      	mov	r4, r1
 80030ea:	461a      	mov	r2, r3
 80030ec:	4ba5      	ldr	r3, [pc, #660]	; (8003384 <UART_SetConfig+0x384>)
 80030ee:	fba3 2302 	umull	r2, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	461d      	mov	r5, r3
 80030fc:	f04f 0600 	mov.w	r6, #0
 8003100:	46a9      	mov	r9, r5
 8003102:	46b2      	mov	sl, r6
 8003104:	eb19 0309 	adds.w	r3, r9, r9
 8003108:	eb4a 040a 	adc.w	r4, sl, sl
 800310c:	4699      	mov	r9, r3
 800310e:	46a2      	mov	sl, r4
 8003110:	eb19 0905 	adds.w	r9, r9, r5
 8003114:	eb4a 0a06 	adc.w	sl, sl, r6
 8003118:	f04f 0100 	mov.w	r1, #0
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003124:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003128:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800312c:	4689      	mov	r9, r1
 800312e:	4692      	mov	sl, r2
 8003130:	eb19 0005 	adds.w	r0, r9, r5
 8003134:	eb4a 0106 	adc.w	r1, sl, r6
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	461d      	mov	r5, r3
 800313e:	f04f 0600 	mov.w	r6, #0
 8003142:	196b      	adds	r3, r5, r5
 8003144:	eb46 0406 	adc.w	r4, r6, r6
 8003148:	461a      	mov	r2, r3
 800314a:	4623      	mov	r3, r4
 800314c:	f7fd f8f0 	bl	8000330 <__aeabi_uldivmod>
 8003150:	4603      	mov	r3, r0
 8003152:	460c      	mov	r4, r1
 8003154:	461a      	mov	r2, r3
 8003156:	4b8b      	ldr	r3, [pc, #556]	; (8003384 <UART_SetConfig+0x384>)
 8003158:	fba3 1302 	umull	r1, r3, r3, r2
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	2164      	movs	r1, #100	; 0x64
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	3332      	adds	r3, #50	; 0x32
 800316a:	4a86      	ldr	r2, [pc, #536]	; (8003384 <UART_SetConfig+0x384>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003178:	4498      	add	r8, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	461d      	mov	r5, r3
 800317e:	f04f 0600 	mov.w	r6, #0
 8003182:	46a9      	mov	r9, r5
 8003184:	46b2      	mov	sl, r6
 8003186:	eb19 0309 	adds.w	r3, r9, r9
 800318a:	eb4a 040a 	adc.w	r4, sl, sl
 800318e:	4699      	mov	r9, r3
 8003190:	46a2      	mov	sl, r4
 8003192:	eb19 0905 	adds.w	r9, r9, r5
 8003196:	eb4a 0a06 	adc.w	sl, sl, r6
 800319a:	f04f 0100 	mov.w	r1, #0
 800319e:	f04f 0200 	mov.w	r2, #0
 80031a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ae:	4689      	mov	r9, r1
 80031b0:	4692      	mov	sl, r2
 80031b2:	eb19 0005 	adds.w	r0, r9, r5
 80031b6:	eb4a 0106 	adc.w	r1, sl, r6
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	461d      	mov	r5, r3
 80031c0:	f04f 0600 	mov.w	r6, #0
 80031c4:	196b      	adds	r3, r5, r5
 80031c6:	eb46 0406 	adc.w	r4, r6, r6
 80031ca:	461a      	mov	r2, r3
 80031cc:	4623      	mov	r3, r4
 80031ce:	f7fd f8af 	bl	8000330 <__aeabi_uldivmod>
 80031d2:	4603      	mov	r3, r0
 80031d4:	460c      	mov	r4, r1
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <UART_SetConfig+0x384>)
 80031da:	fba3 1302 	umull	r1, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2164      	movs	r1, #100	; 0x64
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	3332      	adds	r3, #50	; 0x32
 80031ec:	4a65      	ldr	r2, [pc, #404]	; (8003384 <UART_SetConfig+0x384>)
 80031ee:	fba2 2303 	umull	r2, r3, r2, r3
 80031f2:	095b      	lsrs	r3, r3, #5
 80031f4:	f003 0207 	and.w	r2, r3, #7
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4442      	add	r2, r8
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	e26f      	b.n	80036e2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003202:	f7fe fee3 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003206:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	461d      	mov	r5, r3
 800320c:	f04f 0600 	mov.w	r6, #0
 8003210:	46a8      	mov	r8, r5
 8003212:	46b1      	mov	r9, r6
 8003214:	eb18 0308 	adds.w	r3, r8, r8
 8003218:	eb49 0409 	adc.w	r4, r9, r9
 800321c:	4698      	mov	r8, r3
 800321e:	46a1      	mov	r9, r4
 8003220:	eb18 0805 	adds.w	r8, r8, r5
 8003224:	eb49 0906 	adc.w	r9, r9, r6
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003234:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003238:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800323c:	4688      	mov	r8, r1
 800323e:	4691      	mov	r9, r2
 8003240:	eb18 0005 	adds.w	r0, r8, r5
 8003244:	eb49 0106 	adc.w	r1, r9, r6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	461d      	mov	r5, r3
 800324e:	f04f 0600 	mov.w	r6, #0
 8003252:	196b      	adds	r3, r5, r5
 8003254:	eb46 0406 	adc.w	r4, r6, r6
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	f7fd f868 	bl	8000330 <__aeabi_uldivmod>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
 8003264:	461a      	mov	r2, r3
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <UART_SetConfig+0x384>)
 8003268:	fba3 2302 	umull	r2, r3, r3, r2
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	461d      	mov	r5, r3
 8003276:	f04f 0600 	mov.w	r6, #0
 800327a:	46a9      	mov	r9, r5
 800327c:	46b2      	mov	sl, r6
 800327e:	eb19 0309 	adds.w	r3, r9, r9
 8003282:	eb4a 040a 	adc.w	r4, sl, sl
 8003286:	4699      	mov	r9, r3
 8003288:	46a2      	mov	sl, r4
 800328a:	eb19 0905 	adds.w	r9, r9, r5
 800328e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a6:	4689      	mov	r9, r1
 80032a8:	4692      	mov	sl, r2
 80032aa:	eb19 0005 	adds.w	r0, r9, r5
 80032ae:	eb4a 0106 	adc.w	r1, sl, r6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	461d      	mov	r5, r3
 80032b8:	f04f 0600 	mov.w	r6, #0
 80032bc:	196b      	adds	r3, r5, r5
 80032be:	eb46 0406 	adc.w	r4, r6, r6
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	f7fd f833 	bl	8000330 <__aeabi_uldivmod>
 80032ca:	4603      	mov	r3, r0
 80032cc:	460c      	mov	r4, r1
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <UART_SetConfig+0x384>)
 80032d2:	fba3 1302 	umull	r1, r3, r3, r2
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2164      	movs	r1, #100	; 0x64
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	3332      	adds	r3, #50	; 0x32
 80032e4:	4a27      	ldr	r2, [pc, #156]	; (8003384 <UART_SetConfig+0x384>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032f2:	4498      	add	r8, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	461d      	mov	r5, r3
 80032f8:	f04f 0600 	mov.w	r6, #0
 80032fc:	46a9      	mov	r9, r5
 80032fe:	46b2      	mov	sl, r6
 8003300:	eb19 0309 	adds.w	r3, r9, r9
 8003304:	eb4a 040a 	adc.w	r4, sl, sl
 8003308:	4699      	mov	r9, r3
 800330a:	46a2      	mov	sl, r4
 800330c:	eb19 0905 	adds.w	r9, r9, r5
 8003310:	eb4a 0a06 	adc.w	sl, sl, r6
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003320:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003324:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003328:	4689      	mov	r9, r1
 800332a:	4692      	mov	sl, r2
 800332c:	eb19 0005 	adds.w	r0, r9, r5
 8003330:	eb4a 0106 	adc.w	r1, sl, r6
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	461d      	mov	r5, r3
 800333a:	f04f 0600 	mov.w	r6, #0
 800333e:	196b      	adds	r3, r5, r5
 8003340:	eb46 0406 	adc.w	r4, r6, r6
 8003344:	461a      	mov	r2, r3
 8003346:	4623      	mov	r3, r4
 8003348:	f7fc fff2 	bl	8000330 <__aeabi_uldivmod>
 800334c:	4603      	mov	r3, r0
 800334e:	460c      	mov	r4, r1
 8003350:	461a      	mov	r2, r3
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <UART_SetConfig+0x384>)
 8003354:	fba3 1302 	umull	r1, r3, r3, r2
 8003358:	095b      	lsrs	r3, r3, #5
 800335a:	2164      	movs	r1, #100	; 0x64
 800335c:	fb01 f303 	mul.w	r3, r1, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	3332      	adds	r3, #50	; 0x32
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <UART_SetConfig+0x384>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	f003 0207 	and.w	r2, r3, #7
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4442      	add	r2, r8
 8003378:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800337a:	e1b2      	b.n	80036e2 <UART_SetConfig+0x6e2>
 800337c:	40011000 	.word	0x40011000
 8003380:	40011400 	.word	0x40011400
 8003384:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4ad7      	ldr	r2, [pc, #860]	; (80036ec <UART_SetConfig+0x6ec>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d005      	beq.n	800339e <UART_SetConfig+0x39e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4ad6      	ldr	r2, [pc, #856]	; (80036f0 <UART_SetConfig+0x6f0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	f040 80d1 	bne.w	8003540 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800339e:	f7fe fe29 	bl	8001ff4 <HAL_RCC_GetPCLK2Freq>
 80033a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	469a      	mov	sl, r3
 80033a8:	f04f 0b00 	mov.w	fp, #0
 80033ac:	46d0      	mov	r8, sl
 80033ae:	46d9      	mov	r9, fp
 80033b0:	eb18 0308 	adds.w	r3, r8, r8
 80033b4:	eb49 0409 	adc.w	r4, r9, r9
 80033b8:	4698      	mov	r8, r3
 80033ba:	46a1      	mov	r9, r4
 80033bc:	eb18 080a 	adds.w	r8, r8, sl
 80033c0:	eb49 090b 	adc.w	r9, r9, fp
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033d8:	4688      	mov	r8, r1
 80033da:	4691      	mov	r9, r2
 80033dc:	eb1a 0508 	adds.w	r5, sl, r8
 80033e0:	eb4b 0609 	adc.w	r6, fp, r9
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4619      	mov	r1, r3
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	f04f 0400 	mov.w	r4, #0
 80033f6:	0094      	lsls	r4, r2, #2
 80033f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033fc:	008b      	lsls	r3, r1, #2
 80033fe:	461a      	mov	r2, r3
 8003400:	4623      	mov	r3, r4
 8003402:	4628      	mov	r0, r5
 8003404:	4631      	mov	r1, r6
 8003406:	f7fc ff93 	bl	8000330 <__aeabi_uldivmod>
 800340a:	4603      	mov	r3, r0
 800340c:	460c      	mov	r4, r1
 800340e:	461a      	mov	r2, r3
 8003410:	4bb8      	ldr	r3, [pc, #736]	; (80036f4 <UART_SetConfig+0x6f4>)
 8003412:	fba3 2302 	umull	r2, r3, r3, r2
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	469b      	mov	fp, r3
 8003420:	f04f 0c00 	mov.w	ip, #0
 8003424:	46d9      	mov	r9, fp
 8003426:	46e2      	mov	sl, ip
 8003428:	eb19 0309 	adds.w	r3, r9, r9
 800342c:	eb4a 040a 	adc.w	r4, sl, sl
 8003430:	4699      	mov	r9, r3
 8003432:	46a2      	mov	sl, r4
 8003434:	eb19 090b 	adds.w	r9, r9, fp
 8003438:	eb4a 0a0c 	adc.w	sl, sl, ip
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003448:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800344c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003450:	4689      	mov	r9, r1
 8003452:	4692      	mov	sl, r2
 8003454:	eb1b 0509 	adds.w	r5, fp, r9
 8003458:	eb4c 060a 	adc.w	r6, ip, sl
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4619      	mov	r1, r3
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	0094      	lsls	r4, r2, #2
 8003470:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003474:	008b      	lsls	r3, r1, #2
 8003476:	461a      	mov	r2, r3
 8003478:	4623      	mov	r3, r4
 800347a:	4628      	mov	r0, r5
 800347c:	4631      	mov	r1, r6
 800347e:	f7fc ff57 	bl	8000330 <__aeabi_uldivmod>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	461a      	mov	r2, r3
 8003488:	4b9a      	ldr	r3, [pc, #616]	; (80036f4 <UART_SetConfig+0x6f4>)
 800348a:	fba3 1302 	umull	r1, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	2164      	movs	r1, #100	; 0x64
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	3332      	adds	r3, #50	; 0x32
 800349c:	4a95      	ldr	r2, [pc, #596]	; (80036f4 <UART_SetConfig+0x6f4>)
 800349e:	fba2 2303 	umull	r2, r3, r2, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034a8:	4498      	add	r8, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	469b      	mov	fp, r3
 80034ae:	f04f 0c00 	mov.w	ip, #0
 80034b2:	46d9      	mov	r9, fp
 80034b4:	46e2      	mov	sl, ip
 80034b6:	eb19 0309 	adds.w	r3, r9, r9
 80034ba:	eb4a 040a 	adc.w	r4, sl, sl
 80034be:	4699      	mov	r9, r3
 80034c0:	46a2      	mov	sl, r4
 80034c2:	eb19 090b 	adds.w	r9, r9, fp
 80034c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034ca:	f04f 0100 	mov.w	r1, #0
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034de:	4689      	mov	r9, r1
 80034e0:	4692      	mov	sl, r2
 80034e2:	eb1b 0509 	adds.w	r5, fp, r9
 80034e6:	eb4c 060a 	adc.w	r6, ip, sl
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	f04f 0400 	mov.w	r4, #0
 80034fc:	0094      	lsls	r4, r2, #2
 80034fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003502:	008b      	lsls	r3, r1, #2
 8003504:	461a      	mov	r2, r3
 8003506:	4623      	mov	r3, r4
 8003508:	4628      	mov	r0, r5
 800350a:	4631      	mov	r1, r6
 800350c:	f7fc ff10 	bl	8000330 <__aeabi_uldivmod>
 8003510:	4603      	mov	r3, r0
 8003512:	460c      	mov	r4, r1
 8003514:	461a      	mov	r2, r3
 8003516:	4b77      	ldr	r3, [pc, #476]	; (80036f4 <UART_SetConfig+0x6f4>)
 8003518:	fba3 1302 	umull	r1, r3, r3, r2
 800351c:	095b      	lsrs	r3, r3, #5
 800351e:	2164      	movs	r1, #100	; 0x64
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	3332      	adds	r3, #50	; 0x32
 800352a:	4a72      	ldr	r2, [pc, #456]	; (80036f4 <UART_SetConfig+0x6f4>)
 800352c:	fba2 2303 	umull	r2, r3, r2, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	f003 020f 	and.w	r2, r3, #15
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4442      	add	r2, r8
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	e0d0      	b.n	80036e2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7fe fd44 	bl	8001fcc <HAL_RCC_GetPCLK1Freq>
 8003544:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	469a      	mov	sl, r3
 800354a:	f04f 0b00 	mov.w	fp, #0
 800354e:	46d0      	mov	r8, sl
 8003550:	46d9      	mov	r9, fp
 8003552:	eb18 0308 	adds.w	r3, r8, r8
 8003556:	eb49 0409 	adc.w	r4, r9, r9
 800355a:	4698      	mov	r8, r3
 800355c:	46a1      	mov	r9, r4
 800355e:	eb18 080a 	adds.w	r8, r8, sl
 8003562:	eb49 090b 	adc.w	r9, r9, fp
 8003566:	f04f 0100 	mov.w	r1, #0
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003572:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003576:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800357a:	4688      	mov	r8, r1
 800357c:	4691      	mov	r9, r2
 800357e:	eb1a 0508 	adds.w	r5, sl, r8
 8003582:	eb4b 0609 	adc.w	r6, fp, r9
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4619      	mov	r1, r3
 800358c:	f04f 0200 	mov.w	r2, #0
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	f04f 0400 	mov.w	r4, #0
 8003598:	0094      	lsls	r4, r2, #2
 800359a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800359e:	008b      	lsls	r3, r1, #2
 80035a0:	461a      	mov	r2, r3
 80035a2:	4623      	mov	r3, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	4631      	mov	r1, r6
 80035a8:	f7fc fec2 	bl	8000330 <__aeabi_uldivmod>
 80035ac:	4603      	mov	r3, r0
 80035ae:	460c      	mov	r4, r1
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <UART_SetConfig+0x6f4>)
 80035b4:	fba3 2302 	umull	r2, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	469b      	mov	fp, r3
 80035c2:	f04f 0c00 	mov.w	ip, #0
 80035c6:	46d9      	mov	r9, fp
 80035c8:	46e2      	mov	sl, ip
 80035ca:	eb19 0309 	adds.w	r3, r9, r9
 80035ce:	eb4a 040a 	adc.w	r4, sl, sl
 80035d2:	4699      	mov	r9, r3
 80035d4:	46a2      	mov	sl, r4
 80035d6:	eb19 090b 	adds.w	r9, r9, fp
 80035da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035f2:	4689      	mov	r9, r1
 80035f4:	4692      	mov	sl, r2
 80035f6:	eb1b 0509 	adds.w	r5, fp, r9
 80035fa:	eb4c 060a 	adc.w	r6, ip, sl
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	4619      	mov	r1, r3
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	f04f 0400 	mov.w	r4, #0
 8003610:	0094      	lsls	r4, r2, #2
 8003612:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003616:	008b      	lsls	r3, r1, #2
 8003618:	461a      	mov	r2, r3
 800361a:	4623      	mov	r3, r4
 800361c:	4628      	mov	r0, r5
 800361e:	4631      	mov	r1, r6
 8003620:	f7fc fe86 	bl	8000330 <__aeabi_uldivmod>
 8003624:	4603      	mov	r3, r0
 8003626:	460c      	mov	r4, r1
 8003628:	461a      	mov	r2, r3
 800362a:	4b32      	ldr	r3, [pc, #200]	; (80036f4 <UART_SetConfig+0x6f4>)
 800362c:	fba3 1302 	umull	r1, r3, r3, r2
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	2164      	movs	r1, #100	; 0x64
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	3332      	adds	r3, #50	; 0x32
 800363e:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <UART_SetConfig+0x6f4>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800364a:	4498      	add	r8, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	469b      	mov	fp, r3
 8003650:	f04f 0c00 	mov.w	ip, #0
 8003654:	46d9      	mov	r9, fp
 8003656:	46e2      	mov	sl, ip
 8003658:	eb19 0309 	adds.w	r3, r9, r9
 800365c:	eb4a 040a 	adc.w	r4, sl, sl
 8003660:	4699      	mov	r9, r3
 8003662:	46a2      	mov	sl, r4
 8003664:	eb19 090b 	adds.w	r9, r9, fp
 8003668:	eb4a 0a0c 	adc.w	sl, sl, ip
 800366c:	f04f 0100 	mov.w	r1, #0
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003678:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800367c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003680:	4689      	mov	r9, r1
 8003682:	4692      	mov	sl, r2
 8003684:	eb1b 0509 	adds.w	r5, fp, r9
 8003688:	eb4c 060a 	adc.w	r6, ip, sl
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4619      	mov	r1, r3
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f04f 0400 	mov.w	r4, #0
 800369e:	0094      	lsls	r4, r2, #2
 80036a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036a4:	008b      	lsls	r3, r1, #2
 80036a6:	461a      	mov	r2, r3
 80036a8:	4623      	mov	r3, r4
 80036aa:	4628      	mov	r0, r5
 80036ac:	4631      	mov	r1, r6
 80036ae:	f7fc fe3f 	bl	8000330 <__aeabi_uldivmod>
 80036b2:	4603      	mov	r3, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	461a      	mov	r2, r3
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <UART_SetConfig+0x6f4>)
 80036ba:	fba3 1302 	umull	r1, r3, r3, r2
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2164      	movs	r1, #100	; 0x64
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3332      	adds	r3, #50	; 0x32
 80036cc:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <UART_SetConfig+0x6f4>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4442      	add	r2, r8
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	e7ff      	b.n	80036e2 <UART_SetConfig+0x6e2>
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40011400 	.word	0x40011400
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <show_request_handler>:
 */
#include "general_log.h"
#include <string.h>

void show_request_handler(const char * uif_command_data)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	//int i;
	//while(uif_command_data[i++] = '\0')

	int j = -1;
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	61fb      	str	r3, [r7, #28]
	char send_arr[20];
	while(strcmp(general_log_table[++j].log_name,"EMPTY"))
 8003706:	e024      	b.n	8003752 <show_request_handler+0x5a>
	{
		if(!strcmp(uif_command_data,general_log_table[j].log_name))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <show_request_handler+0x80>)
 800370e:	4413      	add	r3, r2
 8003710:	4619      	mov	r1, r3
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7fc fda6 	bl	8000264 <strcmp>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d119      	bne.n	8003752 <show_request_handler+0x5a>
		{
			sprintf(send_arr, "%s  %d\n",uif_command_data,*(general_log_table[j].add_of_value));
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <show_request_handler+0x80>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	4413      	add	r3, r2
 8003726:	330c      	adds	r3, #12
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f107 0008 	add.w	r0, r7, #8
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	4912      	ldr	r1, [pc, #72]	; (800377c <show_request_handler+0x84>)
 8003734:	f004 fdd2 	bl	80082dc <siprintf>
			send_UART((uint8_t *)send_arr, strlen(send_arr));
 8003738:	f107 0308 	add.w	r3, r7, #8
 800373c:	4618      	mov	r0, r3
 800373e:	f7fc fd9b 	bl	8000278 <strlen>
 8003742:	4603      	mov	r3, r0
 8003744:	b29a      	uxth	r2, r3
 8003746:	f107 0308 	add.w	r3, r7, #8
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd f9e7 	bl	8000b20 <send_UART>
	while(strcmp(general_log_table[++j].log_name,"EMPTY"))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4a06      	ldr	r2, [pc, #24]	; (8003778 <show_request_handler+0x80>)
 800375e:	4413      	add	r3, r2
 8003760:	4907      	ldr	r1, [pc, #28]	; (8003780 <show_request_handler+0x88>)
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fd7e 	bl	8000264 <strcmp>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cc      	bne.n	8003708 <show_request_handler+0x10>
		}

	}

}
 800376e:	bf00      	nop
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000018 	.word	0x20000018
 800377c:	08008bdc 	.word	0x08008bdc
 8003780:	08008be4 	.word	0x08008be4

08003784 <vApplicationIdleHook>:
 */

#include "hook_functions.h"

void vApplicationIdleHook()
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);	//sleep
 8003788:	2101      	movs	r1, #1
 800378a:	2000      	movs	r0, #0
 800378c:	f7fd ffc8 	bl	8001720 <HAL_PWR_EnterSLEEPMode>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}

08003794 <command_task_handler>:
		send_UART(receive_data_buffer, SIZE_OF_READ_DATA_QUE_ELEMENT);
	}
}*/

void command_task_handler(void *param)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	; 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
	volatile uint32_t ulNotifiedValue;
	//uint8_t receive_data_buffer[SIZE_OF_READ_DATA_QUE];
	uint8_t receive_data[LOG_MAX_COMMAND_LENGTH];
	int i = 0;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY);  // notify bekle
 80037a0:	f107 0218 	add.w	r2, r7, #24
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	2200      	movs	r2, #0
 80037ae:	2100      	movs	r1, #0
 80037b0:	2000      	movs	r0, #0
 80037b2:	f001 fda9 	bl	8005308 <xTaskGenericNotifyWait>

		while(uxQueueMessagesWaiting(q_read_data) != 0)   // queue da ne kadar mesaj var?
 80037b6:	e00c      	b.n	80037d2 <command_task_handler+0x3e>
		{
			xQueueReceive(q_read_data,(void *)&receive_data,(TickType_t) 0);
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <command_task_handler+0x50>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f107 0108 	add.w	r1, r7, #8
 80037c0:	2200      	movs	r2, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fc5c 	bl	8004080 <xQueueReceive>

			command_parser(receive_data);
 80037c8:	f107 0308 	add.w	r3, r7, #8
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f843 	bl	8003858 <command_parser>
		while(uxQueueMessagesWaiting(q_read_data) != 0)   // queue da ne kadar mesaj var?
 80037d2:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <command_task_handler+0x50>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fd66 	bl	80042a8 <uxQueueMessagesWaiting>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1ea      	bne.n	80037b8 <command_task_handler+0x24>
		xTaskNotifyWait(0, 0, &ulNotifiedValue, portMAX_DELAY);  // notify bekle
 80037e2:	e7dd      	b.n	80037a0 <command_task_handler+0xc>
 80037e4:	2001443c 	.word	0x2001443c

080037e8 <GS_task_handler>:
		}
	}
}

void GS_task_handler(void *param)
{
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b089      	sub	sp, #36	; 0x24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	uint8_t data_buffer[SIZE_OF_READ_DATA_QUE] = "SAMPIYON GS\n";
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <GS_task_handler+0x34>)
 80037f2:	f107 040c 	add.w	r4, r7, #12
 80037f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037f8:	c407      	stmia	r4!, {r0, r1, r2}
 80037fa:	7023      	strb	r3, [r4, #0]
 80037fc:	f107 0319 	add.w	r3, r7, #25
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f8c3 2003 	str.w	r2, [r3, #3]
	while(1)
	{
		send_UART(data_buffer, sizeof(data_buffer));
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	2114      	movs	r1, #20
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd f986 	bl	8000b20 <send_UART>
		vTaskDelay(pdMS_TO_TICKS(1000));
 8003814:	2064      	movs	r0, #100	; 0x64
 8003816:	f001 f85f 	bl	80048d8 <vTaskDelay>
	{
 800381a:	e7f5      	b.n	8003808 <GS_task_handler+0x20>
 800381c:	08008bec 	.word	0x08008bec

08003820 <FB_task_handler>:
	}
}

void FB_task_handler(void *param)
{
 8003820:	b590      	push	{r4, r7, lr}
 8003822:	b089      	sub	sp, #36	; 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	uint8_t data_buffer[SIZE_OF_READ_DATA_QUE] = "SAMPIYON FB\n";
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <FB_task_handler+0x34>)
 800382a:	f107 040c 	add.w	r4, r7, #12
 800382e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003830:	c407      	stmia	r4!, {r0, r1, r2}
 8003832:	7023      	strb	r3, [r4, #0]
 8003834:	f107 0319 	add.w	r3, r7, #25
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f8c3 2003 	str.w	r2, [r3, #3]
	while(1)
	{
		send_UART(data_buffer, sizeof(data_buffer));
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	2114      	movs	r1, #20
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd f96a 	bl	8000b20 <send_UART>
		vTaskDelay(pdMS_TO_TICKS(1000));
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	f001 f843 	bl	80048d8 <vTaskDelay>
	{
 8003852:	e7f5      	b.n	8003840 <FB_task_handler+0x20>
 8003854:	08008c00 	.word	0x08008c00

08003858 <command_parser>:
		"show",
		"EMPTY"
};

void command_parser(uint8_t * command)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	int i = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
	while(command[i++] != '\n');
 8003864:	bf00      	nop
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	61fa      	str	r2, [r7, #28]
 800386c:	461a      	mov	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b0a      	cmp	r3, #10
 8003876:	d1f6      	bne.n	8003866 <command_parser+0xe>

	struct uif_command_s 	uif_command;

	tokenize_command(&uif_command, (const uint8_t *)command);
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f000 f81e 	bl	80038c0 <tokenize_command>

	add_null_char_to_end_of_arr(&uif_command);
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f83b 	bl	8003904 <add_null_char_to_end_of_arr>

	enum command_enum command_val = find_command(uif_command);
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003894:	f000 f846 	bl	8003924 <find_command>
 8003898:	4603      	mov	r3, r0
 800389a:	76fb      	strb	r3, [r7, #27]

	switch(command_val)
 800389c:	7efb      	ldrb	r3, [r7, #27]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <command_parser+0x50>
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d007      	beq.n	80038b6 <command_parser+0x5e>
			show_request_handler((const char *)&uif_command.data);
			break;
		case EMPTY_COMMAND:
			break;
		default:
			break;
 80038a6:	e007      	b.n	80038b8 <command_parser+0x60>
			show_request_handler((const char *)&uif_command.data);
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	3305      	adds	r3, #5
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff22 	bl	80036f8 <show_request_handler>
			break;
 80038b4:	e000      	b.n	80038b8 <command_parser+0x60>
			break;
 80038b6:	bf00      	nop
	}

}
 80038b8:	bf00      	nop
 80038ba:	3720      	adds	r7, #32
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <tokenize_command>:

void tokenize_command(struct uif_command_s * uif_command, const uint8_t * command)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
	char * token_of_command = strtok((char *)command, " ");
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <tokenize_command+0x40>)
 80038cc:	6838      	ldr	r0, [r7, #0]
 80038ce:	f004 fd3b 	bl	8008348 <strtok>
 80038d2:	60f8      	str	r0, [r7, #12]
	strncpy(uif_command->command, token_of_command, sizeof(uif_command->command));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2205      	movs	r2, #5
 80038d8:	68f9      	ldr	r1, [r7, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	f004 fd1e 	bl	800831c <strncpy>
	token_of_command = strtok(NULL, " ");
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <tokenize_command+0x40>)
 80038e2:	2000      	movs	r0, #0
 80038e4:	f004 fd30 	bl	8008348 <strtok>
 80038e8:	60f8      	str	r0, [r7, #12]
	strncpy(uif_command->data, token_of_command, sizeof(uif_command->data));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3305      	adds	r3, #5
 80038ee:	220b      	movs	r2, #11
 80038f0:	68f9      	ldr	r1, [r7, #12]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 fd12 	bl	800831c <strncpy>
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	08008c24 	.word	0x08008c24

08003904 <add_null_char_to_end_of_arr>:

void add_null_char_to_end_of_arr(struct uif_command_s * uif_command)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	uif_command->command[COMMAND_SIZE_IN_COMMAND_WORD - 1] = '\0';
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	711a      	strb	r2, [r3, #4]
	uif_command->data[DATA_SIZE_IN_COMMAND_WORD - 1] = '\0';
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	73da      	strb	r2, [r3, #15]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <find_command>:

enum command_enum find_command(struct uif_command_s  uif_command)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	463c      	mov	r4, r7
 800392c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int command_val = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
	while(strcmp(uif_command_table[command_val],"EMPTY") )
 8003934:	e011      	b.n	800395a <find_command+0x36>
	{
		if(!strcmp(uif_command_table[command_val],(const char *)uif_command.command))
 8003936:	4a11      	ldr	r2, [pc, #68]	; (800397c <find_command+0x58>)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	463a      	mov	r2, r7
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fc8e 	bl	8000264 <strcmp>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <find_command+0x30>
			return (enum command_enum) command_val;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	b2db      	uxtb	r3, r3
 8003952:	e00f      	b.n	8003974 <find_command+0x50>
		command_val++;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	3301      	adds	r3, #1
 8003958:	617b      	str	r3, [r7, #20]
	while(strcmp(uif_command_table[command_val],"EMPTY") )
 800395a:	4a08      	ldr	r2, [pc, #32]	; (800397c <find_command+0x58>)
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	4907      	ldr	r1, [pc, #28]	; (8003980 <find_command+0x5c>)
 8003964:	4618      	mov	r0, r3
 8003966:	f7fc fc7d 	bl	8000264 <strcmp>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1e2      	bne.n	8003936 <find_command+0x12>
	}
	return (enum command_enum) command_val;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	bd90      	pop	{r4, r7, pc}
 800397c:	20000058 	.word	0x20000058
 8003980:	08008c1c 	.word	0x08008c1c

08003984 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f103 0208 	add.w	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f04f 32ff 	mov.w	r2, #4294967295
 800399c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 0208 	add.w	r2, r3, #8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f103 0208 	add.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80039de:	b480      	push	{r7}
 80039e0:	b085      	sub	sp, #20
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
}
 8003a1a:	bf00      	nop
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d103      	bne.n	8003a46 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e00c      	b.n	8003a60 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e002      	b.n	8003a54 <vListInsert+0x2e>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d2f6      	bcs.n	8003a4e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6852      	ldr	r2, [r2, #4]
 8003ab8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d103      	bne.n	8003acc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1e5a      	subs	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <xQueueGenericReset+0x28>
 8003b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b04:	f383 8811 	msr	BASEPRI, r3
 8003b08:	f3bf 8f6f 	isb	sy
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	e7fe      	b.n	8003b12 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8003b14:	f002 fab6 	bl	8006084 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b24:	fb01 f303 	mul.w	r3, r1, r3
 8003b28:	441a      	add	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	3b01      	subs	r3, #1
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b4a:	fb01 f303 	mul.w	r3, r1, r3
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	22ff      	movs	r2, #255	; 0xff
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	22ff      	movs	r2, #255	; 0xff
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d114      	bne.n	8003b94 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d01a      	beq.n	8003ba8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3310      	adds	r3, #16
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f98c 	bl	8004e94 <xTaskRemoveFromEventList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d012      	beq.n	8003ba8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <xQueueGenericReset+0xcc>)
 8003b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	e009      	b.n	8003ba8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3310      	adds	r3, #16
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fef3 	bl	8003984 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3324      	adds	r3, #36	; 0x24
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff feee 	bl	8003984 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003ba8:	f002 fa9a 	bl	80060e0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003bac:	2301      	movs	r3, #1
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <xQueueGenericCreate+0x28>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e7fe      	b.n	8003be2 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <xQueueGenericCreate+0x46>
 8003bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d101      	bne.n	8003c06 <xQueueGenericCreate+0x4a>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <xQueueGenericCreate+0x4c>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <xQueueGenericCreate+0x64>
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e7fe      	b.n	8003c1e <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003c26:	d909      	bls.n	8003c3c <xQueueGenericCreate+0x80>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e7fe      	b.n	8003c3a <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	3350      	adds	r3, #80	; 0x50
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 fb3f 	bl	80062c4 <pvPortMalloc>
 8003c46:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	3350      	adds	r3, #80	; 0x50
 8003c56:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c58:	79fa      	ldrb	r2, [r7, #7]
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f805 	bl	8003c74 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
    }
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3728      	adds	r7, #40	; 0x28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	e002      	b.n	8003c96 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	69b8      	ldr	r0, [r7, #24]
 8003ca6:	f7ff ff21 	bl	8003aec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	68f9      	ldr	r1, [r7, #12]
 8003cb8:	2073      	movs	r0, #115	; 0x73
 8003cba:	f003 fb43 	bl	8007344 <SEGGER_SYSVIEW_RecordU32x3>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
	...

08003cc8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b090      	sub	sp, #64	; 0x40
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
 8003cd4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d109      	bne.n	8003cf8 <xQueueGenericSend+0x30>
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cf6:	e7fe      	b.n	8003cf6 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSend+0x3e>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <xQueueGenericSend+0x42>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <xQueueGenericSend+0x44>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d109      	bne.n	8003d24 <xQueueGenericSend+0x5c>
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	e7fe      	b.n	8003d22 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d103      	bne.n	8003d32 <xQueueGenericSend+0x6a>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <xQueueGenericSend+0x6e>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <xQueueGenericSend+0x70>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d109      	bne.n	8003d50 <xQueueGenericSend+0x88>
 8003d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	623b      	str	r3, [r7, #32]
 8003d4e:	e7fe      	b.n	8003d4e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d50:	f001 fa3e 	bl	80051d0 <xTaskGetSchedulerState>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xQueueGenericSend+0x98>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <xQueueGenericSend+0x9c>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <xQueueGenericSend+0x9e>
 8003d64:	2300      	movs	r3, #0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <xQueueGenericSend+0xb6>
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e7fe      	b.n	8003d7c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d7e:	f002 f981 	bl	8006084 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <xQueueGenericSend+0xcc>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d136      	bne.n	8003e02 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 f90c 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	460b      	mov	r3, r1
 8003da6:	4601      	mov	r1, r0
 8003da8:	205a      	movs	r0, #90	; 0x5a
 8003daa:	f003 fb41 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003db4:	f000 fa95 	bl	80042e2 <prvCopyDataToQueue>
 8003db8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 f864 	bl	8004e94 <xTaskRemoveFromEventList>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d013      	beq.n	8003dfa <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003dd2:	4b4d      	ldr	r3, [pc, #308]	; (8003f08 <xQueueGenericSend+0x240>)
 8003dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	e00a      	b.n	8003dfa <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <xQueueGenericSend+0x240>)
 8003dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003dfa:	f002 f971 	bl	80060e0 <vPortExitCritical>
                return pdPASS;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e07d      	b.n	8003efe <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d110      	bne.n	8003e2a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e08:	f002 f96a 	bl	80060e0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f004 f8d0 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4601      	mov	r1, r0
 8003e20:	205a      	movs	r0, #90	; 0x5a
 8003e22:	f003 fb05 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	e069      	b.n	8003efe <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 f893 	bl	8004f60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e3e:	f002 f94f 	bl	80060e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e42:	f000 fde1 	bl	8004a08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e46:	f002 f91d 	bl	8006084 <vPortEnterCritical>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e50:	b25b      	sxtb	r3, r3
 8003e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e56:	d103      	bne.n	8003e60 <xQueueGenericSend+0x198>
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e66:	b25b      	sxtb	r3, r3
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d103      	bne.n	8003e76 <xQueueGenericSend+0x1ae>
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e76:	f002 f933 	bl	80060e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e7a:	1d3a      	adds	r2, r7, #4
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f882 	bl	8004f8c <xTaskCheckForTimeOut>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d124      	bne.n	8003ed8 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e90:	f000 fb1f 	bl	80044d2 <prvIsQueueFull>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d018      	beq.n	8003ecc <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 ffa4 	bl	8004df0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eaa:	f000 faaa 	bl	8004402 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003eae:	f000 fdb9 	bl	8004a24 <xTaskResumeAll>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f af62 	bne.w	8003d7e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <xQueueGenericSend+0x240>)
 8003ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	e758      	b.n	8003d7e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ece:	f000 fa98 	bl	8004402 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ed2:	f000 fda7 	bl	8004a24 <xTaskResumeAll>
 8003ed6:	e752      	b.n	8003d7e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eda:	f000 fa92 	bl	8004402 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ede:	f000 fda1 	bl	8004a24 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f004 f865 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4601      	mov	r1, r0
 8003ef6:	205a      	movs	r0, #90	; 0x5a
 8003ef8:	f003 fa9a 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003efc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3738      	adds	r7, #56	; 0x38
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b090      	sub	sp, #64	; 0x40
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d109      	bne.n	8003f38 <xQueueGenericSendFromISR+0x2c>
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f36:	e7fe      	b.n	8003f36 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d103      	bne.n	8003f46 <xQueueGenericSendFromISR+0x3a>
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <xQueueGenericSendFromISR+0x3e>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <xQueueGenericSendFromISR+0x40>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <xQueueGenericSendFromISR+0x58>
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d103      	bne.n	8003f72 <xQueueGenericSendFromISR+0x66>
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <xQueueGenericSendFromISR+0x6a>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <xQueueGenericSendFromISR+0x6c>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d109      	bne.n	8003f90 <xQueueGenericSendFromISR+0x84>
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e7fe      	b.n	8003f8e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f90:	f002 f95a 	bl	8006248 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003f94:	f3ef 8211 	mrs	r2, BASEPRI
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	61fa      	str	r2, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003fac:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d302      	bcc.n	8003fc2 <xQueueGenericSendFromISR+0xb6>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d147      	bne.n	8004052 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 ffed 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8003fda:	4601      	mov	r1, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2060      	movs	r0, #96	; 0x60
 8003fe2:	f003 f955 	bl	8007290 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fec:	f000 f979 	bl	80042e2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003ff0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff8:	d112      	bne.n	8004020 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d024      	beq.n	800404c <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004004:	3324      	adds	r3, #36	; 0x24
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff44 	bl	8004e94 <xTaskRemoveFromEventList>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e015      	b.n	800404c <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004020:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004024:	2b7f      	cmp	r3, #127	; 0x7f
 8004026:	d109      	bne.n	800403c <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e7fe      	b.n	800403a <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800403c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004040:	3301      	adds	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	b25a      	sxtb	r2, r3
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 800404c:	2301      	movs	r3, #1
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8004050:	e00b      	b.n	800406a <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004054:	4618      	mov	r0, r3
 8004056:	f003 ffad 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 800405a:	4601      	mov	r1, r0
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	461a      	mov	r2, r3
 8004060:	2060      	movs	r0, #96	; 0x60
 8004062:	f003 f915 	bl	8007290 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8004066:	2300      	movs	r3, #0
 8004068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004076:	4618      	mov	r0, r3
 8004078:	3740      	adds	r7, #64	; 0x40
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
	...

08004080 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b08f      	sub	sp, #60	; 0x3c
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <xQueueReceive+0x2e>
        __asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	e7fe      	b.n	80040ac <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <xQueueReceive+0x3c>
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <xQueueReceive+0x40>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <xQueueReceive+0x42>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <xQueueReceive+0x5a>
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	e7fe      	b.n	80040d8 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040da:	f001 f879 	bl	80051d0 <xTaskGetSchedulerState>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <xQueueReceive+0x6a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <xQueueReceive+0x6e>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <xQueueReceive+0x70>
 80040ee:	2300      	movs	r3, #0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <xQueueReceive+0x88>
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e7fe      	b.n	8004106 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004108:	f001 ffbc 	bl	8006084 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	d031      	beq.n	800417c <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800411c:	f000 f94b 	bl	80043b6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004122:	4618      	mov	r0, r3
 8004124:	f003 ff46 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8004128:	4604      	mov	r4, r0
 800412a:	2000      	movs	r0, #0
 800412c:	f003 ff42 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8004130:	4601      	mov	r1, r0
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	2301      	movs	r3, #1
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	460a      	mov	r2, r1
 800413c:	4621      	mov	r1, r4
 800413e:	205c      	movs	r0, #92	; 0x5c
 8004140:	f003 f976 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	3310      	adds	r3, #16
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fe9b 	bl	8004e94 <xTaskRemoveFromEventList>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004164:	4b4f      	ldr	r3, [pc, #316]	; (80042a4 <xQueueReceive+0x224>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004174:	f001 ffb4 	bl	80060e0 <vPortExitCritical>
                return pdPASS;
 8004178:	2301      	movs	r3, #1
 800417a:	e08e      	b.n	800429a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d115      	bne.n	80041ae <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004182:	f001 ffad 	bl	80060e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	4618      	mov	r0, r3
 800418a:	f003 ff13 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 800418e:	4604      	mov	r4, r0
 8004190:	2000      	movs	r0, #0
 8004192:	f003 ff0f 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8004196:	4601      	mov	r1, r0
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	2301      	movs	r3, #1
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	460a      	mov	r2, r1
 80041a2:	4621      	mov	r1, r4
 80041a4:	205c      	movs	r0, #92	; 0x5c
 80041a6:	f003 f943 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e075      	b.n	800429a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fed1 	bl	8004f60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80041c2:	f001 ff8d 	bl	80060e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80041c6:	f000 fc1f 	bl	8004a08 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80041ca:	f001 ff5b 	bl	8006084 <vPortEnterCritical>
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041d4:	b25b      	sxtb	r3, r3
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d103      	bne.n	80041e4 <xQueueReceive+0x164>
 80041dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d103      	bne.n	80041fa <xQueueReceive+0x17a>
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041fa:	f001 ff71 	bl	80060e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041fe:	1d3a      	adds	r2, r7, #4
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fec0 	bl	8004f8c <xTaskCheckForTimeOut>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d124      	bne.n	800425c <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004214:	f000 f947 	bl	80044a6 <prvIsQueueEmpty>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	3324      	adds	r3, #36	; 0x24
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fde2 	bl	8004df0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800422c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800422e:	f000 f8e8 	bl	8004402 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004232:	f000 fbf7 	bl	8004a24 <xTaskResumeAll>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	f47f af65 	bne.w	8004108 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 800423e:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <xQueueReceive+0x224>)
 8004240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	e75b      	b.n	8004108 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004252:	f000 f8d6 	bl	8004402 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004256:	f000 fbe5 	bl	8004a24 <xTaskResumeAll>
 800425a:	e755      	b.n	8004108 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800425c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800425e:	f000 f8d0 	bl	8004402 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004262:	f000 fbdf 	bl	8004a24 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004268:	f000 f91d 	bl	80044a6 <prvIsQueueEmpty>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f43f af4a 	beq.w	8004108 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fe9c 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 800427c:	4604      	mov	r4, r0
 800427e:	2000      	movs	r0, #0
 8004280:	f003 fe98 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8004284:	4601      	mov	r1, r0
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	2301      	movs	r3, #1
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	460a      	mov	r2, r1
 8004290:	4621      	mov	r1, r4
 8004292:	205c      	movs	r0, #92	; 0x5c
 8004294:	f003 f8cc 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8004298:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800429a:	4618      	mov	r0, r3
 800429c:	3734      	adds	r7, #52	; 0x34
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd90      	pop	{r4, r7, pc}
 80042a2:	bf00      	nop
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d109      	bne.n	80042ca <uxQueueMessagesWaiting+0x22>
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e7fe      	b.n	80042c8 <uxQueueMessagesWaiting+0x20>

    taskENTER_CRITICAL();
 80042ca:	f001 fedb 	bl	8006084 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80042d4:	f001 ff04 	bl	80060e0 <vPortExitCritical>

    return uxReturn;
 80042d8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b086      	sub	sp, #24
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10d      	bne.n	800431c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d14d      	bne.n	80043a4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f000 ff7d 	bl	800520c <xTaskPriorityDisinherit>
 8004312:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	e043      	b.n	80043a4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d119      	bne.n	8004356 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6858      	ldr	r0, [r3, #4]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	461a      	mov	r2, r3
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	f003 ffc2 	bl	80082b6 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	441a      	add	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d32b      	bcc.n	80043a4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	e026      	b.n	80043a4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68d8      	ldr	r0, [r3, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	461a      	mov	r2, r3
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	f003 ffa8 	bl	80082b6 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	425b      	negs	r3, r3
 8004370:	441a      	add	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d207      	bcs.n	8004392 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	425b      	negs	r3, r3
 800438c:	441a      	add	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d105      	bne.n	80043a4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80043ac:	697b      	ldr	r3, [r7, #20]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d018      	beq.n	80043fa <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d303      	bcc.n	80043ea <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68d9      	ldr	r1, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	461a      	mov	r2, r3
 80043f4:	6838      	ldr	r0, [r7, #0]
 80043f6:	f003 ff5e 	bl	80082b6 <memcpy>
    }
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800440a:	f001 fe3b 	bl	8006084 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004414:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004416:	e011      	b.n	800443c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d012      	beq.n	8004446 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3324      	adds	r3, #36	; 0x24
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd35 	bl	8004e94 <xTaskRemoveFromEventList>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004430:	f000 fe10 	bl	8005054 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	3b01      	subs	r3, #1
 8004438:	b2db      	uxtb	r3, r3
 800443a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800443c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004440:	2b00      	cmp	r3, #0
 8004442:	dce9      	bgt.n	8004418 <prvUnlockQueue+0x16>
 8004444:	e000      	b.n	8004448 <prvUnlockQueue+0x46>
                        break;
 8004446:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	22ff      	movs	r2, #255	; 0xff
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004450:	f001 fe46 	bl	80060e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004454:	f001 fe16 	bl	8006084 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004460:	e011      	b.n	8004486 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d012      	beq.n	8004490 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3310      	adds	r3, #16
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fd10 	bl	8004e94 <xTaskRemoveFromEventList>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800447a:	f000 fdeb 	bl	8005054 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800447e:	7bbb      	ldrb	r3, [r7, #14]
 8004480:	3b01      	subs	r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004486:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800448a:	2b00      	cmp	r3, #0
 800448c:	dce9      	bgt.n	8004462 <prvUnlockQueue+0x60>
 800448e:	e000      	b.n	8004492 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004490:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800449a:	f001 fe21 	bl	80060e0 <vPortExitCritical>
}
 800449e:	bf00      	nop
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80044ae:	f001 fde9 	bl	8006084 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d102      	bne.n	80044c0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80044ba:	2301      	movs	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e001      	b.n	80044c4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80044c4:	f001 fe0c 	bl	80060e0 <vPortExitCritical>

    return xReturn;
 80044c8:	68fb      	ldr	r3, [r7, #12]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80044da:	f001 fdd3 	bl	8006084 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d102      	bne.n	80044f0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80044ea:	2301      	movs	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e001      	b.n	80044f4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80044f4:	f001 fdf4 	bl	80060e0 <vPortExitCritical>

    return xReturn;
 80044f8:	68fb      	ldr	r3, [r7, #12]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004502:	b480      	push	{r7}
 8004504:	b087      	sub	sp, #28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueIsQueueFullFromISR+0x26>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	e7fe      	b.n	8004526 <xQueueIsQueueFullFromISR+0x24>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	429a      	cmp	r2, r3
 8004532:	d102      	bne.n	800453a <xQueueIsQueueFullFromISR+0x38>
    {
        xReturn = pdTRUE;
 8004534:	2301      	movs	r3, #1
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e001      	b.n	800453e <xQueueIsQueueFullFromISR+0x3c>
    }
    else
    {
        xReturn = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800453e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004540:	4618      	mov	r0, r3
 8004542:	371c      	adds	r7, #28
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e01e      	b.n	800459a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800455c:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <vQueueAddToRegistry+0x5c>)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d115      	bne.n	8004594 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004568:	490f      	ldr	r1, [pc, #60]	; (80045a8 <vQueueAddToRegistry+0x5c>)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004572:	4a0d      	ldr	r2, [pc, #52]	; (80045a8 <vQueueAddToRegistry+0x5c>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4618      	mov	r0, r3
 8004582:	f003 fd17 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8004586:	4601      	mov	r1, r0
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	2071      	movs	r0, #113	; 0x71
 800458e:	f002 fe7f 	bl	8007290 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8004592:	e005      	b.n	80045a0 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b07      	cmp	r3, #7
 800459e:	d9dd      	bls.n	800455c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80045a0:	bf00      	nop
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20014580 	.word	0x20014580

080045ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80045bc:	f001 fd62 	bl	8006084 <vPortEnterCritical>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d103      	bne.n	80045d6 <vQueueWaitForMessageRestricted+0x2a>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d103      	bne.n	80045ec <vQueueWaitForMessageRestricted+0x40>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ec:	f001 fd78 	bl	80060e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d106      	bne.n	8004606 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3324      	adds	r3, #36	; 0x24
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fc19 	bl	8004e38 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004606:	6978      	ldr	r0, [r7, #20]
 8004608:	f7ff fefb 	bl	8004402 <prvUnlockQueue>
    }
 800460c:	bf00      	nop
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004614:	b580      	push	{r7, lr}
 8004616:	b08c      	sub	sp, #48	; 0x30
 8004618:	af04      	add	r7, sp, #16
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	603b      	str	r3, [r7, #0]
 8004620:	4613      	mov	r3, r2
 8004622:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4618      	mov	r0, r3
 800462a:	f001 fe4b 	bl	80062c4 <pvPortMalloc>
 800462e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00e      	beq.n	8004654 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004636:	2058      	movs	r0, #88	; 0x58
 8004638:	f001 fe44 	bl	80062c4 <pvPortMalloc>
 800463c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
 800464a:	e005      	b.n	8004658 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800464c:	6978      	ldr	r0, [r7, #20]
 800464e:	f001 ff15 	bl	800647c <vPortFree>
 8004652:	e001      	b.n	8004658 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d013      	beq.n	8004686 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	2300      	movs	r3, #0
 8004662:	9303      	str	r3, [sp, #12]
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	68b9      	ldr	r1, [r7, #8]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 f80e 	bl	8004696 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800467a:	69f8      	ldr	r0, [r7, #28]
 800467c:	f000 f8a0 	bl	80047c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004680:	2301      	movs	r3, #1
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e002      	b.n	800468c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
 800468a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800468c:	69bb      	ldr	r3, [r7, #24]
    }
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b088      	sub	sp, #32
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
 80046a2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	461a      	mov	r2, r3
 80046ae:	21a5      	movs	r1, #165	; 0xa5
 80046b0:	f003 fe0c 	bl	80082cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046be:	3b01      	subs	r3, #1
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	f023 0307 	bic.w	r3, r3, #7
 80046cc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <prvInitialiseNewTask+0x56>
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	e7fe      	b.n	80046ea <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e012      	b.n	800471e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	7819      	ldrb	r1, [r3, #0]
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	3334      	adds	r3, #52	; 0x34
 8004708:	460a      	mov	r2, r1
 800470a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b09      	cmp	r3, #9
 8004722:	d9e9      	bls.n	80046f8 <prvInitialiseNewTask+0x62>
 8004724:	e000      	b.n	8004728 <prvInitialiseNewTask+0x92>
            {
                break;
 8004726:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004730:	e003      	b.n	800473a <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b04      	cmp	r3, #4
 800473e:	d901      	bls.n	8004744 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004740:	2304      	movs	r3, #4
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474e:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f932 	bl	80039c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	3318      	adds	r3, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f92d 	bl	80039c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	f1c3 0205 	rsb	r2, r3, #5
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	3350      	adds	r3, #80	; 0x50
 8004784:	2204      	movs	r2, #4
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f003 fd9f 	bl	80082cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	3354      	adds	r3, #84	; 0x54
 8004792:	2201      	movs	r2, #1
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f003 fd98 	bl	80082cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	69b8      	ldr	r0, [r7, #24]
 80047a2:	f001 facf 	bl	8005d44 <pxPortInitialiseStack>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80047ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80047b8:	bf00      	nop
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80047c0:	b5b0      	push	{r4, r5, r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80047c8:	f001 fc5c 	bl	8006084 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <prvAddNewTaskToReadyList+0xfc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3301      	adds	r3, #1
 80047d2:	4a3a      	ldr	r2, [pc, #232]	; (80048bc <prvAddNewTaskToReadyList+0xfc>)
 80047d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80047d6:	4b3a      	ldr	r3, [pc, #232]	; (80048c0 <prvAddNewTaskToReadyList+0x100>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d109      	bne.n	80047f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80047de:	4a38      	ldr	r2, [pc, #224]	; (80048c0 <prvAddNewTaskToReadyList+0x100>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <prvAddNewTaskToReadyList+0xfc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d110      	bne.n	800480e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80047ec:	f000 fc58 	bl	80050a0 <prvInitialiseTaskLists>
 80047f0:	e00d      	b.n	800480e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80047f2:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <prvAddNewTaskToReadyList+0x104>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d109      	bne.n	800480e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047fa:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <prvAddNewTaskToReadyList+0x100>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d802      	bhi.n	800480e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004808:	4a2d      	ldr	r2, [pc, #180]	; (80048c0 <prvAddNewTaskToReadyList+0x100>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <prvAddNewTaskToReadyList+0x108>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a2c      	ldr	r2, [pc, #176]	; (80048c8 <prvAddNewTaskToReadyList+0x108>)
 8004816:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <prvAddNewTaskToReadyList+0x108>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d016      	beq.n	8004854 <prvAddNewTaskToReadyList+0x94>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4618      	mov	r0, r3
 800482a:	f003 fa9d 	bl	8007d68 <SEGGER_SYSVIEW_OnTaskCreate>
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	461d      	mov	r5, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461c      	mov	r4, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	1ae3      	subs	r3, r4, r3
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	462b      	mov	r3, r5
 8004850:	f001 fff6 	bl	8006840 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	f003 fb0a 	bl	8007e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	2201      	movs	r2, #1
 8004862:	409a      	lsls	r2, r3
 8004864:	4b19      	ldr	r3, [pc, #100]	; (80048cc <prvAddNewTaskToReadyList+0x10c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4313      	orrs	r3, r2
 800486a:	4a18      	ldr	r2, [pc, #96]	; (80048cc <prvAddNewTaskToReadyList+0x10c>)
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <prvAddNewTaskToReadyList+0x110>)
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3304      	adds	r3, #4
 8004882:	4619      	mov	r1, r3
 8004884:	4610      	mov	r0, r2
 8004886:	f7ff f8aa 	bl	80039de <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800488a:	f001 fc29 	bl	80060e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <prvAddNewTaskToReadyList+0x104>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <prvAddNewTaskToReadyList+0x100>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d207      	bcs.n	80048b4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <prvAddNewTaskToReadyList+0x114>)
 80048a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048b4:	bf00      	nop
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bdb0      	pop	{r4, r5, r7, pc}
 80048bc:	200001d4 	.word	0x200001d4
 80048c0:	200000fc 	.word	0x200000fc
 80048c4:	200001e0 	.word	0x200001e0
 80048c8:	200001f0 	.word	0x200001f0
 80048cc:	200001dc 	.word	0x200001dc
 80048d0:	20000100 	.word	0x20000100
 80048d4:	e000ed04 	.word	0xe000ed04

080048d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01a      	beq.n	8004920 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80048ea:	4b15      	ldr	r3, [pc, #84]	; (8004940 <vTaskDelay+0x68>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <vTaskDelay+0x2e>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	e7fe      	b.n	8004904 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8004906:	f000 f87f 	bl	8004a08 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	2023      	movs	r0, #35	; 0x23
 800490e:	f002 fc83 	bl	8007218 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004912:	2100      	movs	r1, #0
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fe8f 	bl	8005638 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800491a:	f000 f883 	bl	8004a24 <xTaskResumeAll>
 800491e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d107      	bne.n	8004936 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <vTaskDelay+0x6c>)
 8004928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	200001fc 	.word	0x200001fc
 8004944:	e000ed04 	.word	0xe000ed04

08004948 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800494e:	4b26      	ldr	r3, [pc, #152]	; (80049e8 <vTaskStartScheduler+0xa0>)
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2300      	movs	r3, #0
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	2282      	movs	r2, #130	; 0x82
 800495a:	4924      	ldr	r1, [pc, #144]	; (80049ec <vTaskStartScheduler+0xa4>)
 800495c:	4824      	ldr	r0, [pc, #144]	; (80049f0 <vTaskStartScheduler+0xa8>)
 800495e:	f7ff fe59 	bl	8004614 <xTaskCreate>
 8004962:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d102      	bne.n	8004970 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800496a:	f000 fedd 	bl	8005728 <xTimerCreateTimerTask>
 800496e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d123      	bne.n	80049be <vTaskStartScheduler+0x76>
 8004976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497a:	f383 8811 	msr	BASEPRI, r3
 800497e:	f3bf 8f6f 	isb	sy
 8004982:	f3bf 8f4f 	dsb	sy
 8004986:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004988:	4b1a      	ldr	r3, [pc, #104]	; (80049f4 <vTaskStartScheduler+0xac>)
 800498a:	f04f 32ff 	mov.w	r2, #4294967295
 800498e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <vTaskStartScheduler+0xb0>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <vTaskStartScheduler+0xb4>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800499c:	4b18      	ldr	r3, [pc, #96]	; (8004a00 <vTaskStartScheduler+0xb8>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <vTaskStartScheduler+0xa0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d102      	bne.n	80049ae <vTaskStartScheduler+0x66>
 80049a8:	f003 f9c2 	bl	8007d30 <SEGGER_SYSVIEW_OnIdle>
 80049ac:	e004      	b.n	80049b8 <vTaskStartScheduler+0x70>
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <vTaskStartScheduler+0xb8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f003 fa1a 	bl	8007dec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80049b8:	f001 fa4c 	bl	8005e54 <xPortStartScheduler>
 80049bc:	e00d      	b.n	80049da <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c4:	d109      	bne.n	80049da <vTaskStartScheduler+0x92>
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	e7fe      	b.n	80049d8 <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80049da:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <vTaskStartScheduler+0xbc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200001f8 	.word	0x200001f8
 80049ec:	08008c28 	.word	0x08008c28
 80049f0:	0800506d 	.word	0x0800506d
 80049f4:	200001f4 	.word	0x200001f4
 80049f8:	200001e0 	.word	0x200001e0
 80049fc:	200001d8 	.word	0x200001d8
 8004a00:	200000fc 	.word	0x200000fc
 8004a04:	20000060 	.word	0x20000060

08004a08 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <vTaskSuspendAll+0x18>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <vTaskSuspendAll+0x18>)
 8004a14:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	200001fc 	.word	0x200001fc

08004a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004a32:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <xTaskResumeAll+0x11c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <xTaskResumeAll+0x2a>
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	e7fe      	b.n	8004a4c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004a4e:	f001 fb19 	bl	8006084 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004a52:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <xTaskResumeAll+0x11c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	4a39      	ldr	r2, [pc, #228]	; (8004b40 <xTaskResumeAll+0x11c>)
 8004a5a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5c:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <xTaskResumeAll+0x11c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d165      	bne.n	8004b30 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a64:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <xTaskResumeAll+0x120>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d061      	beq.n	8004b30 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a6c:	e032      	b.n	8004ad4 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6e:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <xTaskResumeAll+0x124>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3318      	adds	r3, #24
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff f80c 	bl	8003a98 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff f807 	bl	8003a98 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 f9ef 	bl	8007e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	2201      	movs	r2, #1
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <xTaskResumeAll+0x128>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <xTaskResumeAll+0x128>)
 8004aa2:	6013      	str	r3, [r2, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4a27      	ldr	r2, [pc, #156]	; (8004b50 <xTaskResumeAll+0x12c>)
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fe ff8f 	bl	80039de <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <xTaskResumeAll+0x130>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <xTaskResumeAll+0x134>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <xTaskResumeAll+0x124>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1c8      	bne.n	8004a6e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004ae2:	f000 fb59 	bl	8005198 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ae6:	4b1d      	ldr	r3, [pc, #116]	; (8004b5c <xTaskResumeAll+0x138>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d010      	beq.n	8004b14 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004af2:	f000 f859 	bl	8004ba8 <xTaskIncrementTick>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8004afc:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <xTaskResumeAll+0x134>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f1      	bne.n	8004af2 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <xTaskResumeAll+0x138>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <xTaskResumeAll+0x134>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004b20:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <xTaskResumeAll+0x13c>)
 8004b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004b30:	f001 fad6 	bl	80060e0 <vPortExitCritical>

    return xAlreadyYielded;
 8004b34:	68bb      	ldr	r3, [r7, #8]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200001fc 	.word	0x200001fc
 8004b44:	200001d4 	.word	0x200001d4
 8004b48:	20000194 	.word	0x20000194
 8004b4c:	200001dc 	.word	0x200001dc
 8004b50:	20000100 	.word	0x20000100
 8004b54:	200000fc 	.word	0x200000fc
 8004b58:	200001e8 	.word	0x200001e8
 8004b5c:	200001e4 	.word	0x200001e4
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <xTaskGetTickCount+0x1c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004b70:	687b      	ldr	r3, [r7, #4]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	200001d8 	.word	0x200001d8

08004b84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b8a:	f001 fb5d 	bl	8006248 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <xTaskGetTickCountFromISR+0x20>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004b98:	683b      	ldr	r3, [r7, #0]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200001d8 	.word	0x200001d8

08004ba8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b086      	sub	sp, #24
 8004bac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bb2:	4b50      	ldr	r3, [pc, #320]	; (8004cf4 <xTaskIncrementTick+0x14c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 8091 	bne.w	8004cde <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <xTaskIncrementTick+0x150>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004bc4:	4a4c      	ldr	r2, [pc, #304]	; (8004cf8 <xTaskIncrementTick+0x150>)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11f      	bne.n	8004c10 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8004bd0:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <xTaskIncrementTick+0x154>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <xTaskIncrementTick+0x46>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	e7fe      	b.n	8004bec <xTaskIncrementTick+0x44>
 8004bee:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <xTaskIncrementTick+0x154>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	4b42      	ldr	r3, [pc, #264]	; (8004d00 <xTaskIncrementTick+0x158>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a40      	ldr	r2, [pc, #256]	; (8004cfc <xTaskIncrementTick+0x154>)
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <xTaskIncrementTick+0x158>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <xTaskIncrementTick+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3301      	adds	r3, #1
 8004c08:	4a3e      	ldr	r2, [pc, #248]	; (8004d04 <xTaskIncrementTick+0x15c>)
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	f000 fac4 	bl	8005198 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004c10:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <xTaskIncrementTick+0x160>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d34c      	bcc.n	8004cb4 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c1a:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <xTaskIncrementTick+0x154>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c24:	4b38      	ldr	r3, [pc, #224]	; (8004d08 <xTaskIncrementTick+0x160>)
 8004c26:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2a:	601a      	str	r2, [r3, #0]
                    break;
 8004c2c:	e042      	b.n	8004cb4 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c2e:	4b33      	ldr	r3, [pc, #204]	; (8004cfc <xTaskIncrementTick+0x154>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d203      	bcs.n	8004c4e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c46:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <xTaskIncrementTick+0x160>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c4c:	e032      	b.n	8004cb4 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3304      	adds	r3, #4
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe ff20 	bl	8003a98 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d004      	beq.n	8004c6a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	3318      	adds	r3, #24
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fe ff17 	bl	8003a98 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f003 f8ff 	bl	8007e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	2201      	movs	r2, #1
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <xTaskIncrementTick+0x164>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	4a22      	ldr	r2, [pc, #136]	; (8004d0c <xTaskIncrementTick+0x164>)
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <xTaskIncrementTick+0x168>)
 8004c92:	441a      	add	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4610      	mov	r0, r2
 8004c9c:	f7fe fe9f 	bl	80039de <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <xTaskIncrementTick+0x16c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d3b5      	bcc.n	8004c1a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cb2:	e7b2      	b.n	8004c1a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cb4:	4b17      	ldr	r3, [pc, #92]	; (8004d14 <xTaskIncrementTick+0x16c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4915      	ldr	r1, [pc, #84]	; (8004d10 <xTaskIncrementTick+0x168>)
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	440b      	add	r3, r1
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d901      	bls.n	8004cd0 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004cd0:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <xTaskIncrementTick+0x170>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e004      	b.n	8004ce8 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskIncrementTick+0x174>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <xTaskIncrementTick+0x174>)
 8004ce6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004ce8:	697b      	ldr	r3, [r7, #20]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	200001fc 	.word	0x200001fc
 8004cf8:	200001d8 	.word	0x200001d8
 8004cfc:	2000018c 	.word	0x2000018c
 8004d00:	20000190 	.word	0x20000190
 8004d04:	200001ec 	.word	0x200001ec
 8004d08:	200001f4 	.word	0x200001f4
 8004d0c:	200001dc 	.word	0x200001dc
 8004d10:	20000100 	.word	0x20000100
 8004d14:	200000fc 	.word	0x200000fc
 8004d18:	200001e8 	.word	0x200001e8
 8004d1c:	200001e4 	.word	0x200001e4

08004d20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d26:	4b2c      	ldr	r3, [pc, #176]	; (8004dd8 <vTaskSwitchContext+0xb8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004d2e:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <vTaskSwitchContext+0xbc>)
 8004d30:	2201      	movs	r2, #1
 8004d32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004d34:	e04c      	b.n	8004dd0 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <vTaskSwitchContext+0xbc>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <vTaskSwitchContext+0xc0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	fab3 f383 	clz	r3, r3
 8004d48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	f1c3 031f 	rsb	r3, r3, #31
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	4924      	ldr	r1, [pc, #144]	; (8004de4 <vTaskSwitchContext+0xc4>)
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <vTaskSwitchContext+0x5a>
        __asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	e7fe      	b.n	8004d78 <vTaskSwitchContext+0x58>
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a17      	ldr	r2, [pc, #92]	; (8004de4 <vTaskSwitchContext+0xc4>)
 8004d86:	4413      	add	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	3308      	adds	r3, #8
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d104      	bne.n	8004daa <vTaskSwitchContext+0x8a>
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	4a0d      	ldr	r2, [pc, #52]	; (8004de8 <vTaskSwitchContext+0xc8>)
 8004db2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004db4:	4b0c      	ldr	r3, [pc, #48]	; (8004de8 <vTaskSwitchContext+0xc8>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <vTaskSwitchContext+0xcc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d102      	bne.n	8004dc6 <vTaskSwitchContext+0xa6>
 8004dc0:	f002 ffb6 	bl	8007d30 <SEGGER_SYSVIEW_OnIdle>
}
 8004dc4:	e004      	b.n	8004dd0 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <vTaskSwitchContext+0xc8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 f80e 	bl	8007dec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004dd0:	bf00      	nop
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	200001fc 	.word	0x200001fc
 8004ddc:	200001e8 	.word	0x200001e8
 8004de0:	200001dc 	.word	0x200001dc
 8004de4:	20000100 	.word	0x20000100
 8004de8:	200000fc 	.word	0x200000fc
 8004dec:	200001f8 	.word	0x200001f8

08004df0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <vTaskPlaceOnEventList+0x24>
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	e7fe      	b.n	8004e12 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e14:	4b07      	ldr	r3, [pc, #28]	; (8004e34 <vTaskPlaceOnEventList+0x44>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fe fe02 	bl	8003a26 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e22:	2101      	movs	r1, #1
 8004e24:	6838      	ldr	r0, [r7, #0]
 8004e26:	f000 fc07 	bl	8005638 <prvAddCurrentTaskToDelayedList>
}
 8004e2a:	bf00      	nop
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	200000fc 	.word	0x200000fc

08004e38 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <vTaskPlaceOnEventListRestricted+0x26>
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	e7fe      	b.n	8004e5c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <vTaskPlaceOnEventListRestricted+0x58>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3318      	adds	r3, #24
 8004e64:	4619      	mov	r1, r3
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7fe fdb9 	bl	80039de <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004e78:	2024      	movs	r0, #36	; 0x24
 8004e7a:	f002 f9af 	bl	80071dc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	68b8      	ldr	r0, [r7, #8]
 8004e82:	f000 fbd9 	bl	8005638 <prvAddCurrentTaskToDelayedList>
    }
 8004e86:	bf00      	nop
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200000fc 	.word	0x200000fc

08004e94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <xTaskRemoveFromEventList+0x2a>
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e7fe      	b.n	8004ebc <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	3318      	adds	r3, #24
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fde8 	bl	8003a98 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec8:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <xTaskRemoveFromEventList+0xb4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d120      	bne.n	8004f12 <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fddf 	bl	8003a98 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f002 ffc7 	bl	8007e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <xTaskRemoveFromEventList+0xb8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <xTaskRemoveFromEventList+0xb8>)
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <xTaskRemoveFromEventList+0xbc>)
 8004f02:	441a      	add	r2, r3
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fe fd67 	bl	80039de <vListInsertEnd>
 8004f10:	e005      	b.n	8004f1e <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3318      	adds	r3, #24
 8004f16:	4619      	mov	r1, r3
 8004f18:	480e      	ldr	r0, [pc, #56]	; (8004f54 <xTaskRemoveFromEventList+0xc0>)
 8004f1a:	f7fe fd60 	bl	80039de <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <xTaskRemoveFromEventList+0xc4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d905      	bls.n	8004f38 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <xTaskRemoveFromEventList+0xc8>)
 8004f32:	2201      	movs	r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	e001      	b.n	8004f3c <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004f3c:	697b      	ldr	r3, [r7, #20]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200001fc 	.word	0x200001fc
 8004f4c:	200001dc 	.word	0x200001dc
 8004f50:	20000100 	.word	0x20000100
 8004f54:	20000194 	.word	0x20000194
 8004f58:	200000fc 	.word	0x200000fc
 8004f5c:	200001e8 	.word	0x200001e8

08004f60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <vTaskInternalSetTimeOutState+0x24>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <vTaskInternalSetTimeOutState+0x28>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	605a      	str	r2, [r3, #4]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	200001ec 	.word	0x200001ec
 8004f88:	200001d8 	.word	0x200001d8

08004f8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <xTaskCheckForTimeOut+0x24>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e7fe      	b.n	8004fae <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d109      	bne.n	8004fca <xTaskCheckForTimeOut+0x3e>
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e7fe      	b.n	8004fc8 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8004fca:	f001 f85b 	bl	8006084 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <xTaskCheckForTimeOut+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d102      	bne.n	8004fee <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e026      	b.n	800503c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	4b17      	ldr	r3, [pc, #92]	; (8005050 <xTaskCheckForTimeOut+0xc4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d00a      	beq.n	8005010 <xTaskCheckForTimeOut+0x84>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d305      	bcc.n	8005010 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e015      	b.n	800503c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	429a      	cmp	r2, r3
 8005018:	d20b      	bcs.n	8005032 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1ad2      	subs	r2, r2, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ff9a 	bl	8004f60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	e004      	b.n	800503c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800503c:	f001 f850 	bl	80060e0 <vPortExitCritical>

    return xReturn;
 8005040:	69fb      	ldr	r3, [r7, #28]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	200001d8 	.word	0x200001d8
 8005050:	200001ec 	.word	0x200001ec

08005054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <vTaskMissedYield+0x14>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200001e8 	.word	0x200001e8

0800506c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005074:	f000 f854 	bl	8005120 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <prvIdleTask+0x2c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d907      	bls.n	8005090 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <prvIdleTask+0x30>)
 8005082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8005090:	f7fe fb78 	bl	8003784 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8005094:	e7ee      	b.n	8005074 <prvIdleTask+0x8>
 8005096:	bf00      	nop
 8005098:	20000100 	.word	0x20000100
 800509c:	e000ed04 	.word	0xe000ed04

080050a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
 80050aa:	e00c      	b.n	80050c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4a12      	ldr	r2, [pc, #72]	; (8005100 <prvInitialiseTaskLists+0x60>)
 80050b8:	4413      	add	r3, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fe fc62 	bl	8003984 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3301      	adds	r3, #1
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d9ef      	bls.n	80050ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80050cc:	480d      	ldr	r0, [pc, #52]	; (8005104 <prvInitialiseTaskLists+0x64>)
 80050ce:	f7fe fc59 	bl	8003984 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80050d2:	480d      	ldr	r0, [pc, #52]	; (8005108 <prvInitialiseTaskLists+0x68>)
 80050d4:	f7fe fc56 	bl	8003984 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80050d8:	480c      	ldr	r0, [pc, #48]	; (800510c <prvInitialiseTaskLists+0x6c>)
 80050da:	f7fe fc53 	bl	8003984 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80050de:	480c      	ldr	r0, [pc, #48]	; (8005110 <prvInitialiseTaskLists+0x70>)
 80050e0:	f7fe fc50 	bl	8003984 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80050e4:	480b      	ldr	r0, [pc, #44]	; (8005114 <prvInitialiseTaskLists+0x74>)
 80050e6:	f7fe fc4d 	bl	8003984 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <prvInitialiseTaskLists+0x78>)
 80050ec:	4a05      	ldr	r2, [pc, #20]	; (8005104 <prvInitialiseTaskLists+0x64>)
 80050ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvInitialiseTaskLists+0x7c>)
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <prvInitialiseTaskLists+0x68>)
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000100 	.word	0x20000100
 8005104:	20000164 	.word	0x20000164
 8005108:	20000178 	.word	0x20000178
 800510c:	20000194 	.word	0x20000194
 8005110:	200001a8 	.word	0x200001a8
 8005114:	200001c0 	.word	0x200001c0
 8005118:	2000018c 	.word	0x2000018c
 800511c:	20000190 	.word	0x20000190

08005120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005126:	e019      	b.n	800515c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005128:	f000 ffac 	bl	8006084 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512c:	4b0f      	ldr	r3, [pc, #60]	; (800516c <prvCheckTasksWaitingTermination+0x4c>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3304      	adds	r3, #4
 8005138:	4618      	mov	r0, r3
 800513a:	f7fe fcad 	bl	8003a98 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <prvCheckTasksWaitingTermination+0x50>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3b01      	subs	r3, #1
 8005144:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <prvCheckTasksWaitingTermination+0x50>)
 8005146:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005148:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <prvCheckTasksWaitingTermination+0x54>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3b01      	subs	r3, #1
 800514e:	4a09      	ldr	r2, [pc, #36]	; (8005174 <prvCheckTasksWaitingTermination+0x54>)
 8005150:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005152:	f000 ffc5 	bl	80060e0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f80e 	bl	8005178 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <prvCheckTasksWaitingTermination+0x54>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e1      	bne.n	8005128 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	200001a8 	.word	0x200001a8
 8005170:	200001d4 	.word	0x200001d4
 8005174:	200001bc 	.word	0x200001bc

08005178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	4618      	mov	r0, r3
 8005186:	f001 f979 	bl	800647c <vPortFree>
                vPortFree( pxTCB );
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 f976 	bl	800647c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <prvResetNextTaskUnblockTime+0x30>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d104      	bne.n	80051b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <prvResetNextTaskUnblockTime+0x34>)
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80051ae:	e005      	b.n	80051bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051b0:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <prvResetNextTaskUnblockTime+0x30>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a04      	ldr	r2, [pc, #16]	; (80051cc <prvResetNextTaskUnblockTime+0x34>)
 80051ba:	6013      	str	r3, [r2, #0]
}
 80051bc:	bf00      	nop
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	2000018c 	.word	0x2000018c
 80051cc:	200001f4 	.word	0x200001f4

080051d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80051d6:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <xTaskGetSchedulerState+0x34>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d102      	bne.n	80051e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80051de:	2301      	movs	r3, #1
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	e008      	b.n	80051f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051e4:	4b08      	ldr	r3, [pc, #32]	; (8005208 <xTaskGetSchedulerState+0x38>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80051ec:	2302      	movs	r3, #2
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	e001      	b.n	80051f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80051f2:	2300      	movs	r3, #0
 80051f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80051f6:	687b      	ldr	r3, [r7, #4]
    }
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	200001e0 	.word	0x200001e0
 8005208:	200001fc 	.word	0x200001fc

0800520c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d066      	beq.n	80052f0 <xTaskPriorityDisinherit+0xe4>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <xTaskPriorityDisinherit+0xf0>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d009      	beq.n	8005240 <xTaskPriorityDisinherit+0x34>
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	e7fe      	b.n	800523e <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <xTaskPriorityDisinherit+0x50>
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	e7fe      	b.n	800525a <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526e:	429a      	cmp	r2, r3
 8005270:	d03e      	beq.n	80052f0 <xTaskPriorityDisinherit+0xe4>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d13a      	bne.n	80052f0 <xTaskPriorityDisinherit+0xe4>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fc0a 	bl	8003a98 <uxListRemove>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	2201      	movs	r2, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	43da      	mvns	r2, r3
 8005296:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <xTaskPriorityDisinherit+0xf4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4013      	ands	r3, r2
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <xTaskPriorityDisinherit+0xf4>)
 800529e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4619      	mov	r1, r3
 80052a4:	204a      	movs	r0, #74	; 0x4a
 80052a6:	f001 ffb7 	bl	8007218 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	f1c3 0205 	rsb	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	2201      	movs	r2, #1
 80052c4:	409a      	lsls	r2, r3
 80052c6:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <xTaskPriorityDisinherit+0xf4>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <xTaskPriorityDisinherit+0xf4>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4a09      	ldr	r2, [pc, #36]	; (8005304 <xTaskPriorityDisinherit+0xf8>)
 80052de:	441a      	add	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3304      	adds	r3, #4
 80052e4:	4619      	mov	r1, r3
 80052e6:	4610      	mov	r0, r2
 80052e8:	f7fe fb79 	bl	80039de <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80052f0:	697b      	ldr	r3, [r7, #20]
    }
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	200000fc 	.word	0x200000fc
 8005300:	200001dc 	.word	0x200001dc
 8005304:	20000100 	.word	0x20000100

08005308 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <xTaskGenericNotifyWait+0x28>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	e7fe      	b.n	800532e <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8005330:	f000 fea8 	bl	8006084 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005334:	4b36      	ldr	r3, [pc, #216]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	3354      	adds	r3, #84	; 0x54
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d022      	beq.n	800538c <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005346:	4b32      	ldr	r3, [pc, #200]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	3214      	adds	r2, #20
 800534e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	43d2      	mvns	r2, r2
 8005356:	4011      	ands	r1, r2
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	3214      	adds	r2, #20
 800535c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005360:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	3354      	adds	r3, #84	; 0x54
 800536a:	2201      	movs	r2, #1
 800536c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005374:	2101      	movs	r1, #1
 8005376:	6a38      	ldr	r0, [r7, #32]
 8005378:	f000 f95e 	bl	8005638 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800537c:	4b25      	ldr	r3, [pc, #148]	; (8005414 <xTaskGenericNotifyWait+0x10c>)
 800537e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800538c:	f000 fea8 	bl	80060e0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005390:	f000 fe78 	bl	8006084 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	2040      	movs	r0, #64	; 0x40
 80053a2:	f002 f845 	bl	8007430 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80053ac:	4b18      	ldr	r3, [pc, #96]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	3214      	adds	r2, #20
 80053b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80053bc:	4b14      	ldr	r3, [pc, #80]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	3354      	adds	r3, #84	; 0x54
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d002      	beq.n	80053d4 <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	e00e      	b.n	80053f2 <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80053d4:	4b0e      	ldr	r3, [pc, #56]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	3214      	adds	r2, #20
 80053dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	43d2      	mvns	r2, r2
 80053e4:	4011      	ands	r1, r2
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	3214      	adds	r2, #20
 80053ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <xTaskGenericNotifyWait+0x108>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	3354      	adds	r3, #84	; 0x54
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005400:	f000 fe6e 	bl	80060e0 <vPortExitCritical>

        return xReturn;
 8005404:	697b      	ldr	r3, [r7, #20]
    }
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200000fc 	.word	0x200000fc
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005418:	b580      	push	{r7, lr}
 800541a:	b092      	sub	sp, #72	; 0x48
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005426:	2301      	movs	r3, #1
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d109      	bne.n	8005444 <xTaskGenericNotifyFromISR+0x2c>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005442:	e7fe      	b.n	8005442 <xTaskGenericNotifyFromISR+0x2a>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <xTaskGenericNotifyFromISR+0x46>
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
 800545c:	e7fe      	b.n	800545c <xTaskGenericNotifyFromISR+0x44>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800545e:	f000 fef3 	bl	8006248 <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005466:	f3ef 8211 	mrs	r2, BASEPRI
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	627a      	str	r2, [r7, #36]	; 0x24
 800547c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005480:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005484:	2b00      	cmp	r3, #0
 8005486:	d006      	beq.n	8005496 <xTaskGenericNotifyFromISR+0x7e>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	3214      	adds	r2, #20
 800548e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005494:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4413      	add	r3, r2
 800549c:	3354      	adds	r3, #84	; 0x54
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80054a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	3354      	adds	r3, #84	; 0x54
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d83b      	bhi.n	800552e <xTaskGenericNotifyFromISR+0x116>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <xTaskGenericNotifyFromISR+0xa4>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	0800554b 	.word	0x0800554b
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005513 	.word	0x08005513
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	3214      	adds	r2, #20
 80054d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	ea42 0103 	orr.w	r1, r2, r3
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	3214      	adds	r2, #20
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054ea:	e031      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80054ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	3214      	adds	r2, #20
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	3214      	adds	r2, #20
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005502:	e025      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	3214      	adds	r2, #20
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005510:	e01e      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005516:	2b02      	cmp	r3, #2
 8005518:	d006      	beq.n	8005528 <xTaskGenericNotifyFromISR+0x110>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	3214      	adds	r2, #20
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005526:	e013      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>
                        xReturn = pdFAIL;
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800552c:	e010      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800552e:	4b3b      	ldr	r3, [pc, #236]	; (800561c <xTaskGenericNotifyFromISR+0x204>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <xTaskGenericNotifyFromISR+0x136>
        __asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e7fe      	b.n	8005548 <xTaskGenericNotifyFromISR+0x130>
                    break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <xTaskGenericNotifyFromISR+0x138>
                    break;
 800554e:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8005550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005552:	4618      	mov	r0, r3
 8005554:	f002 fd2e 	bl	8007fb4 <SEGGER_SYSVIEW_ShrinkId>
 8005558:	78f9      	ldrb	r1, [r7, #3]
 800555a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800555c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800555e:	9201      	str	r2, [sp, #4]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	460b      	mov	r3, r1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4601      	mov	r1, r0
 8005568:	203f      	movs	r0, #63	; 0x3f
 800556a:	f001 fff3 	bl	8007554 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800556e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005572:	2b01      	cmp	r3, #1
 8005574:	d148      	bne.n	8005608 <xTaskGenericNotifyFromISR+0x1f0>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d009      	beq.n	8005592 <xTaskGenericNotifyFromISR+0x17a>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e7fe      	b.n	8005590 <xTaskGenericNotifyFromISR+0x178>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <xTaskGenericNotifyFromISR+0x208>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d120      	bne.n	80055dc <xTaskGenericNotifyFromISR+0x1c4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fa7a 	bl	8003a98 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f002 fc62 	bl	8007e70 <SEGGER_SYSVIEW_OnTaskStartReady>
 80055ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	2201      	movs	r2, #1
 80055b2:	409a      	lsls	r2, r3
 80055b4:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <xTaskGenericNotifyFromISR+0x20c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	4a1a      	ldr	r2, [pc, #104]	; (8005624 <xTaskGenericNotifyFromISR+0x20c>)
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <xTaskGenericNotifyFromISR+0x210>)
 80055cc:	441a      	add	r2, r3
 80055ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f7fe fa02 	bl	80039de <vListInsertEnd>
 80055da:	e005      	b.n	80055e8 <xTaskGenericNotifyFromISR+0x1d0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	3318      	adds	r3, #24
 80055e0:	4619      	mov	r1, r3
 80055e2:	4812      	ldr	r0, [pc, #72]	; (800562c <xTaskGenericNotifyFromISR+0x214>)
 80055e4:	f7fe f9fb 	bl	80039de <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ec:	4b10      	ldr	r3, [pc, #64]	; (8005630 <xTaskGenericNotifyFromISR+0x218>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d908      	bls.n	8005608 <xTaskGenericNotifyFromISR+0x1f0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <xTaskGenericNotifyFromISR+0x1ea>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <xTaskGenericNotifyFromISR+0x21c>)
 8005604:	2201      	movs	r2, #1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800560a:	617b      	str	r3, [r7, #20]
        __asm volatile
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f383 8811 	msr	BASEPRI, r3
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 8005614:	4618      	mov	r0, r3
 8005616:	3740      	adds	r7, #64	; 0x40
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	200001d8 	.word	0x200001d8
 8005620:	200001fc 	.word	0x200001fc
 8005624:	200001dc 	.word	0x200001dc
 8005628:	20000100 	.word	0x20000100
 800562c:	20000194 	.word	0x20000194
 8005630:	200000fc 	.word	0x200000fc
 8005634:	200001e8 	.word	0x200001e8

08005638 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005642:	4b32      	ldr	r3, [pc, #200]	; (800570c <prvAddCurrentTaskToDelayedList+0xd4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005648:	4b31      	ldr	r3, [pc, #196]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fa22 	bl	8003a98 <uxListRemove>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800565a:	4b2d      	ldr	r3, [pc, #180]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	2201      	movs	r2, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43da      	mvns	r2, r3
 8005668:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <prvAddCurrentTaskToDelayedList+0xdc>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4013      	ands	r3, r2
 800566e:	4a29      	ldr	r2, [pc, #164]	; (8005714 <prvAddCurrentTaskToDelayedList+0xdc>)
 8005670:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d110      	bne.n	800569c <prvAddCurrentTaskToDelayedList+0x64>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00d      	beq.n	800569c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005680:	4b23      	ldr	r3, [pc, #140]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	211b      	movs	r1, #27
 8005686:	4618      	mov	r0, r3
 8005688:	f002 fc34 	bl	8007ef4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568c:	4b20      	ldr	r3, [pc, #128]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4820      	ldr	r0, [pc, #128]	; (8005718 <prvAddCurrentTaskToDelayedList+0xe0>)
 8005696:	f7fe f9a2 	bl	80039de <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800569a:	e032      	b.n	8005702 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d20f      	bcs.n	80056d4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80056b4:	4b16      	ldr	r3, [pc, #88]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2104      	movs	r1, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f002 fc1a 	bl	8007ef4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056c0:	4b16      	ldr	r3, [pc, #88]	; (800571c <prvAddCurrentTaskToDelayedList+0xe4>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3304      	adds	r3, #4
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f7fe f9aa 	bl	8003a26 <vListInsert>
}
 80056d2:	e016      	b.n	8005702 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80056d4:	4b0e      	ldr	r3, [pc, #56]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2104      	movs	r1, #4
 80056da:	4618      	mov	r0, r3
 80056dc:	f002 fc0a 	bl	8007ef4 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056e0:	4b0f      	ldr	r3, [pc, #60]	; (8005720 <prvAddCurrentTaskToDelayedList+0xe8>)
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <prvAddCurrentTaskToDelayedList+0xd8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f7fe f99a 	bl	8003a26 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <prvAddCurrentTaskToDelayedList+0xec>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d202      	bcs.n	8005702 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80056fc:	4a09      	ldr	r2, [pc, #36]	; (8005724 <prvAddCurrentTaskToDelayedList+0xec>)
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	6013      	str	r3, [r2, #0]
}
 8005702:	bf00      	nop
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	200001d8 	.word	0x200001d8
 8005710:	200000fc 	.word	0x200000fc
 8005714:	200001dc 	.word	0x200001dc
 8005718:	200001c0 	.word	0x200001c0
 800571c:	20000190 	.word	0x20000190
 8005720:	2000018c 	.word	0x2000018c
 8005724:	200001f4 	.word	0x200001f4

08005728 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005732:	f000 fad1 	bl	8005cd8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005736:	4b11      	ldr	r3, [pc, #68]	; (800577c <xTimerCreateTimerTask+0x54>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800573e:	4b10      	ldr	r3, [pc, #64]	; (8005780 <xTimerCreateTimerTask+0x58>)
 8005740:	9301      	str	r3, [sp, #4]
 8005742:	2302      	movs	r3, #2
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	2300      	movs	r3, #0
 8005748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800574c:	490d      	ldr	r1, [pc, #52]	; (8005784 <xTimerCreateTimerTask+0x5c>)
 800574e:	480e      	ldr	r0, [pc, #56]	; (8005788 <xTimerCreateTimerTask+0x60>)
 8005750:	f7fe ff60 	bl	8004614 <xTaskCreate>
 8005754:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d109      	bne.n	8005770 <xTimerCreateTimerTask+0x48>
        __asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	603b      	str	r3, [r7, #0]
 800576e:	e7fe      	b.n	800576e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8005770:	687b      	ldr	r3, [r7, #4]
    }
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000230 	.word	0x20000230
 8005780:	20000234 	.word	0x20000234
 8005784:	08008c30 	.word	0x08008c30
 8005788:	080058bd 	.word	0x080058bd

0800578c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d109      	bne.n	80057b8 <xTimerGenericCommand+0x2c>
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	e7fe      	b.n	80057b6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <xTimerGenericCommand+0x94>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02a      	beq.n	8005816 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	2b05      	cmp	r3, #5
 80057d0:	dc18      	bgt.n	8005804 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057d2:	f7ff fcfd 	bl	80051d0 <xTaskGetSchedulerState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d109      	bne.n	80057f0 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <xTimerGenericCommand+0x94>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	f107 0114 	add.w	r1, r7, #20
 80057e4:	2300      	movs	r3, #0
 80057e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e8:	f7fe fa6e 	bl	8003cc8 <xQueueGenericSend>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24
 80057ee:	e012      	b.n	8005816 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057f0:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <xTimerGenericCommand+0x94>)
 80057f2:	6818      	ldr	r0, [r3, #0]
 80057f4:	f107 0114 	add.w	r1, r7, #20
 80057f8:	2300      	movs	r3, #0
 80057fa:	2200      	movs	r2, #0
 80057fc:	f7fe fa64 	bl	8003cc8 <xQueueGenericSend>
 8005800:	6278      	str	r0, [r7, #36]	; 0x24
 8005802:	e008      	b.n	8005816 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <xTimerGenericCommand+0x94>)
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	f107 0114 	add.w	r1, r7, #20
 800580c:	2300      	movs	r3, #0
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	f7fe fb7c 	bl	8003f0c <xQueueGenericSendFromISR>
 8005814:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	; 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000230 	.word	0x20000230

08005824 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af02      	add	r7, sp, #8
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <prvProcessExpiredTimer+0x94>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	3304      	adds	r3, #4
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe f92b 	bl	8003a98 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d021      	beq.n	8005894 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	699a      	ldr	r2, [r3, #24]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	18d1      	adds	r1, r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f000 f8d1 	bl	8005a04 <prvInsertTimerInActiveList>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01e      	beq.n	80058a6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2300      	movs	r3, #0
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	2100      	movs	r1, #0
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff ff8a 	bl	800578c <xTimerGenericCommand>
 8005878:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d112      	bne.n	80058a6 <prvProcessExpiredTimer+0x82>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e7fe      	b.n	8005892 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589a:	f023 0301 	bic.w	r3, r3, #1
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	6978      	ldr	r0, [r7, #20]
 80058ac:	4798      	blx	r3
    }
 80058ae:	bf00      	nop
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000228 	.word	0x20000228

080058bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058c4:	f107 0308 	add.w	r3, r7, #8
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 f857 	bl	800597c <prvGetNextExpireTime>
 80058ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4619      	mov	r1, r3
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 f803 	bl	80058e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80058da:	f000 f8d5 	bl	8005a88 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058de:	e7f1      	b.n	80058c4 <prvTimerTask+0x8>

080058e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80058ea:	f7ff f88d 	bl	8004a08 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ee:	f107 0308 	add.w	r3, r7, #8
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f866 	bl	80059c4 <prvSampleTimeNow>
 80058f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d130      	bne.n	8005962 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <prvProcessTimerOrBlockTask+0x3c>
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	429a      	cmp	r2, r3
 800590c:	d806      	bhi.n	800591c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800590e:	f7ff f889 	bl	8004a24 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff85 	bl	8005824 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800591a:	e024      	b.n	8005966 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005922:	4b13      	ldr	r3, [pc, #76]	; (8005970 <prvProcessTimerOrBlockTask+0x90>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <prvProcessTimerOrBlockTask+0x50>
 800592c:	2301      	movs	r3, #1
 800592e:	e000      	b.n	8005932 <prvProcessTimerOrBlockTask+0x52>
 8005930:	2300      	movs	r3, #0
 8005932:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005934:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <prvProcessTimerOrBlockTask+0x94>)
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	4619      	mov	r1, r3
 8005942:	f7fe fe33 	bl	80045ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005946:	f7ff f86d 	bl	8004a24 <xTaskResumeAll>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <prvProcessTimerOrBlockTask+0x98>)
 8005952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	f3bf 8f6f 	isb	sy
    }
 8005960:	e001      	b.n	8005966 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005962:	f7ff f85f 	bl	8004a24 <xTaskResumeAll>
    }
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	2000022c 	.word	0x2000022c
 8005974:	20000230 	.word	0x20000230
 8005978:	e000ed04 	.word	0xe000ed04

0800597c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <prvGetNextExpireTime+0x44>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <prvGetNextExpireTime+0x16>
 800598e:	2201      	movs	r2, #1
 8005990:	e000      	b.n	8005994 <prvGetNextExpireTime+0x18>
 8005992:	2200      	movs	r2, #0
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <prvGetNextExpireTime+0x44>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	e001      	b.n	80059b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80059b0:	68fb      	ldr	r3, [r7, #12]
    }
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000228 	.word	0x20000228

080059c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80059cc:	f7ff f8ca 	bl	8004b64 <xTaskGetTickCount>
 80059d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80059d2:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <prvSampleTimeNow+0x3c>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d205      	bcs.n	80059e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80059dc:	f000 f918 	bl	8005c10 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	e002      	b.n	80059ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80059ee:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <prvSampleTimeNow+0x3c>)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80059f4:	68fb      	ldr	r3, [r7, #12]
    }
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000238 	.word	0x20000238

08005a04 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	68ba      	ldr	r2, [r7, #8]
 8005a1a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d812      	bhi.n	8005a50 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d302      	bcc.n	8005a3e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e01b      	b.n	8005a76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a3e:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <prvInsertTimerInActiveList+0x7c>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fd ffec 	bl	8003a26 <vListInsert>
 8005a4e:	e012      	b.n	8005a76 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d206      	bcs.n	8005a66 <prvInsertTimerInActiveList+0x62>
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d302      	bcc.n	8005a66 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	e007      	b.n	8005a76 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <prvInsertTimerInActiveList+0x80>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7fd ffd8 	bl	8003a26 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005a76:	697b      	ldr	r3, [r7, #20]
    }
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	2000022c 	.word	0x2000022c
 8005a84:	20000228 	.word	0x20000228

08005a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	; 0x30
 8005a8c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a8e:	e0ac      	b.n	8005bea <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f2c0 80a8 	blt.w	8005be8 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d004      	beq.n	8005aae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fd fff5 	bl	8003a98 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005aae:	1d3b      	adds	r3, r7, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff87 	bl	80059c4 <prvSampleTimeNow>
 8005ab6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b09      	cmp	r3, #9
 8005abc:	f200 8095 	bhi.w	8005bea <prvProcessReceivedCommands+0x162>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <prvProcessReceivedCommands+0x40>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005af1 	.word	0x08005af1
 8005ad0:	08005af1 	.word	0x08005af1
 8005ad4:	08005b63 	.word	0x08005b63
 8005ad8:	08005b77 	.word	0x08005b77
 8005adc:	08005bbf 	.word	0x08005bbf
 8005ae0:	08005af1 	.word	0x08005af1
 8005ae4:	08005af1 	.word	0x08005af1
 8005ae8:	08005b63 	.word	0x08005b63
 8005aec:	08005b77 	.word	0x08005b77
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af6:	f043 0301 	orr.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	18d1      	adds	r1, r2, r3
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a3a      	ldr	r2, [r7, #32]
 8005b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b10:	f7ff ff78 	bl	8005a04 <prvInsertTimerInActiveList>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d067      	beq.n	8005bea <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b20:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b28:	f003 0304 	and.w	r3, r3, #4
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d05c      	beq.n	8005bea <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	441a      	add	r2, r3
 8005b38:	2300      	movs	r3, #0
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	2100      	movs	r1, #0
 8005b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b42:	f7ff fe23 	bl	800578c <xTimerGenericCommand>
 8005b46:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d14d      	bne.n	8005bea <prvProcessReceivedCommands+0x162>
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	e7fe      	b.n	8005b60 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005b74:	e039      	b.n	8005bea <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b7c:	f043 0301 	orr.w	r3, r3, #1
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <prvProcessReceivedCommands+0x122>
 8005b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e7fe      	b.n	8005ba8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	18d1      	adds	r1, r2, r3
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	6a3a      	ldr	r2, [r7, #32]
 8005bb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb8:	f7ff ff24 	bl	8005a04 <prvInsertTimerInActiveList>
                        break;
 8005bbc:	e015      	b.n	8005bea <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8005bcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bce:	f000 fc55 	bl	800647c <vPortFree>
 8005bd2:	e00a      	b.n	8005bea <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005be6:	e000      	b.n	8005bea <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005be8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <prvProcessReceivedCommands+0x184>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f107 0108 	add.w	r1, r7, #8
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe fa43 	bl	8004080 <xQueueReceive>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f47f af47 	bne.w	8005a90 <prvProcessReceivedCommands+0x8>
        }
    }
 8005c02:	bf00      	nop
 8005c04:	3728      	adds	r7, #40	; 0x28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000230 	.word	0x20000230

08005c10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c16:	e047      	b.n	8005ca8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c18:	4b2d      	ldr	r3, [pc, #180]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c22:	4b2b      	ldr	r3, [pc, #172]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fd ff31 	bl	8003a98 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02d      	beq.n	8005ca8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d90e      	bls.n	8005c7c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6a:	4b19      	ldr	r3, [pc, #100]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fd fed6 	bl	8003a26 <vListInsert>
 8005c7a:	e015      	b.n	8005ca8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	2300      	movs	r3, #0
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	2100      	movs	r1, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff fd80 	bl	800578c <xTimerGenericCommand>
 8005c8c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <prvSwitchTimerLists+0x98>
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	e7fe      	b.n	8005ca6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1b2      	bne.n	8005c18 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005cb2:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005cb8:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <prvSwitchTimerLists+0xc4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a04      	ldr	r2, [pc, #16]	; (8005cd0 <prvSwitchTimerLists+0xc0>)
 8005cbe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005cc0:	4a04      	ldr	r2, [pc, #16]	; (8005cd4 <prvSwitchTimerLists+0xc4>)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	6013      	str	r3, [r2, #0]
    }
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000228 	.word	0x20000228
 8005cd4:	2000022c 	.word	0x2000022c

08005cd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005cdc:	f000 f9d2 	bl	8006084 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <prvCheckForValidListAndQueue+0x54>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11d      	bne.n	8005d24 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005ce8:	4811      	ldr	r0, [pc, #68]	; (8005d30 <prvCheckForValidListAndQueue+0x58>)
 8005cea:	f7fd fe4b 	bl	8003984 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005cee:	4811      	ldr	r0, [pc, #68]	; (8005d34 <prvCheckForValidListAndQueue+0x5c>)
 8005cf0:	f7fd fe48 	bl	8003984 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005cf4:	4b10      	ldr	r3, [pc, #64]	; (8005d38 <prvCheckForValidListAndQueue+0x60>)
 8005cf6:	4a0e      	ldr	r2, [pc, #56]	; (8005d30 <prvCheckForValidListAndQueue+0x58>)
 8005cf8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <prvCheckForValidListAndQueue+0x64>)
 8005cfc:	4a0d      	ldr	r2, [pc, #52]	; (8005d34 <prvCheckForValidListAndQueue+0x5c>)
 8005cfe:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d00:	2200      	movs	r2, #0
 8005d02:	210c      	movs	r1, #12
 8005d04:	200a      	movs	r0, #10
 8005d06:	f7fd ff59 	bl	8003bbc <xQueueGenericCreate>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <prvCheckForValidListAndQueue+0x54>)
 8005d0e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005d10:	4b06      	ldr	r3, [pc, #24]	; (8005d2c <prvCheckForValidListAndQueue+0x54>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <prvCheckForValidListAndQueue+0x54>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4908      	ldr	r1, [pc, #32]	; (8005d40 <prvCheckForValidListAndQueue+0x68>)
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fc14 	bl	800454c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d24:	f000 f9dc 	bl	80060e0 <vPortExitCritical>
    }
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000230 	.word	0x20000230
 8005d30:	20000200 	.word	0x20000200
 8005d34:	20000214 	.word	0x20000214
 8005d38:	20000228 	.word	0x20000228
 8005d3c:	2000022c 	.word	0x2000022c
 8005d40:	08008c38 	.word	0x08008c38

08005d44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b04      	subs	r3, #4
 8005d54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3b04      	subs	r3, #4
 8005d62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b04      	subs	r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005d74:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <pxPortInitialiseStack+0x64>)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b14      	subs	r3, #20
 8005d7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b04      	subs	r3, #4
 8005d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f06f 0202 	mvn.w	r2, #2
 8005d92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3b20      	subs	r3, #32
 8005d98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	08005dad 	.word	0x08005dad

08005dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <prvTaskExitError+0x50>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d009      	beq.n	8005dd4 <prvTaskExitError+0x28>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e7fe      	b.n	8005dd2 <prvTaskExitError+0x26>
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005de6:	bf00      	nop
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0fc      	beq.n	8005de8 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000064 	.word	0x20000064

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	4770      	bx	lr
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst2>:
 8005e20:	200000fc 	.word	0x200000fc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005e28:	4808      	ldr	r0, [pc, #32]	; (8005e4c <prvPortStartFirstTask+0x24>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8814 	msr	CONTROL, r0
 8005e3a:	b662      	cpsie	i
 8005e3c:	b661      	cpsie	f
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	df00      	svc	0
 8005e48:	bf00      	nop
 8005e4a:	0000      	.short	0x0000
 8005e4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop

08005e54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e5a:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <xPortStartScheduler+0x118>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a44      	ldr	r2, [pc, #272]	; (8005f70 <xPortStartScheduler+0x11c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d109      	bne.n	8005e78 <xPortStartScheduler+0x24>
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e7fe      	b.n	8005e76 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e78:	4b3c      	ldr	r3, [pc, #240]	; (8005f6c <xPortStartScheduler+0x118>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3d      	ldr	r2, [pc, #244]	; (8005f74 <xPortStartScheduler+0x120>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d109      	bne.n	8005e96 <xPortStartScheduler+0x42>
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e7fe      	b.n	8005e94 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e96:	4b38      	ldr	r3, [pc, #224]	; (8005f78 <xPortStartScheduler+0x124>)
 8005e98:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4b30      	ldr	r3, [pc, #192]	; (8005f7c <xPortStartScheduler+0x128>)
 8005ebc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005ec0:	2207      	movs	r2, #7
 8005ec2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec4:	e009      	b.n	8005eda <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005ece:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d0ef      	beq.n	8005ec6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ee6:	4b26      	ldr	r3, [pc, #152]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1c3 0307 	rsb	r3, r3, #7
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d009      	beq.n	8005f06 <xPortStartScheduler+0xb2>
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	e7fe      	b.n	8005f04 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f06:	4b1e      	ldr	r3, [pc, #120]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005f0e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <xPortStartScheduler+0x12c>)
 8005f1a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005f24:	4b17      	ldr	r3, [pc, #92]	; (8005f84 <xPortStartScheduler+0x130>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <xPortStartScheduler+0x130>)
 8005f2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f2e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005f30:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <xPortStartScheduler+0x130>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <xPortStartScheduler+0x130>)
 8005f36:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f3a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005f3c:	f000 f954 	bl	80061e8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <xPortStartScheduler+0x134>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005f46:	f000 f973 	bl	8006230 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f4a:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <xPortStartScheduler+0x138>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <xPortStartScheduler+0x138>)
 8005f50:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f54:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005f56:	f7ff ff67 	bl	8005e28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005f5a:	f7fe fee1 	bl	8004d20 <vTaskSwitchContext>
    prvTaskExitError();
 8005f5e:	f7ff ff25 	bl	8005dac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	e000ed00 	.word	0xe000ed00
 8005f70:	410fc271 	.word	0x410fc271
 8005f74:	410fc270 	.word	0x410fc270
 8005f78:	e000e400 	.word	0xe000e400
 8005f7c:	2000023c 	.word	0x2000023c
 8005f80:	20000240 	.word	0x20000240
 8005f84:	e000ed20 	.word	0xe000ed20
 8005f88:	20000064 	.word	0x20000064
 8005f8c:	e000ef34 	.word	0xe000ef34

08005f90 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005f96:	4b35      	ldr	r3, [pc, #212]	; (800606c <vInitPrioGroupValue+0xdc>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a35      	ldr	r2, [pc, #212]	; (8006070 <vInitPrioGroupValue+0xe0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <vInitPrioGroupValue+0x24>
 8005fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa4:	f383 8811 	msr	BASEPRI, r3
 8005fa8:	f3bf 8f6f 	isb	sy
 8005fac:	f3bf 8f4f 	dsb	sy
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	e7fe      	b.n	8005fb2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	; (800606c <vInitPrioGroupValue+0xdc>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2e      	ldr	r2, [pc, #184]	; (8006074 <vInitPrioGroupValue+0xe4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d109      	bne.n	8005fd2 <vInitPrioGroupValue+0x42>
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e7fe      	b.n	8005fd0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <vInitPrioGroupValue+0xe8>)
 8005fd4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	22ff      	movs	r2, #255	; 0xff
 8005fe2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <vInitPrioGroupValue+0xec>)
 8005ff8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ffa:	4b21      	ldr	r3, [pc, #132]	; (8006080 <vInitPrioGroupValue+0xf0>)
 8005ffc:	2207      	movs	r2, #7
 8005ffe:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006000:	e009      	b.n	8006016 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8006002:	4b1f      	ldr	r3, [pc, #124]	; (8006080 <vInitPrioGroupValue+0xf0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3b01      	subs	r3, #1
 8006008:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <vInitPrioGroupValue+0xf0>)
 800600a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	b2db      	uxtb	r3, r3
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b80      	cmp	r3, #128	; 0x80
 8006020:	d0ef      	beq.n	8006002 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <vInitPrioGroupValue+0xf0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1c3 0307 	rsb	r3, r3, #7
 800602a:	2b04      	cmp	r3, #4
 800602c:	d009      	beq.n	8006042 <vInitPrioGroupValue+0xb2>
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
 8006040:	e7fe      	b.n	8006040 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <vInitPrioGroupValue+0xf0>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	4a0d      	ldr	r2, [pc, #52]	; (8006080 <vInitPrioGroupValue+0xf0>)
 800604a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <vInitPrioGroupValue+0xf0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006054:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <vInitPrioGroupValue+0xf0>)
 8006056:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	b2da      	uxtb	r2, r3
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8006060:	bf00      	nop
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	e000ed00 	.word	0xe000ed00
 8006070:	410fc271 	.word	0x410fc271
 8006074:	410fc270 	.word	0x410fc270
 8006078:	e000e400 	.word	0xe000e400
 800607c:	2000023c 	.word	0x2000023c
 8006080:	20000240 	.word	0x20000240

08006084 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <vPortEnterCritical+0x54>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	4a0d      	ldr	r2, [pc, #52]	; (80060d8 <vPortEnterCritical+0x54>)
 80060a4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80060a6:	4b0c      	ldr	r3, [pc, #48]	; (80060d8 <vPortEnterCritical+0x54>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d10e      	bne.n	80060cc <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <vPortEnterCritical+0x58>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <vPortEnterCritical+0x48>
 80060b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	e7fe      	b.n	80060ca <vPortEnterCritical+0x46>
    }
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20000064 	.word	0x20000064
 80060dc:	e000ed04 	.word	0xe000ed04

080060e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80060e6:	4b11      	ldr	r3, [pc, #68]	; (800612c <vPortExitCritical+0x4c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d109      	bne.n	8006102 <vPortExitCritical+0x22>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e7fe      	b.n	8006100 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <vPortExitCritical+0x4c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3b01      	subs	r3, #1
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <vPortExitCritical+0x4c>)
 800610a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800610c:	4b07      	ldr	r3, [pc, #28]	; (800612c <vPortExitCritical+0x4c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <vPortExitCritical+0x3e>
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000064 	.word	0x20000064

08006130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006130:	f3ef 8009 	mrs	r0, PSP
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4b15      	ldr	r3, [pc, #84]	; (8006190 <pxCurrentTCBConst>)
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	f01e 0f10 	tst.w	lr, #16
 8006140:	bf08      	it	eq
 8006142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	6010      	str	r0, [r2, #0]
 800614c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006150:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006154:	f380 8811 	msr	BASEPRI, r0
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f7fe fdde 	bl	8004d20 <vTaskSwitchContext>
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f380 8811 	msr	BASEPRI, r0
 800616c:	bc09      	pop	{r0, r3}
 800616e:	6819      	ldr	r1, [r3, #0]
 8006170:	6808      	ldr	r0, [r1, #0]
 8006172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006176:	f01e 0f10 	tst.w	lr, #16
 800617a:	bf08      	it	eq
 800617c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006180:	f380 8809 	msr	PSP, r0
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	f3af 8000 	nop.w

08006190 <pxCurrentTCBConst>:
 8006190:	200000fc 	.word	0x200000fc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006194:	bf00      	nop
 8006196:	bf00      	nop

08006198 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
        __asm volatile
 800619e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a2:	f383 8811 	msr	BASEPRI, r3
 80061a6:	f3bf 8f6f 	isb	sy
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80061b0:	f001 fd44 	bl	8007c3c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80061b4:	f7fe fcf8 	bl	8004ba8 <xTaskIncrementTick>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d006      	beq.n	80061cc <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80061be:	f001 fd9b 	bl	8007cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <SysTick_Handler+0x4c>)
 80061c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 80061cc:	f001 fd78 	bl	8007cc0 <SEGGER_SYSVIEW_RecordExitISR>
 80061d0:	2300      	movs	r3, #0
 80061d2:	603b      	str	r3, [r7, #0]
        __asm volatile
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80061ec:	4b0b      	ldr	r3, [pc, #44]	; (800621c <vPortSetupTimerInterrupt+0x34>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <vPortSetupTimerInterrupt+0x38>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80061f8:	4b0a      	ldr	r3, [pc, #40]	; (8006224 <vPortSetupTimerInterrupt+0x3c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <vPortSetupTimerInterrupt+0x40>)
 80061fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	4a09      	ldr	r2, [pc, #36]	; (800622c <vPortSetupTimerInterrupt+0x44>)
 8006206:	3b01      	subs	r3, #1
 8006208:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800620a:	4b04      	ldr	r3, [pc, #16]	; (800621c <vPortSetupTimerInterrupt+0x34>)
 800620c:	2207      	movs	r2, #7
 800620e:	601a      	str	r2, [r3, #0]
}
 8006210:	bf00      	nop
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	e000e010 	.word	0xe000e010
 8006220:	e000e018 	.word	0xe000e018
 8006224:	20000000 	.word	0x20000000
 8006228:	51eb851f 	.word	0x51eb851f
 800622c:	e000e014 	.word	0xe000e014

08006230 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006230:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006240 <vPortEnableVFP+0x10>
 8006234:	6801      	ldr	r1, [r0, #0]
 8006236:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800623a:	6001      	str	r1, [r0, #0]
 800623c:	4770      	bx	lr
 800623e:	0000      	.short	0x0000
 8006240:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop

08006248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800624e:	f3ef 8305 	mrs	r3, IPSR
 8006252:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b0f      	cmp	r3, #15
 8006258:	d913      	bls.n	8006282 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800625a:	4a16      	ldr	r2, [pc, #88]	; (80062b4 <vPortValidateInterruptPriority+0x6c>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006264:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <vPortValidateInterruptPriority+0x70>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	7afa      	ldrb	r2, [r7, #11]
 800626a:	429a      	cmp	r2, r3
 800626c:	d209      	bcs.n	8006282 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	e7fe      	b.n	8006280 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <vPortValidateInterruptPriority+0x74>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800628a:	4b0d      	ldr	r3, [pc, #52]	; (80062c0 <vPortValidateInterruptPriority+0x78>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d909      	bls.n	80062a6 <vPortValidateInterruptPriority+0x5e>
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	e7fe      	b.n	80062a4 <vPortValidateInterruptPriority+0x5c>
    }
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	e000e3f0 	.word	0xe000e3f0
 80062b8:	2000023c 	.word	0x2000023c
 80062bc:	e000ed0c 	.word	0xe000ed0c
 80062c0:	20000240 	.word	0x20000240

080062c4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80062d0:	f7fe fb9a 	bl	8004a08 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80062d4:	4b63      	ldr	r3, [pc, #396]	; (8006464 <pvPortMalloc+0x1a0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80062dc:	f000 f92e 	bl	800653c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80062e0:	4b61      	ldr	r3, [pc, #388]	; (8006468 <pvPortMalloc+0x1a4>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 80a5 	bne.w	8006438 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02c      	beq.n	800634e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80062f4:	2208      	movs	r2, #8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d226      	bcs.n	800634e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8006300:	2208      	movs	r2, #8
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	2b00      	cmp	r3, #0
 8006310:	d020      	beq.n	8006354 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f023 0307 	bic.w	r3, r3, #7
 8006318:	3308      	adds	r3, #8
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d213      	bcs.n	8006348 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	3308      	adds	r3, #8
 8006328:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f003 0307 	and.w	r3, r3, #7
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <pvPortMalloc+0x90>
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e7fe      	b.n	8006346 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800634c:	e002      	b.n	8006354 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
 8006352:	e000      	b.n	8006356 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006354:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d06d      	beq.n	8006438 <pvPortMalloc+0x174>
 800635c:	4b43      	ldr	r3, [pc, #268]	; (800646c <pvPortMalloc+0x1a8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d868      	bhi.n	8006438 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006366:	4b42      	ldr	r3, [pc, #264]	; (8006470 <pvPortMalloc+0x1ac>)
 8006368:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800636a:	4b41      	ldr	r3, [pc, #260]	; (8006470 <pvPortMalloc+0x1ac>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006370:	e004      	b.n	800637c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d903      	bls.n	800638e <pvPortMalloc+0xca>
 8006386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1f1      	bne.n	8006372 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800638e:	4b35      	ldr	r3, [pc, #212]	; (8006464 <pvPortMalloc+0x1a0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006394:	429a      	cmp	r2, r3
 8006396:	d04f      	beq.n	8006438 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2208      	movs	r2, #8
 800639e:	4413      	add	r3, r2
 80063a0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	1ad2      	subs	r2, r2, r3
 80063b2:	2308      	movs	r3, #8
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d91e      	bls.n	80063f8 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f003 0307 	and.w	r3, r3, #7
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <pvPortMalloc+0x11c>
 80063cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d0:	f383 8811 	msr	BASEPRI, r3
 80063d4:	f3bf 8f6f 	isb	sy
 80063d8:	f3bf 8f4f 	dsb	sy
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	e7fe      	b.n	80063de <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80063e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80063f2:	69b8      	ldr	r0, [r7, #24]
 80063f4:	f000 f904 	bl	8006600 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80063f8:	4b1c      	ldr	r3, [pc, #112]	; (800646c <pvPortMalloc+0x1a8>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	4a1a      	ldr	r2, [pc, #104]	; (800646c <pvPortMalloc+0x1a8>)
 8006404:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006406:	4b19      	ldr	r3, [pc, #100]	; (800646c <pvPortMalloc+0x1a8>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	4b1a      	ldr	r3, [pc, #104]	; (8006474 <pvPortMalloc+0x1b0>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d203      	bcs.n	800641a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006412:	4b16      	ldr	r3, [pc, #88]	; (800646c <pvPortMalloc+0x1a8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a17      	ldr	r2, [pc, #92]	; (8006474 <pvPortMalloc+0x1b0>)
 8006418:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <pvPortMalloc+0x1a4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	431a      	orrs	r2, r3
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <pvPortMalloc+0x1b4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3301      	adds	r3, #1
 8006434:	4a10      	ldr	r2, [pc, #64]	; (8006478 <pvPortMalloc+0x1b4>)
 8006436:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006438:	f7fe faf4 	bl	8004a24 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	f003 0307 	and.w	r3, r3, #7
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <pvPortMalloc+0x196>
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e7fe      	b.n	8006458 <pvPortMalloc+0x194>
    return pvReturn;
 800645a:	69fb      	ldr	r3, [r7, #28]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	; 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20012e4c 	.word	0x20012e4c
 8006468:	20012e60 	.word	0x20012e60
 800646c:	20012e50 	.word	0x20012e50
 8006470:	20012e44 	.word	0x20012e44
 8006474:	20012e54 	.word	0x20012e54
 8006478:	20012e58 	.word	0x20012e58

0800647c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04b      	beq.n	8006526 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800648e:	2308      	movs	r3, #8
 8006490:	425b      	negs	r3, r3
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4413      	add	r3, r2
 8006496:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	4b23      	ldr	r3, [pc, #140]	; (8006530 <vPortFree+0xb4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d109      	bne.n	80064be <vPortFree+0x42>
 80064aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e7fe      	b.n	80064bc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <vPortFree+0x5e>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	e7fe      	b.n	80064d8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	4b14      	ldr	r3, [pc, #80]	; (8006530 <vPortFree+0xb4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d01e      	beq.n	8006526 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d11a      	bne.n	8006526 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b0e      	ldr	r3, [pc, #56]	; (8006530 <vPortFree+0xb4>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	401a      	ands	r2, r3
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006500:	f7fe fa82 	bl	8004a08 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <vPortFree+0xb8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4413      	add	r3, r2
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <vPortFree+0xb8>)
 8006510:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f000 f874 	bl	8006600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006518:	4b07      	ldr	r3, [pc, #28]	; (8006538 <vPortFree+0xbc>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a06      	ldr	r2, [pc, #24]	; (8006538 <vPortFree+0xbc>)
 8006520:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006522:	f7fe fa7f 	bl	8004a24 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006526:	bf00      	nop
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20012e60 	.word	0x20012e60
 8006534:	20012e50 	.word	0x20012e50
 8006538:	20012e5c 	.word	0x20012e5c

0800653c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006542:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8006546:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8006548:	4b27      	ldr	r3, [pc, #156]	; (80065e8 <prvHeapInit+0xac>)
 800654a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00c      	beq.n	8006570 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3307      	adds	r3, #7
 800655a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	4a1f      	ldr	r2, [pc, #124]	; (80065e8 <prvHeapInit+0xac>)
 800656c:	4413      	add	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006574:	4a1d      	ldr	r2, [pc, #116]	; (80065ec <prvHeapInit+0xb0>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800657a:	4b1c      	ldr	r3, [pc, #112]	; (80065ec <prvHeapInit+0xb0>)
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	4413      	add	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006588:	2208      	movs	r2, #8
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1a9b      	subs	r3, r3, r2
 800658e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f023 0307 	bic.w	r3, r3, #7
 8006596:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <prvHeapInit+0xb4>)
 800659c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800659e:	4b14      	ldr	r3, [pc, #80]	; (80065f0 <prvHeapInit+0xb4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2200      	movs	r2, #0
 80065a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <prvHeapInit+0xb4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065bc:	4b0c      	ldr	r3, [pc, #48]	; (80065f0 <prvHeapInit+0xb4>)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <prvHeapInit+0xb8>)
 80065ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <prvHeapInit+0xbc>)
 80065d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <prvHeapInit+0xc0>)
 80065d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80065da:	601a      	str	r2, [r3, #0]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	20000244 	.word	0x20000244
 80065ec:	20012e44 	.word	0x20012e44
 80065f0:	20012e4c 	.word	0x20012e4c
 80065f4:	20012e54 	.word	0x20012e54
 80065f8:	20012e50 	.word	0x20012e50
 80065fc:	20012e60 	.word	0x20012e60

08006600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006608:	4b28      	ldr	r3, [pc, #160]	; (80066ac <prvInsertBlockIntoFreeList+0xac>)
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e002      	b.n	8006614 <prvInsertBlockIntoFreeList+0x14>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d8f7      	bhi.n	800660e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	4413      	add	r3, r2
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d108      	bne.n	8006642 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	441a      	add	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d118      	bne.n	8006688 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b15      	ldr	r3, [pc, #84]	; (80066b0 <prvInsertBlockIntoFreeList+0xb0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d00d      	beq.n	800667e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	441a      	add	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	e008      	b.n	8006690 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800667e:	4b0c      	ldr	r3, [pc, #48]	; (80066b0 <prvInsertBlockIntoFreeList+0xb0>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	e003      	b.n	8006690 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d002      	beq.n	800669e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20012e44 	.word	0x20012e44
 80066b0:	20012e4c 	.word	0x20012e4c

080066b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80066b8:	4803      	ldr	r0, [pc, #12]	; (80066c8 <_cbSendSystemDesc+0x14>)
 80066ba:	f001 fa6b 	bl	8007b94 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80066be:	4803      	ldr	r0, [pc, #12]	; (80066cc <_cbSendSystemDesc+0x18>)
 80066c0:	f001 fa68 	bl	8007b94 <SEGGER_SYSVIEW_SendSysDesc>
}
 80066c4:	bf00      	nop
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	08008c40 	.word	0x08008c40
 80066cc:	08008c84 	.word	0x08008c84

080066d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80066d4:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80066da:	6819      	ldr	r1, [r3, #0]
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80066de:	4a06      	ldr	r2, [pc, #24]	; (80066f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80066e0:	f000 fd28 	bl	8007134 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80066e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80066e8:	f000 fd68 	bl	80071bc <SEGGER_SYSVIEW_SetRAMBase>
}
 80066ec:	bf00      	nop
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20000000 	.word	0x20000000
 80066f4:	080066b5 	.word	0x080066b5
 80066f8:	08008d24 	.word	0x08008d24

080066fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80066fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066fe:	b085      	sub	sp, #20
 8006700:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e034      	b.n	8006772 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006708:	491e      	ldr	r1, [pc, #120]	; (8006784 <_cbSendTaskList+0x88>)
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	491a      	ldr	r1, [pc, #104]	; (8006784 <_cbSendTaskList+0x88>)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	440b      	add	r3, r1
 8006726:	3304      	adds	r3, #4
 8006728:	681c      	ldr	r4, [r3, #0]
 800672a:	4916      	ldr	r1, [pc, #88]	; (8006784 <_cbSendTaskList+0x88>)
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	3308      	adds	r3, #8
 800673a:	681d      	ldr	r5, [r3, #0]
 800673c:	4911      	ldr	r1, [pc, #68]	; (8006784 <_cbSendTaskList+0x88>)
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	4613      	mov	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	330c      	adds	r3, #12
 800674c:	681e      	ldr	r6, [r3, #0]
 800674e:	490d      	ldr	r1, [pc, #52]	; (8006784 <_cbSendTaskList+0x88>)
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	440b      	add	r3, r1
 800675c:	3310      	adds	r3, #16
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	4633      	mov	r3, r6
 8006764:	462a      	mov	r2, r5
 8006766:	4621      	mov	r1, r4
 8006768:	f000 f8d2 	bl	8006910 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3301      	adds	r3, #1
 8006770:	607b      	str	r3, [r7, #4]
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <_cbSendTaskList+0x8c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d3c5      	bcc.n	8006708 <_cbSendTaskList+0xc>
  }
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006784:	20012e64 	.word	0x20012e64
 8006788:	20012f04 	.word	0x20012f04

0800678c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800678c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006794:	f7fe f9f6 	bl	8004b84 <xTaskGetTickCountFromISR>
 8006798:	4603      	mov	r3, r0
 800679a:	f04f 0400 	mov.w	r4, #0
 800679e:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
 80067a2:	e9d7 5600 	ldrd	r5, r6, [r7]
 80067a6:	46ab      	mov	fp, r5
 80067a8:	46b4      	mov	ip, r6
 80067aa:	f04f 0100 	mov.w	r1, #0
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80067b6:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80067ba:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80067be:	468b      	mov	fp, r1
 80067c0:	4694      	mov	ip, r2
 80067c2:	eb1b 0b05 	adds.w	fp, fp, r5
 80067c6:	eb4c 0c06 	adc.w	ip, ip, r6
 80067ca:	eb1b 030b 	adds.w	r3, fp, fp
 80067ce:	eb4c 040c 	adc.w	r4, ip, ip
 80067d2:	469b      	mov	fp, r3
 80067d4:	46a4      	mov	ip, r4
 80067d6:	e9c7 bc00 	strd	fp, ip, [r7]
  Time *= 1000;
 80067da:	e9d7 5600 	ldrd	r5, r6, [r7]
 80067de:	462b      	mov	r3, r5
 80067e0:	4634      	mov	r4, r6
 80067e2:	f04f 0100 	mov.w	r1, #0
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	0162      	lsls	r2, r4, #5
 80067ec:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80067f0:	0159      	lsls	r1, r3, #5
 80067f2:	460b      	mov	r3, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	1b5b      	subs	r3, r3, r5
 80067f8:	eb64 0406 	sbc.w	r4, r4, r6
 80067fc:	f04f 0100 	mov.w	r1, #0
 8006800:	f04f 0200 	mov.w	r2, #0
 8006804:	00a2      	lsls	r2, r4, #2
 8006806:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800680a:	0099      	lsls	r1, r3, #2
 800680c:	460b      	mov	r3, r1
 800680e:	4614      	mov	r4, r2
 8006810:	195b      	adds	r3, r3, r5
 8006812:	eb44 0406 	adc.w	r4, r4, r6
 8006816:	f04f 0100 	mov.w	r1, #0
 800681a:	f04f 0200 	mov.w	r2, #0
 800681e:	00e2      	lsls	r2, r4, #3
 8006820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006824:	00d9      	lsls	r1, r3, #3
 8006826:	460b      	mov	r3, r1
 8006828:	4614      	mov	r4, r2
 800682a:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 800682e:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006832:	4618      	mov	r0, r3
 8006834:	4621      	mov	r1, r4
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	...

08006840 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af02      	add	r7, sp, #8
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800684e:	2205      	movs	r2, #5
 8006850:	492b      	ldr	r1, [pc, #172]	; (8006900 <SYSVIEW_AddTask+0xc0>)
 8006852:	68b8      	ldr	r0, [r7, #8]
 8006854:	f001 fd20 	bl	8008298 <memcmp>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d04b      	beq.n	80068f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800685e:	4b29      	ldr	r3, [pc, #164]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b07      	cmp	r3, #7
 8006864:	d903      	bls.n	800686e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006866:	4828      	ldr	r0, [pc, #160]	; (8006908 <SYSVIEW_AddTask+0xc8>)
 8006868:	f001 fc90 	bl	800818c <SEGGER_SYSVIEW_Warn>
    return;
 800686c:	e044      	b.n	80068f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800686e:	4b25      	ldr	r3, [pc, #148]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4926      	ldr	r1, [pc, #152]	; (800690c <SYSVIEW_AddTask+0xcc>)
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	440b      	add	r3, r1
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	4921      	ldr	r1, [pc, #132]	; (800690c <SYSVIEW_AddTask+0xcc>)
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	3304      	adds	r3, #4
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	491b      	ldr	r1, [pc, #108]	; (800690c <SYSVIEW_AddTask+0xcc>)
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	3308      	adds	r3, #8
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80068ae:	4b15      	ldr	r3, [pc, #84]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	4916      	ldr	r1, [pc, #88]	; (800690c <SYSVIEW_AddTask+0xcc>)
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	330c      	adds	r3, #12
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80068c4:	4b0f      	ldr	r3, [pc, #60]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4910      	ldr	r1, [pc, #64]	; (800690c <SYSVIEW_AddTask+0xcc>)
 80068ca:	4613      	mov	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	3310      	adds	r3, #16
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3301      	adds	r3, #1
 80068e0:	4a08      	ldr	r2, [pc, #32]	; (8006904 <SYSVIEW_AddTask+0xc4>)
 80068e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f80e 	bl	8006910 <SYSVIEW_SendTaskInfo>
 80068f4:	e000      	b.n	80068f8 <SYSVIEW_AddTask+0xb8>
    return;
 80068f6:	bf00      	nop

}
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	08008c94 	.word	0x08008c94
 8006904:	20012f04 	.word	0x20012f04
 8006908:	08008c9c 	.word	0x08008c9c
 800690c:	20012e64 	.word	0x20012e64

08006910 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800691e:	f107 0314 	add.w	r3, r7, #20
 8006922:	2214      	movs	r2, #20
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fcd0 	bl	80082cc <memset>
  TaskInfo.TaskID     = TaskID;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006940:	f107 0314 	add.w	r3, r7, #20
 8006944:	4618      	mov	r0, r3
 8006946:	f001 f82d 	bl	80079a4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800694a:	bf00      	nop
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <_DoInit+0x98>)
 800695c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2203      	movs	r2, #3
 8006962:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2203      	movs	r2, #3
 8006968:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a20      	ldr	r2, [pc, #128]	; (80069f0 <_DoInit+0x9c>)
 800696e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <_DoInit+0xa0>)
 8006974:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800697c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <_DoInit+0x9c>)
 8006994:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <_DoInit+0xa4>)
 800699a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2210      	movs	r2, #16
 80069a0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3307      	adds	r3, #7
 80069b8:	4a10      	ldr	r2, [pc, #64]	; (80069fc <_DoInit+0xa8>)
 80069ba:	6810      	ldr	r0, [r2, #0]
 80069bc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80069be:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a0e      	ldr	r2, [pc, #56]	; (8006a00 <_DoInit+0xac>)
 80069c6:	6810      	ldr	r0, [r2, #0]
 80069c8:	6018      	str	r0, [r3, #0]
 80069ca:	8891      	ldrh	r1, [r2, #4]
 80069cc:	7992      	ldrb	r2, [r2, #6]
 80069ce:	8099      	strh	r1, [r3, #4]
 80069d0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80069d2:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80069dc:	f3bf 8f5f 	dmb	sy
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	200145c0 	.word	0x200145c0
 80069f0:	08008cec 	.word	0x08008cec
 80069f4:	20012f08 	.word	0x20012f08
 80069f8:	20013308 	.word	0x20013308
 80069fc:	08008cf8 	.word	0x08008cf8
 8006a00:	08008cfc 	.word	0x08008cfc

08006a04 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08c      	sub	sp, #48	; 0x30
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006a10:	4b3e      	ldr	r3, [pc, #248]	; (8006b0c <SEGGER_RTT_ReadNoLock+0x108>)
 8006a12:	623b      	str	r3, [r7, #32]
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <SEGGER_RTT_ReadNoLock+0x1e>
 8006a1e:	f7ff ff99 	bl	8006954 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	3360      	adds	r3, #96	; 0x60
 8006a2e:	4a37      	ldr	r2, [pc, #220]	; (8006b0c <SEGGER_RTT_ReadNoLock+0x108>)
 8006a30:	4413      	add	r3, r2
 8006a32:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006a44:	2300      	movs	r3, #0
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d92b      	bls.n	8006aa8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	bf28      	it	cs
 8006a62:	4613      	movcs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	4413      	add	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	6939      	ldr	r1, [r7, #16]
 8006a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a76:	f001 fc1e 	bl	80082b6 <memcpy>
    NumBytesRead += NumBytesRem;
 8006a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4413      	add	r3, r2
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	4413      	add	r3, r2
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d101      	bne.n	8006aa8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bf28      	it	cs
 8006ab8:	4613      	movcs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d019      	beq.n	8006af6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	4413      	add	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	6939      	ldr	r1, [r7, #16]
 8006ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ad2:	f001 fbf0 	bl	80082b6 <memcpy>
    NumBytesRead += NumBytesRem;
 8006ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	4413      	add	r3, r2
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4413      	add	r3, r2
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b00:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3730      	adds	r7, #48	; 0x30
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	200145c0 	.word	0x200145c0

08006b10 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006b1e:	4b3d      	ldr	r3, [pc, #244]	; (8006c14 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <SEGGER_RTT_AllocUpBuffer+0x20>
 8006b2c:	f7ff ff12 	bl	8006954 <_DoInit>
  SEGGER_RTT_LOCK();
 8006b30:	f3ef 8311 	mrs	r3, BASEPRI
 8006b34:	f04f 0120 	mov.w	r1, #32
 8006b38:	f381 8811 	msr	BASEPRI, r1
 8006b3c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006b3e:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8006b40:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8006b46:	6939      	ldr	r1, [r7, #16]
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	4413      	add	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	440b      	add	r3, r1
 8006b56:	3304      	adds	r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3301      	adds	r3, #1
 8006b62:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	dbeb      	blt.n	8006b46 <SEGGER_RTT_AllocUpBuffer+0x36>
 8006b6e:	e000      	b.n	8006b72 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8006b70:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	da3f      	bge.n	8006bfc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8006b7c:	6939      	ldr	r1, [r7, #16]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	440b      	add	r3, r1
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006b90:	6939      	ldr	r1, [r7, #16]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	4613      	mov	r3, r2
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4413      	add	r3, r2
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8006ba6:	6939      	ldr	r1, [r7, #16]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	4613      	mov	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4413      	add	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3320      	adds	r3, #32
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006bba:	6939      	ldr	r1, [r7, #16]
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	4413      	add	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3328      	adds	r3, #40	; 0x28
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006bce:	6939      	ldr	r1, [r7, #16]
 8006bd0:	69fa      	ldr	r2, [r7, #28]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	005b      	lsls	r3, r3, #1
 8006bd6:	4413      	add	r3, r2
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	440b      	add	r3, r1
 8006bdc:	3324      	adds	r3, #36	; 0x24
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8006be2:	6939      	ldr	r1, [r7, #16]
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	4613      	mov	r3, r2
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	4413      	add	r3, r2
 8006bec:	00db      	lsls	r3, r3, #3
 8006bee:	440b      	add	r3, r1
 8006bf0:	332c      	adds	r3, #44	; 0x2c
 8006bf2:	683a      	ldr	r2, [r7, #0]
 8006bf4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006bf6:	f3bf 8f5f 	dmb	sy
 8006bfa:	e002      	b.n	8006c02 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8006bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006c00:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8006c08:	69fb      	ldr	r3, [r7, #28]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200145c0 	.word	0x200145c0

08006c18 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b088      	sub	sp, #32
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006c26:	4b33      	ldr	r3, [pc, #204]	; (8006cf4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d101      	bne.n	8006c38 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8006c34:	f7ff fe8e 	bl	8006954 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006c38:	4b2e      	ldr	r3, [pc, #184]	; (8006cf4 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8006c3a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	461a      	mov	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d24d      	bcs.n	8006ce4 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8006c48:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4c:	f04f 0120 	mov.w	r1, #32
 8006c50:	f381 8811 	msr	BASEPRI, r1
 8006c54:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d031      	beq.n	8006cc0 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4613      	mov	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	4413      	add	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	440b      	add	r3, r1
 8006c6a:	3360      	adds	r3, #96	; 0x60
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8006c70:	6979      	ldr	r1, [r7, #20]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4613      	mov	r3, r2
 8006c76:	005b      	lsls	r3, r3, #1
 8006c78:	4413      	add	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3364      	adds	r3, #100	; 0x64
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4413      	add	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	440b      	add	r3, r1
 8006c92:	3368      	adds	r3, #104	; 0x68
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	4413      	add	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	440b      	add	r3, r1
 8006ca6:	3370      	adds	r3, #112	; 0x70
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8006cac:	6979      	ldr	r1, [r7, #20]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	440b      	add	r3, r1
 8006cba:	336c      	adds	r3, #108	; 0x6c
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8006cc0:	6979      	ldr	r1, [r7, #20]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	4413      	add	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	440b      	add	r3, r1
 8006cce:	3374      	adds	r3, #116	; 0x74
 8006cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cd2:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8006cd4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
 8006ce2:	e002      	b.n	8006cea <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8006cea:	69fb      	ldr	r3, [r7, #28]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3720      	adds	r7, #32
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200145c0 	.word	0x200145c0

08006cf8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d08:	e002      	b.n	8006d10 <_EncodeStr+0x18>
    Len++;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	4413      	add	r3, r2
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1f6      	bne.n	8006d0a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d901      	bls.n	8006d28 <_EncodeStr+0x30>
    Len = Limit;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2bfe      	cmp	r3, #254	; 0xfe
 8006d2c:	d806      	bhi.n	8006d3c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	60fa      	str	r2, [r7, #12]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
 8006d3a:	e011      	b.n	8006d60 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	60fa      	str	r2, [r7, #12]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	60fa      	str	r2, [r7, #12]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	0a19      	lsrs	r1, r3, #8
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	60fa      	str	r2, [r7, #12]
 8006d5c:	b2ca      	uxtb	r2, r1
 8006d5e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006d64:	e00a      	b.n	8006d7c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	1c53      	adds	r3, r2, #1
 8006d6a:	60bb      	str	r3, [r7, #8]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1c59      	adds	r1, r3, #1
 8006d70:	60f9      	str	r1, [r7, #12]
 8006d72:	7812      	ldrb	r2, [r2, #0]
 8006d74:	701a      	strb	r2, [r3, #0]
    n++;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3f0      	bcc.n	8006d66 <_EncodeStr+0x6e>
  }
  return pPayload;
 8006d84:	68fb      	ldr	r3, [r7, #12]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr

08006d92 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006d92:	b480      	push	{r7}
 8006d94:	b083      	sub	sp, #12
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	3304      	adds	r3, #4
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006db2:	4b33      	ldr	r3, [pc, #204]	; (8006e80 <_HandleIncomingPacket+0xd4>)
 8006db4:	7e1b      	ldrb	r3, [r3, #24]
 8006db6:	4618      	mov	r0, r3
 8006db8:	1cfb      	adds	r3, r7, #3
 8006dba:	2201      	movs	r2, #1
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	f7ff fe21 	bl	8006a04 <SEGGER_RTT_ReadNoLock>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dd4d      	ble.n	8006e68 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d022      	beq.n	8006e18 <_HandleIncomingPacket+0x6c>
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	dc0b      	bgt.n	8006dee <_HandleIncomingPacket+0x42>
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d015      	beq.n	8006e06 <_HandleIncomingPacket+0x5a>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	dc02      	bgt.n	8006de4 <_HandleIncomingPacket+0x38>
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d00e      	beq.n	8006e00 <_HandleIncomingPacket+0x54>
 8006de2:	e034      	b.n	8006e4e <_HandleIncomingPacket+0xa2>
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d011      	beq.n	8006e0c <_HandleIncomingPacket+0x60>
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d012      	beq.n	8006e12 <_HandleIncomingPacket+0x66>
 8006dec:	e02f      	b.n	8006e4e <_HandleIncomingPacket+0xa2>
 8006dee:	2b07      	cmp	r3, #7
 8006df0:	d018      	beq.n	8006e24 <_HandleIncomingPacket+0x78>
 8006df2:	2b07      	cmp	r3, #7
 8006df4:	db13      	blt.n	8006e1e <_HandleIncomingPacket+0x72>
 8006df6:	2b7f      	cmp	r3, #127	; 0x7f
 8006df8:	d038      	beq.n	8006e6c <_HandleIncomingPacket+0xc0>
 8006dfa:	2b80      	cmp	r3, #128	; 0x80
 8006dfc:	d015      	beq.n	8006e2a <_HandleIncomingPacket+0x7e>
 8006dfe:	e026      	b.n	8006e4e <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006e00:	f000 fc56 	bl	80076b0 <SEGGER_SYSVIEW_Start>
      break;
 8006e04:	e037      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006e06:	f000 fd0d 	bl	8007824 <SEGGER_SYSVIEW_Stop>
      break;
 8006e0a:	e034      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006e0c:	f000 fee6 	bl	8007bdc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006e10:	e031      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006e12:	f000 feab 	bl	8007b6c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006e16:	e02e      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006e18:	f000 fd2a 	bl	8007870 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006e1c:	e02b      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006e1e:	f001 f977 	bl	8008110 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006e22:	e028      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006e24:	f001 f956 	bl	80080d4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006e28:	e025      	b.n	8006e76 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e2a:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <_HandleIncomingPacket+0xd4>)
 8006e2c:	7e1b      	ldrb	r3, [r3, #24]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	1cfb      	adds	r3, r7, #3
 8006e32:	2201      	movs	r2, #1
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7ff fde5 	bl	8006a04 <SEGGER_RTT_ReadNoLock>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	dd15      	ble.n	8006e70 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f8c4 	bl	8007fd4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006e4c:	e010      	b.n	8006e70 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	da0e      	bge.n	8006e74 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <_HandleIncomingPacket+0xd4>)
 8006e58:	7e1b      	ldrb	r3, [r3, #24]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	1cfb      	adds	r3, r7, #3
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4619      	mov	r1, r3
 8006e62:	f7ff fdcf 	bl	8006a04 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006e66:	e005      	b.n	8006e74 <_HandleIncomingPacket+0xc8>
    }
  }
 8006e68:	bf00      	nop
 8006e6a:	e004      	b.n	8006e76 <_HandleIncomingPacket+0xca>
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <_HandleIncomingPacket+0xca>
      break;
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <_HandleIncomingPacket+0xca>
      break;
 8006e74:	bf00      	nop
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20014320 	.word	0x20014320

08006e84 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08c      	sub	sp, #48	; 0x30
 8006e88:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006e8e:	1d3b      	adds	r3, r7, #4
 8006e90:	3301      	adds	r3, #1
 8006e92:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e98:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006e9a:	695b      	ldr	r3, [r3, #20]
 8006e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9e:	e00b      	b.n	8006eb8 <_TrySendOverflowPacket+0x34>
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	1c59      	adds	r1, r3, #1
 8006ea8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eaa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eae:	b2d2      	uxtb	r2, r2
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	09db      	lsrs	r3, r3, #7
 8006eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	2b7f      	cmp	r3, #127	; 0x7f
 8006ebc:	d8f0      	bhi.n	8006ea0 <_TrySendOverflowPacket+0x1c>
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006ece:	4b25      	ldr	r3, [pc, #148]	; (8006f64 <_TrySendOverflowPacket+0xe0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	1ad3      	subs	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	623b      	str	r3, [r7, #32]
 8006ee6:	e00b      	b.n	8006f00 <_TrySendOverflowPacket+0x7c>
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	1c59      	adds	r1, r3, #1
 8006ef0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	09db      	lsrs	r3, r3, #7
 8006efe:	623b      	str	r3, [r7, #32]
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	2b7f      	cmp	r3, #127	; 0x7f
 8006f04:	d8f0      	bhi.n	8006ee8 <_TrySendOverflowPacket+0x64>
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006f0c:	6a3a      	ldr	r2, [r7, #32]
 8006f0e:	b2d2      	uxtb	r2, r2
 8006f10:	701a      	strb	r2, [r3, #0]
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006f16:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f18:	785b      	ldrb	r3, [r3, #1]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	69fa      	ldr	r2, [r7, #28]
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	461a      	mov	r2, r3
 8006f24:	1d3b      	adds	r3, r7, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	f7f9 f952 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006f36:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006f3c:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e004      	b.n	8006f54 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006f4a:	4b05      	ldr	r3, [pc, #20]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	4a03      	ldr	r2, [pc, #12]	; (8006f60 <_TrySendOverflowPacket+0xdc>)
 8006f52:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006f54:	693b      	ldr	r3, [r7, #16]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3730      	adds	r7, #48	; 0x30
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	20014320 	.word	0x20014320
 8006f64:	e0001004 	.word	0xe0001004

08006f68 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006f74:	4b6c      	ldr	r3, [pc, #432]	; (8007128 <_SendPacket+0x1c0>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d010      	beq.n	8006f9e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006f7c:	4b6a      	ldr	r3, [pc, #424]	; (8007128 <_SendPacket+0x1c0>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80a3 	beq.w	80070cc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006f86:	4b68      	ldr	r3, [pc, #416]	; (8007128 <_SendPacket+0x1c0>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d109      	bne.n	8006fa2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006f8e:	f7ff ff79 	bl	8006e84 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006f92:	4b65      	ldr	r3, [pc, #404]	; (8007128 <_SendPacket+0x1c0>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	f040 809a 	bne.w	80070d0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006f9c:	e001      	b.n	8006fa2 <_SendPacket+0x3a>
    goto Send;
 8006f9e:	bf00      	nop
 8006fa0:	e000      	b.n	8006fa4 <_SendPacket+0x3c>
Send:
 8006fa2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b1f      	cmp	r3, #31
 8006fa8:	d809      	bhi.n	8006fbe <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006faa:	4b5f      	ldr	r3, [pc, #380]	; (8007128 <_SendPacket+0x1c0>)
 8006fac:	69da      	ldr	r2, [r3, #28]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 808b 	bne.w	80070d4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b17      	cmp	r3, #23
 8006fc2:	d807      	bhi.n	8006fd4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	e03d      	b.n	8007050 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe0:	d912      	bls.n	8007008 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	09da      	lsrs	r2, r3, #7
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	3a01      	subs	r2, #1
 8006ffa:	60fa      	str	r2, [r7, #12]
 8006ffc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007000:	b2da      	uxtb	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e006      	b.n	8007016 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3b01      	subs	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b7f      	cmp	r3, #127	; 0x7f
 800701a:	d912      	bls.n	8007042 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	09da      	lsrs	r2, r3, #7
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3b01      	subs	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	b2db      	uxtb	r3, r3
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	3a01      	subs	r2, #1
 8007034:	60fa      	str	r2, [r7, #12]
 8007036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800703a:	b2da      	uxtb	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	701a      	strb	r2, [r3, #0]
 8007040:	e006      	b.n	8007050 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3b01      	subs	r3, #1
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007050:	4b36      	ldr	r3, [pc, #216]	; (800712c <_SendPacket+0x1c4>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007056:	4b34      	ldr	r3, [pc, #208]	; (8007128 <_SendPacket+0x1c0>)
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	623b      	str	r3, [r7, #32]
 8007068:	e00b      	b.n	8007082 <_SendPacket+0x11a>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	1c59      	adds	r1, r3, #1
 8007072:	6279      	str	r1, [r7, #36]	; 0x24
 8007074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	09db      	lsrs	r3, r3, #7
 8007080:	623b      	str	r3, [r7, #32]
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	2b7f      	cmp	r3, #127	; 0x7f
 8007086:	d8f0      	bhi.n	800706a <_SendPacket+0x102>
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	627a      	str	r2, [r7, #36]	; 0x24
 800708e:	6a3a      	ldr	r2, [r7, #32]
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007098:	4b23      	ldr	r3, [pc, #140]	; (8007128 <_SendPacket+0x1c0>)
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	4618      	mov	r0, r3
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	68f9      	ldr	r1, [r7, #12]
 80070a8:	f7f9 f892 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80070ac:	4603      	mov	r3, r0
 80070ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80070b6:	4a1c      	ldr	r2, [pc, #112]	; (8007128 <_SendPacket+0x1c0>)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	60d3      	str	r3, [r2, #12]
 80070bc:	e00b      	b.n	80070d6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <_SendPacket+0x1c0>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4b18      	ldr	r3, [pc, #96]	; (8007128 <_SendPacket+0x1c0>)
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e004      	b.n	80070d6 <_SendPacket+0x16e>
    goto SendDone;
 80070cc:	bf00      	nop
 80070ce:	e002      	b.n	80070d6 <_SendPacket+0x16e>
      goto SendDone;
 80070d0:	bf00      	nop
 80070d2:	e000      	b.n	80070d6 <_SendPacket+0x16e>
      goto SendDone;
 80070d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <_SendPacket+0x1c0>)
 80070d8:	7e1b      	ldrb	r3, [r3, #24]
 80070da:	4619      	mov	r1, r3
 80070dc:	4a14      	ldr	r2, [pc, #80]	; (8007130 <_SendPacket+0x1c8>)
 80070de:	460b      	mov	r3, r1
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	440b      	add	r3, r1
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4413      	add	r3, r2
 80070e8:	336c      	adds	r3, #108	; 0x6c
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <_SendPacket+0x1c0>)
 80070ee:	7e1b      	ldrb	r3, [r3, #24]
 80070f0:	4618      	mov	r0, r3
 80070f2:	490f      	ldr	r1, [pc, #60]	; (8007130 <_SendPacket+0x1c8>)
 80070f4:	4603      	mov	r3, r0
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	4403      	add	r3, r0
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	440b      	add	r3, r1
 80070fe:	3370      	adds	r3, #112	; 0x70
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d00b      	beq.n	800711e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <_SendPacket+0x1c0>)
 8007108:	789b      	ldrb	r3, [r3, #2]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d107      	bne.n	800711e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800710e:	4b06      	ldr	r3, [pc, #24]	; (8007128 <_SendPacket+0x1c0>)
 8007110:	2201      	movs	r2, #1
 8007112:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007114:	f7ff fe4a 	bl	8006dac <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007118:	4b03      	ldr	r3, [pc, #12]	; (8007128 <_SendPacket+0x1c0>)
 800711a:	2200      	movs	r2, #0
 800711c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800711e:	bf00      	nop
 8007120:	3728      	adds	r7, #40	; 0x28
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20014320 	.word	0x20014320
 800712c:	e0001004 	.word	0xe0001004
 8007130:	200145c0 	.word	0x200145c0

08007134 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af02      	add	r7, sp, #8
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007142:	2300      	movs	r3, #0
 8007144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007148:	4917      	ldr	r1, [pc, #92]	; (80071a8 <SEGGER_SYSVIEW_Init+0x74>)
 800714a:	4818      	ldr	r0, [pc, #96]	; (80071ac <SEGGER_SYSVIEW_Init+0x78>)
 800714c:	f7ff fce0 	bl	8006b10 <SEGGER_RTT_AllocUpBuffer>
 8007150:	4603      	mov	r3, r0
 8007152:	b2da      	uxtb	r2, r3
 8007154:	4b16      	ldr	r3, [pc, #88]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007156:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007158:	4b15      	ldr	r3, [pc, #84]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800715a:	785a      	ldrb	r2, [r3, #1]
 800715c:	4b14      	ldr	r3, [pc, #80]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800715e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007160:	4b13      	ldr	r3, [pc, #76]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007162:	7e1b      	ldrb	r3, [r3, #24]
 8007164:	4618      	mov	r0, r3
 8007166:	2300      	movs	r3, #0
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	2308      	movs	r3, #8
 800716c:	4a11      	ldr	r2, [pc, #68]	; (80071b4 <SEGGER_SYSVIEW_Init+0x80>)
 800716e:	490f      	ldr	r1, [pc, #60]	; (80071ac <SEGGER_SYSVIEW_Init+0x78>)
 8007170:	f7ff fd52 	bl	8006c18 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007176:	2200      	movs	r2, #0
 8007178:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <SEGGER_SYSVIEW_Init+0x84>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007180:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007182:	4a0b      	ldr	r2, [pc, #44]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800718e:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007194:	4a06      	ldr	r2, [pc, #24]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800719a:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	20013318 	.word	0x20013318
 80071ac:	08008d04 	.word	0x08008d04
 80071b0:	20014320 	.word	0x20014320
 80071b4:	20014318 	.word	0x20014318
 80071b8:	e0001004 	.word	0xe0001004

080071bc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6113      	str	r3, [r2, #16]
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20014320 	.word	0x20014320

080071dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071e4:	f3ef 8311 	mrs	r3, BASEPRI
 80071e8:	f04f 0120 	mov.w	r1, #32
 80071ec:	f381 8811 	msr	BASEPRI, r1
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	4808      	ldr	r0, [pc, #32]	; (8007214 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80071f4:	f7ff fdcd 	bl	8006d92 <_PreparePacket>
 80071f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	68b8      	ldr	r0, [r7, #8]
 8007200:	f7ff feb2 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f383 8811 	msr	BASEPRI, r3
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	20014350 	.word	0x20014350

08007218 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007222:	f3ef 8311 	mrs	r3, BASEPRI
 8007226:	f04f 0120 	mov.w	r1, #32
 800722a:	f381 8811 	msr	BASEPRI, r1
 800722e:	617b      	str	r3, [r7, #20]
 8007230:	4816      	ldr	r0, [pc, #88]	; (800728c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8007232:	f7ff fdae 	bl	8006d92 <_PreparePacket>
 8007236:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	61fb      	str	r3, [r7, #28]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_RecordU32+0x46>
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	61f9      	str	r1, [r7, #28]
 8007250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b7f      	cmp	r3, #127	; 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	61fa      	str	r2, [r7, #28]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6938      	ldr	r0, [r7, #16]
 800727a:	f7ff fe75 	bl	8006f68 <_SendPacket>
  RECORD_END();
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f383 8811 	msr	BASEPRI, r3
}
 8007284:	bf00      	nop
 8007286:	3720      	adds	r7, #32
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	20014350 	.word	0x20014350

08007290 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b08c      	sub	sp, #48	; 0x30
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800729c:	f3ef 8311 	mrs	r3, BASEPRI
 80072a0:	f04f 0120 	mov.w	r1, #32
 80072a4:	f381 8811 	msr	BASEPRI, r1
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	4825      	ldr	r0, [pc, #148]	; (8007340 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80072ac:	f7ff fd71 	bl	8006d92 <_PreparePacket>
 80072b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072be:	e00b      	b.n	80072d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	1c59      	adds	r1, r3, #1
 80072c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80072ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	09db      	lsrs	r3, r3, #7
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	2b7f      	cmp	r3, #127	; 0x7f
 80072dc:	d8f0      	bhi.n	80072c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	1c5a      	adds	r2, r3, #1
 80072e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	623b      	str	r3, [r7, #32]
 80072f6:	e00b      	b.n	8007310 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80072f8:	6a3b      	ldr	r3, [r7, #32]
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	1c59      	adds	r1, r3, #1
 8007300:	6279      	str	r1, [r7, #36]	; 0x24
 8007302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	09db      	lsrs	r3, r3, #7
 800730e:	623b      	str	r3, [r7, #32]
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	2b7f      	cmp	r3, #127	; 0x7f
 8007314:	d8f0      	bhi.n	80072f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	627a      	str	r2, [r7, #36]	; 0x24
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	69b8      	ldr	r0, [r7, #24]
 800732c:	f7ff fe1c 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	f383 8811 	msr	BASEPRI, r3
}
 8007336:	bf00      	nop
 8007338:	3730      	adds	r7, #48	; 0x30
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20014350 	.word	0x20014350

08007344 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b08e      	sub	sp, #56	; 0x38
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
 8007350:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8007352:	f3ef 8311 	mrs	r3, BASEPRI
 8007356:	f04f 0120 	mov.w	r1, #32
 800735a:	f381 8811 	msr	BASEPRI, r1
 800735e:	61fb      	str	r3, [r7, #28]
 8007360:	4832      	ldr	r0, [pc, #200]	; (800742c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8007362:	f7ff fd16 	bl	8006d92 <_PreparePacket>
 8007366:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	633b      	str	r3, [r7, #48]	; 0x30
 8007374:	e00b      	b.n	800738e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	b2da      	uxtb	r2, r3
 800737a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800737c:	1c59      	adds	r1, r3, #1
 800737e:	6379      	str	r1, [r7, #52]	; 0x34
 8007380:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	09db      	lsrs	r3, r3, #7
 800738c:	633b      	str	r3, [r7, #48]	; 0x30
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	2b7f      	cmp	r3, #127	; 0x7f
 8007392:	d8f0      	bhi.n	8007376 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8007394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	637a      	str	r2, [r7, #52]	; 0x34
 800739a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800739c:	b2d2      	uxtb	r2, r2
 800739e:	701a      	strb	r2, [r3, #0]
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ac:	e00b      	b.n	80073c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80073b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	09db      	lsrs	r3, r3, #7
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	2b7f      	cmp	r3, #127	; 0x7f
 80073ca:	d8f0      	bhi.n	80073ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80073cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	623b      	str	r3, [r7, #32]
 80073e4:	e00b      	b.n	80073fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	1c59      	adds	r1, r3, #1
 80073ee:	6279      	str	r1, [r7, #36]	; 0x24
 80073f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	09db      	lsrs	r3, r3, #7
 80073fc:	623b      	str	r3, [r7, #32]
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	2b7f      	cmp	r3, #127	; 0x7f
 8007402:	d8f0      	bhi.n	80073e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	627a      	str	r2, [r7, #36]	; 0x24
 800740a:	6a3a      	ldr	r2, [r7, #32]
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	69b8      	ldr	r0, [r7, #24]
 800741a:	f7ff fda5 	bl	8006f68 <_SendPacket>
  RECORD_END();
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f383 8811 	msr	BASEPRI, r3
}
 8007424:	bf00      	nop
 8007426:	3738      	adds	r7, #56	; 0x38
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20014350 	.word	0x20014350

08007430 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007430:	b580      	push	{r7, lr}
 8007432:	b090      	sub	sp, #64	; 0x40
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800743e:	f3ef 8311 	mrs	r3, BASEPRI
 8007442:	f04f 0120 	mov.w	r1, #32
 8007446:	f381 8811 	msr	BASEPRI, r1
 800744a:	61fb      	str	r3, [r7, #28]
 800744c:	4840      	ldr	r0, [pc, #256]	; (8007550 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800744e:	f7ff fca0 	bl	8006d92 <_PreparePacket>
 8007452:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007460:	e00b      	b.n	800747a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8007462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007464:	b2da      	uxtb	r2, r3
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007468:	1c59      	adds	r1, r3, #1
 800746a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800746c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]
 8007474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007476:	09db      	lsrs	r3, r3, #7
 8007478:	63bb      	str	r3, [r7, #56]	; 0x38
 800747a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747c:	2b7f      	cmp	r3, #127	; 0x7f
 800747e:	d8f0      	bhi.n	8007462 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	633b      	str	r3, [r7, #48]	; 0x30
 8007498:	e00b      	b.n	80074b2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	b2da      	uxtb	r2, r3
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	1c59      	adds	r1, r3, #1
 80074a2:	6379      	str	r1, [r7, #52]	; 0x34
 80074a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074a8:	b2d2      	uxtb	r2, r2
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ae:	09db      	lsrs	r3, r3, #7
 80074b0:	633b      	str	r3, [r7, #48]	; 0x30
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	2b7f      	cmp	r3, #127	; 0x7f
 80074b6:	d8f0      	bhi.n	800749a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	637a      	str	r2, [r7, #52]	; 0x34
 80074be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d0:	e00b      	b.n	80074ea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	1c59      	adds	r1, r3, #1
 80074da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80074dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074e0:	b2d2      	uxtb	r2, r2
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	09db      	lsrs	r3, r3, #7
 80074e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	2b7f      	cmp	r3, #127	; 0x7f
 80074ee:	d8f0      	bhi.n	80074d2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
 8007504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007506:	623b      	str	r3, [r7, #32]
 8007508:	e00b      	b.n	8007522 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	b2da      	uxtb	r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007510:	1c59      	adds	r1, r3, #1
 8007512:	6279      	str	r1, [r7, #36]	; 0x24
 8007514:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	09db      	lsrs	r3, r3, #7
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	2b7f      	cmp	r3, #127	; 0x7f
 8007526:	d8f0      	bhi.n	800750a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	627a      	str	r2, [r7, #36]	; 0x24
 800752e:	6a3a      	ldr	r2, [r7, #32]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	6979      	ldr	r1, [r7, #20]
 800753c:	69b8      	ldr	r0, [r7, #24]
 800753e:	f7ff fd13 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	f383 8811 	msr	BASEPRI, r3
}
 8007548:	bf00      	nop
 800754a:	3740      	adds	r7, #64	; 0x40
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20014350 	.word	0x20014350

08007554 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b092      	sub	sp, #72	; 0x48
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8007562:	f3ef 8311 	mrs	r3, BASEPRI
 8007566:	f04f 0120 	mov.w	r1, #32
 800756a:	f381 8811 	msr	BASEPRI, r1
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	484e      	ldr	r0, [pc, #312]	; (80076ac <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8007572:	f7ff fc0e 	bl	8006d92 <_PreparePacket>
 8007576:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	647b      	str	r3, [r7, #68]	; 0x44
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	643b      	str	r3, [r7, #64]	; 0x40
 8007584:	e00b      	b.n	800759e <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8007586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800758c:	1c59      	adds	r1, r3, #1
 800758e:	6479      	str	r1, [r7, #68]	; 0x44
 8007590:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
 8007598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759a:	09db      	lsrs	r3, r3, #7
 800759c:	643b      	str	r3, [r7, #64]	; 0x40
 800759e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a0:	2b7f      	cmp	r3, #127	; 0x7f
 80075a2:	d8f0      	bhi.n	8007586 <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	647a      	str	r2, [r7, #68]	; 0x44
 80075aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80075bc:	e00b      	b.n	80075d6 <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c4:	1c59      	adds	r1, r3, #1
 80075c6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80075c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075cc:	b2d2      	uxtb	r2, r2
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	09db      	lsrs	r3, r3, #7
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	2b7f      	cmp	r3, #127	; 0x7f
 80075da:	d8f0      	bhi.n	80075be <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80075e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]
 80075e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	637b      	str	r3, [r7, #52]	; 0x34
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
 80075f4:	e00b      	b.n	800760e <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	1c59      	adds	r1, r3, #1
 80075fe:	6379      	str	r1, [r7, #52]	; 0x34
 8007600:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	09db      	lsrs	r3, r3, #7
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	2b7f      	cmp	r3, #127	; 0x7f
 8007612:	d8f0      	bhi.n	80075f6 <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8007614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	637a      	str	r2, [r7, #52]	; 0x34
 800761a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
 800762c:	e00b      	b.n	8007646 <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	b2da      	uxtb	r2, r3
 8007632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007634:	1c59      	adds	r1, r3, #1
 8007636:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007638:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	2b7f      	cmp	r3, #127	; 0x7f
 800764a:	d8f0      	bhi.n	800762e <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	1c5a      	adds	r2, r3, #1
 8007650:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
 8007660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	e00b      	b.n	800767e <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	b2da      	uxtb	r2, r3
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	1c59      	adds	r1, r3, #1
 800766e:	6279      	str	r1, [r7, #36]	; 0x24
 8007670:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007674:	b2d2      	uxtb	r2, r2
 8007676:	701a      	strb	r2, [r3, #0]
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	09db      	lsrs	r3, r3, #7
 800767c:	623b      	str	r3, [r7, #32]
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	2b7f      	cmp	r3, #127	; 0x7f
 8007682:	d8f0      	bhi.n	8007666 <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	627a      	str	r2, [r7, #36]	; 0x24
 800768a:	6a3a      	ldr	r2, [r7, #32]
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	6979      	ldr	r1, [r7, #20]
 8007698:	69b8      	ldr	r0, [r7, #24]
 800769a:	f7ff fc65 	bl	8006f68 <_SendPacket>
  RECORD_END();
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f383 8811 	msr	BASEPRI, r3
}
 80076a4:	bf00      	nop
 80076a6:	3748      	adds	r7, #72	; 0x48
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20014350 	.word	0x20014350

080076b0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08c      	sub	sp, #48	; 0x30
 80076b4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80076b6:	4b58      	ldr	r3, [pc, #352]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80076bc:	f3ef 8311 	mrs	r3, BASEPRI
 80076c0:	f04f 0120 	mov.w	r1, #32
 80076c4:	f381 8811 	msr	BASEPRI, r1
 80076c8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80076ca:	4b53      	ldr	r3, [pc, #332]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 80076cc:	785b      	ldrb	r3, [r3, #1]
 80076ce:	220a      	movs	r2, #10
 80076d0:	4952      	ldr	r1, [pc, #328]	; (800781c <SEGGER_SYSVIEW_Start+0x16c>)
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7f8 fd7c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80076de:	200a      	movs	r0, #10
 80076e0:	f7ff fd7c 	bl	80071dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80076e4:	f3ef 8311 	mrs	r3, BASEPRI
 80076e8:	f04f 0120 	mov.w	r1, #32
 80076ec:	f381 8811 	msr	BASEPRI, r1
 80076f0:	60bb      	str	r3, [r7, #8]
 80076f2:	484b      	ldr	r0, [pc, #300]	; (8007820 <SEGGER_SYSVIEW_Start+0x170>)
 80076f4:	f7ff fb4d 	bl	8006d92 <_PreparePacket>
 80076f8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007702:	4b45      	ldr	r3, [pc, #276]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
 8007708:	e00b      	b.n	8007722 <SEGGER_SYSVIEW_Start+0x72>
 800770a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770c:	b2da      	uxtb	r2, r3
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	09db      	lsrs	r3, r3, #7
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	2b7f      	cmp	r3, #127	; 0x7f
 8007726:	d8f0      	bhi.n	800770a <SEGGER_SYSVIEW_Start+0x5a>
 8007728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772a:	1c5a      	adds	r2, r3, #1
 800772c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800772e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007730:	b2d2      	uxtb	r2, r2
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007736:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
 800773c:	4b36      	ldr	r3, [pc, #216]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	623b      	str	r3, [r7, #32]
 8007742:	e00b      	b.n	800775c <SEGGER_SYSVIEW_Start+0xac>
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	b2da      	uxtb	r2, r3
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	6279      	str	r1, [r7, #36]	; 0x24
 800774e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	09db      	lsrs	r3, r3, #7
 800775a:	623b      	str	r3, [r7, #32]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	2b7f      	cmp	r3, #127	; 0x7f
 8007760:	d8f0      	bhi.n	8007744 <SEGGER_SYSVIEW_Start+0x94>
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	627a      	str	r2, [r7, #36]	; 0x24
 8007768:	6a3a      	ldr	r2, [r7, #32]
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	4b28      	ldr	r3, [pc, #160]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	61bb      	str	r3, [r7, #24]
 800777c:	e00b      	b.n	8007796 <SEGGER_SYSVIEW_Start+0xe6>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	1c59      	adds	r1, r3, #1
 8007786:	61f9      	str	r1, [r7, #28]
 8007788:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	09db      	lsrs	r3, r3, #7
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b7f      	cmp	r3, #127	; 0x7f
 800779a:	d8f0      	bhi.n	800777e <SEGGER_SYSVIEW_Start+0xce>
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	61fa      	str	r2, [r7, #28]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	e00b      	b.n	80077ce <SEGGER_SYSVIEW_Start+0x11e>
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	1c59      	adds	r1, r3, #1
 80077be:	6179      	str	r1, [r7, #20]
 80077c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	09db      	lsrs	r3, r3, #7
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2b7f      	cmp	r3, #127	; 0x7f
 80077d2:	d8f0      	bhi.n	80077b6 <SEGGER_SYSVIEW_Start+0x106>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	617a      	str	r2, [r7, #20]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	b2d2      	uxtb	r2, r2
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80077e4:	2218      	movs	r2, #24
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fbbd 	bl	8006f68 <_SendPacket>
      RECORD_END();
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80077f4:	4b08      	ldr	r3, [pc, #32]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <SEGGER_SYSVIEW_Start+0x168>)
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8007802:	f000 f9eb 	bl	8007bdc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8007806:	f000 f9b1 	bl	8007b6c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800780a:	f000 fc81 	bl	8008110 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800780e:	bf00      	nop
 8007810:	3730      	adds	r7, #48	; 0x30
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20014320 	.word	0x20014320
 800781c:	08008d2c 	.word	0x08008d2c
 8007820:	20014350 	.word	0x20014350

08007824 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800782a:	f3ef 8311 	mrs	r3, BASEPRI
 800782e:	f04f 0120 	mov.w	r1, #32
 8007832:	f381 8811 	msr	BASEPRI, r1
 8007836:	607b      	str	r3, [r7, #4]
 8007838:	480b      	ldr	r0, [pc, #44]	; (8007868 <SEGGER_SYSVIEW_Stop+0x44>)
 800783a:	f7ff faaa 	bl	8006d92 <_PreparePacket>
 800783e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <SEGGER_SYSVIEW_Stop+0x48>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d007      	beq.n	8007858 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007848:	220b      	movs	r2, #11
 800784a:	6839      	ldr	r1, [r7, #0]
 800784c:	6838      	ldr	r0, [r7, #0]
 800784e:	f7ff fb8b 	bl	8006f68 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8007852:	4b06      	ldr	r3, [pc, #24]	; (800786c <SEGGER_SYSVIEW_Stop+0x48>)
 8007854:	2200      	movs	r2, #0
 8007856:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f383 8811 	msr	BASEPRI, r3
}
 800785e:	bf00      	nop
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20014350 	.word	0x20014350
 800786c:	20014320 	.word	0x20014320

08007870 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8007870:	b580      	push	{r7, lr}
 8007872:	b08c      	sub	sp, #48	; 0x30
 8007874:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007876:	f3ef 8311 	mrs	r3, BASEPRI
 800787a:	f04f 0120 	mov.w	r1, #32
 800787e:	f381 8811 	msr	BASEPRI, r1
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	4845      	ldr	r0, [pc, #276]	; (800799c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007886:	f7ff fa84 	bl	8006d92 <_PreparePacket>
 800788a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007894:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	62bb      	str	r3, [r7, #40]	; 0x28
 800789a:	e00b      	b.n	80078b4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	1c59      	adds	r1, r3, #1
 80078a4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	09db      	lsrs	r3, r3, #7
 80078b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80078b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b6:	2b7f      	cmp	r3, #127	; 0x7f
 80078b8:	d8f0      	bhi.n	800789c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	1c5a      	adds	r2, r3, #1
 80078be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
 80078ce:	4b34      	ldr	r3, [pc, #208]	; (80079a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	623b      	str	r3, [r7, #32]
 80078d4:	e00b      	b.n	80078ee <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80078d6:	6a3b      	ldr	r3, [r7, #32]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	1c59      	adds	r1, r3, #1
 80078de:	6279      	str	r1, [r7, #36]	; 0x24
 80078e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	09db      	lsrs	r3, r3, #7
 80078ec:	623b      	str	r3, [r7, #32]
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	2b7f      	cmp	r3, #127	; 0x7f
 80078f2:	d8f0      	bhi.n	80078d6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	627a      	str	r2, [r7, #36]	; 0x24
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	b2d2      	uxtb	r2, r2
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	61fb      	str	r3, [r7, #28]
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	e00b      	b.n	8007928 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	b2da      	uxtb	r2, r3
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	1c59      	adds	r1, r3, #1
 8007918:	61f9      	str	r1, [r7, #28]
 800791a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800791e:	b2d2      	uxtb	r2, r2
 8007920:	701a      	strb	r2, [r3, #0]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	09db      	lsrs	r3, r3, #7
 8007926:	61bb      	str	r3, [r7, #24]
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	2b7f      	cmp	r3, #127	; 0x7f
 800792c:	d8f0      	bhi.n	8007910 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	61fa      	str	r2, [r7, #28]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	b2d2      	uxtb	r2, r2
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	617b      	str	r3, [r7, #20]
 8007942:	2300      	movs	r3, #0
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	e00b      	b.n	8007960 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	b2da      	uxtb	r2, r3
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	1c59      	adds	r1, r3, #1
 8007950:	6179      	str	r1, [r7, #20]
 8007952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	09db      	lsrs	r3, r3, #7
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b7f      	cmp	r3, #127	; 0x7f
 8007964:	d8f0      	bhi.n	8007948 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	617a      	str	r2, [r7, #20]
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	b2d2      	uxtb	r2, r2
 8007970:	701a      	strb	r2, [r3, #0]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007976:	2218      	movs	r2, #24
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	68b8      	ldr	r0, [r7, #8]
 800797c:	f7ff faf4 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007986:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	4798      	blx	r3
  }
}
 8007994:	bf00      	nop
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20014350 	.word	0x20014350
 80079a0:	20014320 	.word	0x20014320

080079a4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b092      	sub	sp, #72	; 0x48
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80079ac:	f3ef 8311 	mrs	r3, BASEPRI
 80079b0:	f04f 0120 	mov.w	r1, #32
 80079b4:	f381 8811 	msr	BASEPRI, r1
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	486a      	ldr	r0, [pc, #424]	; (8007b64 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80079bc:	f7ff f9e9 	bl	8006d92 <_PreparePacket>
 80079c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	647b      	str	r3, [r7, #68]	; 0x44
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	4b66      	ldr	r3, [pc, #408]	; (8007b68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	643b      	str	r3, [r7, #64]	; 0x40
 80079d6:	e00b      	b.n	80079f0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80079d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079de:	1c59      	adds	r1, r3, #1
 80079e0:	6479      	str	r1, [r7, #68]	; 0x44
 80079e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079e6:	b2d2      	uxtb	r2, r2
 80079e8:	701a      	strb	r2, [r3, #0]
 80079ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ec:	09db      	lsrs	r3, r3, #7
 80079ee:	643b      	str	r3, [r7, #64]	; 0x40
 80079f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079f2:	2b7f      	cmp	r3, #127	; 0x7f
 80079f4:	d8f0      	bhi.n	80079d8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80079f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	647a      	str	r2, [r7, #68]	; 0x44
 80079fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a10:	e00b      	b.n	8007a2a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	1c59      	adds	r1, r3, #1
 8007a1a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007a1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	09db      	lsrs	r3, r3, #7
 8007a28:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2e:	d8f0      	bhi.n	8007a12 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a38:	b2d2      	uxtb	r2, r2
 8007a3a:	701a      	strb	r2, [r3, #0]
 8007a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	4619      	mov	r1, r3
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff f955 	bl	8006cf8 <_EncodeStr>
 8007a4e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007a50:	2209      	movs	r2, #9
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	6938      	ldr	r0, [r7, #16]
 8007a56:	f7ff fa87 	bl	8006f68 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	4b40      	ldr	r3, [pc, #256]	; (8007b68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6e:	e00b      	b.n	8007a88 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	1c59      	adds	r1, r3, #1
 8007a78:	6379      	str	r1, [r7, #52]	; 0x34
 8007a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	09db      	lsrs	r3, r3, #7
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a8c:	d8f0      	bhi.n	8007a70 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	637a      	str	r2, [r7, #52]	; 0x34
 8007a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa8:	e00b      	b.n	8007ac2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	1c59      	adds	r1, r3, #1
 8007ab2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007ab4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	09db      	lsrs	r3, r3, #7
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ac6:	d8f0      	bhi.n	8007aaa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ad0:	b2d2      	uxtb	r2, r2
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	623b      	str	r3, [r7, #32]
 8007ae2:	e00b      	b.n	8007afc <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	6279      	str	r1, [r7, #36]	; 0x24
 8007aee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	09db      	lsrs	r3, r3, #7
 8007afa:	623b      	str	r3, [r7, #32]
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	2b7f      	cmp	r3, #127	; 0x7f
 8007b00:	d8f0      	bhi.n	8007ae4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	627a      	str	r2, [r7, #36]	; 0x24
 8007b08:	6a3a      	ldr	r2, [r7, #32]
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	2300      	movs	r3, #0
 8007b18:	61bb      	str	r3, [r7, #24]
 8007b1a:	e00b      	b.n	8007b34 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	1c59      	adds	r1, r3, #1
 8007b24:	61f9      	str	r1, [r7, #28]
 8007b26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007b2a:	b2d2      	uxtb	r2, r2
 8007b2c:	701a      	strb	r2, [r3, #0]
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	09db      	lsrs	r3, r3, #7
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b7f      	cmp	r3, #127	; 0x7f
 8007b38:	d8f0      	bhi.n	8007b1c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	61fa      	str	r2, [r7, #28]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007b4a:	2215      	movs	r2, #21
 8007b4c:	68f9      	ldr	r1, [r7, #12]
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f7ff fa0a 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f383 8811 	msr	BASEPRI, r3
}
 8007b5a:	bf00      	nop
 8007b5c:	3748      	adds	r7, #72	; 0x48
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20014350 	.word	0x20014350
 8007b68:	20014320 	.word	0x20014320

08007b6c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d008      	beq.n	8007b8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4798      	blx	r3
  }
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20014320 	.word	0x20014320

08007b94 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8007ba0:	f04f 0120 	mov.w	r1, #32
 8007ba4:	f381 8811 	msr	BASEPRI, r1
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	480b      	ldr	r0, [pc, #44]	; (8007bd8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007bac:	f7ff f8f1 	bl	8006d92 <_PreparePacket>
 8007bb0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	6938      	ldr	r0, [r7, #16]
 8007bb8:	f7ff f89e 	bl	8006cf8 <_EncodeStr>
 8007bbc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007bbe:	220e      	movs	r2, #14
 8007bc0:	68f9      	ldr	r1, [r7, #12]
 8007bc2:	6938      	ldr	r0, [r7, #16]
 8007bc4:	f7ff f9d0 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	f383 8811 	msr	BASEPRI, r3
}
 8007bce:	bf00      	nop
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20014350 	.word	0x20014350

08007bdc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007bdc:	b590      	push	{r4, r7, lr}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007be2:	4b14      	ldr	r3, [pc, #80]	; (8007c34 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d019      	beq.n	8007c1e <SEGGER_SYSVIEW_RecordSystime+0x42>
 8007bea:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d014      	beq.n	8007c1e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8007bf6:	6a1b      	ldr	r3, [r3, #32]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4798      	blx	r3
 8007bfc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007c00:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007c02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	f04f 0400 	mov.w	r4, #0
 8007c0e:	0013      	movs	r3, r2
 8007c10:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007c12:	461a      	mov	r2, r3
 8007c14:	4601      	mov	r1, r0
 8007c16:	200d      	movs	r0, #13
 8007c18:	f7ff fb3a 	bl	8007290 <SEGGER_SYSVIEW_RecordU32x2>
 8007c1c:	e005      	b.n	8007c2a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4619      	mov	r1, r3
 8007c24:	200c      	movs	r0, #12
 8007c26:	f7ff faf7 	bl	8007218 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd90      	pop	{r4, r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20014320 	.word	0x20014320
 8007c38:	e0001004 	.word	0xe0001004

08007c3c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c42:	f3ef 8311 	mrs	r3, BASEPRI
 8007c46:	f04f 0120 	mov.w	r1, #32
 8007c4a:	f381 8811 	msr	BASEPRI, r1
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	4819      	ldr	r0, [pc, #100]	; (8007cb8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007c52:	f7ff f89e 	bl	8006d92 <_PreparePacket>
 8007c56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007c5c:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c64:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	613b      	str	r3, [r7, #16]
 8007c6e:	e00b      	b.n	8007c88 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	1c59      	adds	r1, r3, #1
 8007c78:	6179      	str	r1, [r7, #20]
 8007c7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	09db      	lsrs	r3, r3, #7
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b7f      	cmp	r3, #127	; 0x7f
 8007c8c:	d8f0      	bhi.n	8007c70 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	617a      	str	r2, [r7, #20]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	6879      	ldr	r1, [r7, #4]
 8007ca2:	68b8      	ldr	r0, [r7, #8]
 8007ca4:	f7ff f960 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f383 8811 	msr	BASEPRI, r3
}
 8007cae:	bf00      	nop
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20014350 	.word	0x20014350
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8007cca:	f04f 0120 	mov.w	r1, #32
 8007cce:	f381 8811 	msr	BASEPRI, r1
 8007cd2:	607b      	str	r3, [r7, #4]
 8007cd4:	4807      	ldr	r0, [pc, #28]	; (8007cf4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007cd6:	f7ff f85c 	bl	8006d92 <_PreparePacket>
 8007cda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007cdc:	2203      	movs	r2, #3
 8007cde:	6839      	ldr	r1, [r7, #0]
 8007ce0:	6838      	ldr	r0, [r7, #0]
 8007ce2:	f7ff f941 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f383 8811 	msr	BASEPRI, r3
}
 8007cec:	bf00      	nop
 8007cee:	3708      	adds	r7, #8
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20014350 	.word	0x20014350

08007cf8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8007d02:	f04f 0120 	mov.w	r1, #32
 8007d06:	f381 8811 	msr	BASEPRI, r1
 8007d0a:	607b      	str	r3, [r7, #4]
 8007d0c:	4807      	ldr	r0, [pc, #28]	; (8007d2c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007d0e:	f7ff f840 	bl	8006d92 <_PreparePacket>
 8007d12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007d14:	2212      	movs	r2, #18
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6838      	ldr	r0, [r7, #0]
 8007d1a:	f7ff f925 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f383 8811 	msr	BASEPRI, r3
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20014350 	.word	0x20014350

08007d30 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007d36:	f3ef 8311 	mrs	r3, BASEPRI
 8007d3a:	f04f 0120 	mov.w	r1, #32
 8007d3e:	f381 8811 	msr	BASEPRI, r1
 8007d42:	607b      	str	r3, [r7, #4]
 8007d44:	4807      	ldr	r0, [pc, #28]	; (8007d64 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007d46:	f7ff f824 	bl	8006d92 <_PreparePacket>
 8007d4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007d4c:	2211      	movs	r2, #17
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6838      	ldr	r0, [r7, #0]
 8007d52:	f7ff f909 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f383 8811 	msr	BASEPRI, r3
}
 8007d5c:	bf00      	nop
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20014350 	.word	0x20014350

08007d68 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007d70:	f3ef 8311 	mrs	r3, BASEPRI
 8007d74:	f04f 0120 	mov.w	r1, #32
 8007d78:	f381 8811 	msr	BASEPRI, r1
 8007d7c:	617b      	str	r3, [r7, #20]
 8007d7e:	4819      	ldr	r0, [pc, #100]	; (8007de4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007d80:	f7ff f807 	bl	8006d92 <_PreparePacket>
 8007d84:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d8a:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e00b      	b.n	8007db6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	1c59      	adds	r1, r3, #1
 8007da6:	61f9      	str	r1, [r7, #28]
 8007da8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	09db      	lsrs	r3, r3, #7
 8007db4:	61bb      	str	r3, [r7, #24]
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b7f      	cmp	r3, #127	; 0x7f
 8007dba:	d8f0      	bhi.n	8007d9e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	61fa      	str	r2, [r7, #28]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007dcc:	2208      	movs	r2, #8
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f7ff f8c9 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f383 8811 	msr	BASEPRI, r3
}
 8007ddc:	bf00      	nop
 8007dde:	3720      	adds	r7, #32
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20014350 	.word	0x20014350
 8007de8:	20014320 	.word	0x20014320

08007dec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007df4:	f3ef 8311 	mrs	r3, BASEPRI
 8007df8:	f04f 0120 	mov.w	r1, #32
 8007dfc:	f381 8811 	msr	BASEPRI, r1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	4819      	ldr	r0, [pc, #100]	; (8007e68 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007e04:	f7fe ffc5 	bl	8006d92 <_PreparePacket>
 8007e08:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e0e:	4b17      	ldr	r3, [pc, #92]	; (8007e6c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	1ad3      	subs	r3, r2, r3
 8007e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	61fb      	str	r3, [r7, #28]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61bb      	str	r3, [r7, #24]
 8007e20:	e00b      	b.n	8007e3a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	1c59      	adds	r1, r3, #1
 8007e2a:	61f9      	str	r1, [r7, #28]
 8007e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]
 8007e34:	69bb      	ldr	r3, [r7, #24]
 8007e36:	09db      	lsrs	r3, r3, #7
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e3e:	d8f0      	bhi.n	8007e22 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	61fa      	str	r2, [r7, #28]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	b2d2      	uxtb	r2, r2
 8007e4a:	701a      	strb	r2, [r3, #0]
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007e50:	2204      	movs	r2, #4
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	6938      	ldr	r0, [r7, #16]
 8007e56:	f7ff f887 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f383 8811 	msr	BASEPRI, r3
}
 8007e60:	bf00      	nop
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20014350 	.word	0x20014350
 8007e6c:	20014320 	.word	0x20014320

08007e70 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b088      	sub	sp, #32
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007e78:	f3ef 8311 	mrs	r3, BASEPRI
 8007e7c:	f04f 0120 	mov.w	r1, #32
 8007e80:	f381 8811 	msr	BASEPRI, r1
 8007e84:	617b      	str	r3, [r7, #20]
 8007e86:	4819      	ldr	r0, [pc, #100]	; (8007eec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007e88:	f7fe ff83 	bl	8006d92 <_PreparePacket>
 8007e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	61bb      	str	r3, [r7, #24]
 8007ea4:	e00b      	b.n	8007ebe <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	1c59      	adds	r1, r3, #1
 8007eae:	61f9      	str	r1, [r7, #28]
 8007eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	09db      	lsrs	r3, r3, #7
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8007ec2:	d8f0      	bhi.n	8007ea6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	61fa      	str	r2, [r7, #28]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	b2d2      	uxtb	r2, r2
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007ed4:	2206      	movs	r2, #6
 8007ed6:	68f9      	ldr	r1, [r7, #12]
 8007ed8:	6938      	ldr	r0, [r7, #16]
 8007eda:	f7ff f845 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f383 8811 	msr	BASEPRI, r3
}
 8007ee4:	bf00      	nop
 8007ee6:	3720      	adds	r7, #32
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20014350 	.word	0x20014350
 8007ef0:	20014320 	.word	0x20014320

08007ef4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007efe:	f3ef 8311 	mrs	r3, BASEPRI
 8007f02:	f04f 0120 	mov.w	r1, #32
 8007f06:	f381 8811 	msr	BASEPRI, r1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	4827      	ldr	r0, [pc, #156]	; (8007fac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007f0e:	f7fe ff40 	bl	8006d92 <_PreparePacket>
 8007f12:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007f18:	4b25      	ldr	r3, [pc, #148]	; (8007fb0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	1ad3      	subs	r3, r2, r3
 8007f20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	e00b      	b.n	8007f44 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	1c59      	adds	r1, r3, #1
 8007f34:	6279      	str	r1, [r7, #36]	; 0x24
 8007f36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	09db      	lsrs	r3, r3, #7
 8007f42:	623b      	str	r3, [r7, #32]
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b7f      	cmp	r3, #127	; 0x7f
 8007f48:	d8f0      	bhi.n	8007f2c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	627a      	str	r2, [r7, #36]	; 0x24
 8007f50:	6a3a      	ldr	r2, [r7, #32]
 8007f52:	b2d2      	uxtb	r2, r2
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	61fb      	str	r3, [r7, #28]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	e00b      	b.n	8007f7c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	1c59      	adds	r1, r3, #1
 8007f6c:	61f9      	str	r1, [r7, #28]
 8007f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f72:	b2d2      	uxtb	r2, r2
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	09db      	lsrs	r3, r3, #7
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f80:	d8f0      	bhi.n	8007f64 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	61fa      	str	r2, [r7, #28]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	b2d2      	uxtb	r2, r2
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007f92:	2207      	movs	r2, #7
 8007f94:	68f9      	ldr	r1, [r7, #12]
 8007f96:	6938      	ldr	r0, [r7, #16]
 8007f98:	f7fe ffe6 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f383 8811 	msr	BASEPRI, r3
}
 8007fa2:	bf00      	nop
 8007fa4:	3728      	adds	r7, #40	; 0x28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20014350 	.word	0x20014350
 8007fb0:	20014320 	.word	0x20014320

08007fb4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	1ad3      	subs	r3, r2, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20014320 	.word	0x20014320

08007fd4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08c      	sub	sp, #48	; 0x30
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007fde:	4b3b      	ldr	r3, [pc, #236]	; (80080cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d06d      	beq.n	80080c2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007fe6:	4b39      	ldr	r3, [pc, #228]	; (80080cc <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007fec:	2300      	movs	r3, #0
 8007fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff0:	e008      	b.n	8008004 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d007      	beq.n	800800e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008000:	3301      	adds	r3, #1
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008008:	429a      	cmp	r2, r3
 800800a:	d3f2      	bcc.n	8007ff2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800800c:	e000      	b.n	8008010 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800800e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	2b00      	cmp	r3, #0
 8008014:	d055      	beq.n	80080c2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008016:	f3ef 8311 	mrs	r3, BASEPRI
 800801a:	f04f 0120 	mov.w	r1, #32
 800801e:	f381 8811 	msr	BASEPRI, r1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	482a      	ldr	r0, [pc, #168]	; (80080d0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008026:	f7fe feb4 	bl	8006d92 <_PreparePacket>
 800802a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	623b      	str	r3, [r7, #32]
 8008038:	e00b      	b.n	8008052 <SEGGER_SYSVIEW_SendModule+0x7e>
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	b2da      	uxtb	r2, r3
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	1c59      	adds	r1, r3, #1
 8008042:	6279      	str	r1, [r7, #36]	; 0x24
 8008044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008048:	b2d2      	uxtb	r2, r2
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	09db      	lsrs	r3, r3, #7
 8008050:	623b      	str	r3, [r7, #32]
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2b7f      	cmp	r3, #127	; 0x7f
 8008056:	d8f0      	bhi.n	800803a <SEGGER_SYSVIEW_SendModule+0x66>
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	627a      	str	r2, [r7, #36]	; 0x24
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	b2d2      	uxtb	r2, r2
 8008062:	701a      	strb	r2, [r3, #0]
 8008064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008066:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	61fb      	str	r3, [r7, #28]
 800806c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	e00b      	b.n	800808c <SEGGER_SYSVIEW_SendModule+0xb8>
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	b2da      	uxtb	r2, r3
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	1c59      	adds	r1, r3, #1
 800807c:	61f9      	str	r1, [r7, #28]
 800807e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008082:	b2d2      	uxtb	r2, r2
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	09db      	lsrs	r3, r3, #7
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b7f      	cmp	r3, #127	; 0x7f
 8008090:	d8f0      	bhi.n	8008074 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	61fa      	str	r2, [r7, #28]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2280      	movs	r2, #128	; 0x80
 80080a8:	4619      	mov	r1, r3
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7fe fe24 	bl	8006cf8 <_EncodeStr>
 80080b0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80080b2:	2216      	movs	r2, #22
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	6938      	ldr	r0, [r7, #16]
 80080b8:	f7fe ff56 	bl	8006f68 <_SendPacket>
      RECORD_END();
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80080c2:	bf00      	nop
 80080c4:	3730      	adds	r7, #48	; 0x30
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20014348 	.word	0x20014348
 80080d0:	20014350 	.word	0x20014350

080080d4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00f      	beq.n	8008102 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1f2      	bne.n	80080e8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008102:	bf00      	nop
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20014348 	.word	0x20014348

08008110 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008116:	f3ef 8311 	mrs	r3, BASEPRI
 800811a:	f04f 0120 	mov.w	r1, #32
 800811e:	f381 8811 	msr	BASEPRI, r1
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	4817      	ldr	r0, [pc, #92]	; (8008184 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008126:	f7fe fe34 	bl	8006d92 <_PreparePacket>
 800812a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	4b14      	ldr	r3, [pc, #80]	; (8008188 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	e00b      	b.n	8008154 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	b2da      	uxtb	r2, r3
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1c59      	adds	r1, r3, #1
 8008144:	6179      	str	r1, [r7, #20]
 8008146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800814a:	b2d2      	uxtb	r2, r2
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	09db      	lsrs	r3, r3, #7
 8008152:	613b      	str	r3, [r7, #16]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b7f      	cmp	r3, #127	; 0x7f
 8008158:	d8f0      	bhi.n	800813c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	617a      	str	r2, [r7, #20]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800816a:	221b      	movs	r2, #27
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	68b8      	ldr	r0, [r7, #8]
 8008170:	f7fe fefa 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f383 8811 	msr	BASEPRI, r3
}
 800817a:	bf00      	nop
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20014350 	.word	0x20014350
 8008188:	2001434c 	.word	0x2001434c

0800818c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b08a      	sub	sp, #40	; 0x28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008194:	f3ef 8311 	mrs	r3, BASEPRI
 8008198:	f04f 0120 	mov.w	r1, #32
 800819c:	f381 8811 	msr	BASEPRI, r1
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	4827      	ldr	r0, [pc, #156]	; (8008240 <SEGGER_SYSVIEW_Warn+0xb4>)
 80081a4:	f7fe fdf5 	bl	8006d92 <_PreparePacket>
 80081a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	6879      	ldr	r1, [r7, #4]
 80081ae:	6938      	ldr	r0, [r7, #16]
 80081b0:	f7fe fda2 	bl	8006cf8 <_EncodeStr>
 80081b4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ba:	2301      	movs	r3, #1
 80081bc:	623b      	str	r3, [r7, #32]
 80081be:	e00b      	b.n	80081d8 <SEGGER_SYSVIEW_Warn+0x4c>
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	1c59      	adds	r1, r3, #1
 80081c8:	6279      	str	r1, [r7, #36]	; 0x24
 80081ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	09db      	lsrs	r3, r3, #7
 80081d6:	623b      	str	r3, [r7, #32]
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	2b7f      	cmp	r3, #127	; 0x7f
 80081dc:	d8f0      	bhi.n	80081c0 <SEGGER_SYSVIEW_Warn+0x34>
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	627a      	str	r2, [r7, #36]	; 0x24
 80081e4:	6a3a      	ldr	r2, [r7, #32]
 80081e6:	b2d2      	uxtb	r2, r2
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	61fb      	str	r3, [r7, #28]
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e00b      	b.n	8008210 <SEGGER_SYSVIEW_Warn+0x84>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	1c59      	adds	r1, r3, #1
 8008200:	61f9      	str	r1, [r7, #28]
 8008202:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008206:	b2d2      	uxtb	r2, r2
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	09db      	lsrs	r3, r3, #7
 800820e:	61bb      	str	r3, [r7, #24]
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	2b7f      	cmp	r3, #127	; 0x7f
 8008214:	d8f0      	bhi.n	80081f8 <SEGGER_SYSVIEW_Warn+0x6c>
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	61fa      	str	r2, [r7, #28]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	b2d2      	uxtb	r2, r2
 8008220:	701a      	strb	r2, [r3, #0]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008226:	221a      	movs	r2, #26
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	6938      	ldr	r0, [r7, #16]
 800822c:	f7fe fe9c 	bl	8006f68 <_SendPacket>
  RECORD_END();
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f383 8811 	msr	BASEPRI, r3
}
 8008236:	bf00      	nop
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20014350 	.word	0x20014350

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	20000068 	.word	0x20000068

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4e0d      	ldr	r6, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1ba4      	subs	r4, r4, r6
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2500      	movs	r5, #0
 800825c:	42a5      	cmp	r5, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4e0b      	ldr	r6, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f000 fca8 	bl	8008bb8 <_init>
 8008268:	1ba4      	subs	r4, r4, r6
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2500      	movs	r5, #0
 800826e:	42a5      	cmp	r5, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008278:	4798      	blx	r3
 800827a:	3501      	adds	r5, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008282:	4798      	blx	r3
 8008284:	3501      	adds	r5, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	08008d74 	.word	0x08008d74
 800828c:	08008d74 	.word	0x08008d74
 8008290:	08008d74 	.word	0x08008d74
 8008294:	08008d78 	.word	0x08008d78

08008298 <memcmp>:
 8008298:	b530      	push	{r4, r5, lr}
 800829a:	2400      	movs	r4, #0
 800829c:	42a2      	cmp	r2, r4
 800829e:	d101      	bne.n	80082a4 <memcmp+0xc>
 80082a0:	2000      	movs	r0, #0
 80082a2:	e007      	b.n	80082b4 <memcmp+0x1c>
 80082a4:	5d03      	ldrb	r3, [r0, r4]
 80082a6:	3401      	adds	r4, #1
 80082a8:	190d      	adds	r5, r1, r4
 80082aa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80082ae:	42ab      	cmp	r3, r5
 80082b0:	d0f4      	beq.n	800829c <memcmp+0x4>
 80082b2:	1b58      	subs	r0, r3, r5
 80082b4:	bd30      	pop	{r4, r5, pc}

080082b6 <memcpy>:
 80082b6:	b510      	push	{r4, lr}
 80082b8:	1e43      	subs	r3, r0, #1
 80082ba:	440a      	add	r2, r1
 80082bc:	4291      	cmp	r1, r2
 80082be:	d100      	bne.n	80082c2 <memcpy+0xc>
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ca:	e7f7      	b.n	80082bc <memcpy+0x6>

080082cc <memset>:
 80082cc:	4402      	add	r2, r0
 80082ce:	4603      	mov	r3, r0
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d100      	bne.n	80082d6 <memset+0xa>
 80082d4:	4770      	bx	lr
 80082d6:	f803 1b01 	strb.w	r1, [r3], #1
 80082da:	e7f9      	b.n	80082d0 <memset+0x4>

080082dc <siprintf>:
 80082dc:	b40e      	push	{r1, r2, r3}
 80082de:	b500      	push	{lr}
 80082e0:	b09c      	sub	sp, #112	; 0x70
 80082e2:	ab1d      	add	r3, sp, #116	; 0x74
 80082e4:	9002      	str	r0, [sp, #8]
 80082e6:	9006      	str	r0, [sp, #24]
 80082e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80082ec:	4809      	ldr	r0, [pc, #36]	; (8008314 <siprintf+0x38>)
 80082ee:	9107      	str	r1, [sp, #28]
 80082f0:	9104      	str	r1, [sp, #16]
 80082f2:	4909      	ldr	r1, [pc, #36]	; (8008318 <siprintf+0x3c>)
 80082f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f8:	9105      	str	r1, [sp, #20]
 80082fa:	6800      	ldr	r0, [r0, #0]
 80082fc:	9301      	str	r3, [sp, #4]
 80082fe:	a902      	add	r1, sp, #8
 8008300:	f000 f980 	bl	8008604 <_svfiprintf_r>
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	b01c      	add	sp, #112	; 0x70
 800830c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008310:	b003      	add	sp, #12
 8008312:	4770      	bx	lr
 8008314:	20000068 	.word	0x20000068
 8008318:	ffff0208 	.word	0xffff0208

0800831c <strncpy>:
 800831c:	b570      	push	{r4, r5, r6, lr}
 800831e:	3901      	subs	r1, #1
 8008320:	4604      	mov	r4, r0
 8008322:	b902      	cbnz	r2, 8008326 <strncpy+0xa>
 8008324:	bd70      	pop	{r4, r5, r6, pc}
 8008326:	4623      	mov	r3, r4
 8008328:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800832c:	f803 5b01 	strb.w	r5, [r3], #1
 8008330:	1e56      	subs	r6, r2, #1
 8008332:	b92d      	cbnz	r5, 8008340 <strncpy+0x24>
 8008334:	4414      	add	r4, r2
 8008336:	42a3      	cmp	r3, r4
 8008338:	d0f4      	beq.n	8008324 <strncpy+0x8>
 800833a:	f803 5b01 	strb.w	r5, [r3], #1
 800833e:	e7fa      	b.n	8008336 <strncpy+0x1a>
 8008340:	461c      	mov	r4, r3
 8008342:	4632      	mov	r2, r6
 8008344:	e7ed      	b.n	8008322 <strncpy+0x6>
	...

08008348 <strtok>:
 8008348:	4b13      	ldr	r3, [pc, #76]	; (8008398 <strtok+0x50>)
 800834a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834e:	681d      	ldr	r5, [r3, #0]
 8008350:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	b9b4      	cbnz	r4, 8008386 <strtok+0x3e>
 8008358:	2050      	movs	r0, #80	; 0x50
 800835a:	f000 f849 	bl	80083f0 <malloc>
 800835e:	65a8      	str	r0, [r5, #88]	; 0x58
 8008360:	e9c0 4400 	strd	r4, r4, [r0]
 8008364:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008368:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800836c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008370:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008374:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008378:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800837c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008380:	6184      	str	r4, [r0, #24]
 8008382:	7704      	strb	r4, [r0, #28]
 8008384:	6244      	str	r4, [r0, #36]	; 0x24
 8008386:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008388:	4639      	mov	r1, r7
 800838a:	4630      	mov	r0, r6
 800838c:	2301      	movs	r3, #1
 800838e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008392:	f000 b803 	b.w	800839c <__strtok_r>
 8008396:	bf00      	nop
 8008398:	20000068 	.word	0x20000068

0800839c <__strtok_r>:
 800839c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800839e:	b918      	cbnz	r0, 80083a8 <__strtok_r+0xc>
 80083a0:	6810      	ldr	r0, [r2, #0]
 80083a2:	b908      	cbnz	r0, 80083a8 <__strtok_r+0xc>
 80083a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a6:	4620      	mov	r0, r4
 80083a8:	4604      	mov	r4, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80083b0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083b4:	b91e      	cbnz	r6, 80083be <__strtok_r+0x22>
 80083b6:	b96d      	cbnz	r5, 80083d4 <__strtok_r+0x38>
 80083b8:	6015      	str	r5, [r2, #0]
 80083ba:	4628      	mov	r0, r5
 80083bc:	e7f2      	b.n	80083a4 <__strtok_r+0x8>
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d1f6      	bne.n	80083b0 <__strtok_r+0x14>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1ef      	bne.n	80083a6 <__strtok_r+0xa>
 80083c6:	6014      	str	r4, [r2, #0]
 80083c8:	7003      	strb	r3, [r0, #0]
 80083ca:	e7eb      	b.n	80083a4 <__strtok_r+0x8>
 80083cc:	462b      	mov	r3, r5
 80083ce:	e00d      	b.n	80083ec <__strtok_r+0x50>
 80083d0:	b926      	cbnz	r6, 80083dc <__strtok_r+0x40>
 80083d2:	461c      	mov	r4, r3
 80083d4:	4623      	mov	r3, r4
 80083d6:	460f      	mov	r7, r1
 80083d8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80083dc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80083e0:	42b5      	cmp	r5, r6
 80083e2:	d1f5      	bne.n	80083d0 <__strtok_r+0x34>
 80083e4:	2d00      	cmp	r5, #0
 80083e6:	d0f1      	beq.n	80083cc <__strtok_r+0x30>
 80083e8:	2100      	movs	r1, #0
 80083ea:	7021      	strb	r1, [r4, #0]
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	e7d9      	b.n	80083a4 <__strtok_r+0x8>

080083f0 <malloc>:
 80083f0:	4b02      	ldr	r3, [pc, #8]	; (80083fc <malloc+0xc>)
 80083f2:	4601      	mov	r1, r0
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	f000 b851 	b.w	800849c <_malloc_r>
 80083fa:	bf00      	nop
 80083fc:	20000068 	.word	0x20000068

08008400 <_free_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4605      	mov	r5, r0
 8008404:	2900      	cmp	r1, #0
 8008406:	d045      	beq.n	8008494 <_free_r+0x94>
 8008408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840c:	1f0c      	subs	r4, r1, #4
 800840e:	2b00      	cmp	r3, #0
 8008410:	bfb8      	it	lt
 8008412:	18e4      	addlt	r4, r4, r3
 8008414:	f000 fb9f 	bl	8008b56 <__malloc_lock>
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <_free_r+0x98>)
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	4610      	mov	r0, r2
 800841e:	b933      	cbnz	r3, 800842e <_free_r+0x2e>
 8008420:	6063      	str	r3, [r4, #4]
 8008422:	6014      	str	r4, [r2, #0]
 8008424:	4628      	mov	r0, r5
 8008426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800842a:	f000 bb95 	b.w	8008b58 <__malloc_unlock>
 800842e:	42a3      	cmp	r3, r4
 8008430:	d90c      	bls.n	800844c <_free_r+0x4c>
 8008432:	6821      	ldr	r1, [r4, #0]
 8008434:	1862      	adds	r2, r4, r1
 8008436:	4293      	cmp	r3, r2
 8008438:	bf04      	itt	eq
 800843a:	681a      	ldreq	r2, [r3, #0]
 800843c:	685b      	ldreq	r3, [r3, #4]
 800843e:	6063      	str	r3, [r4, #4]
 8008440:	bf04      	itt	eq
 8008442:	1852      	addeq	r2, r2, r1
 8008444:	6022      	streq	r2, [r4, #0]
 8008446:	6004      	str	r4, [r0, #0]
 8008448:	e7ec      	b.n	8008424 <_free_r+0x24>
 800844a:	4613      	mov	r3, r2
 800844c:	685a      	ldr	r2, [r3, #4]
 800844e:	b10a      	cbz	r2, 8008454 <_free_r+0x54>
 8008450:	42a2      	cmp	r2, r4
 8008452:	d9fa      	bls.n	800844a <_free_r+0x4a>
 8008454:	6819      	ldr	r1, [r3, #0]
 8008456:	1858      	adds	r0, r3, r1
 8008458:	42a0      	cmp	r0, r4
 800845a:	d10b      	bne.n	8008474 <_free_r+0x74>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4401      	add	r1, r0
 8008460:	1858      	adds	r0, r3, r1
 8008462:	4282      	cmp	r2, r0
 8008464:	6019      	str	r1, [r3, #0]
 8008466:	d1dd      	bne.n	8008424 <_free_r+0x24>
 8008468:	6810      	ldr	r0, [r2, #0]
 800846a:	6852      	ldr	r2, [r2, #4]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	4401      	add	r1, r0
 8008470:	6019      	str	r1, [r3, #0]
 8008472:	e7d7      	b.n	8008424 <_free_r+0x24>
 8008474:	d902      	bls.n	800847c <_free_r+0x7c>
 8008476:	230c      	movs	r3, #12
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	e7d3      	b.n	8008424 <_free_r+0x24>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	1821      	adds	r1, r4, r0
 8008480:	428a      	cmp	r2, r1
 8008482:	bf04      	itt	eq
 8008484:	6811      	ldreq	r1, [r2, #0]
 8008486:	6852      	ldreq	r2, [r2, #4]
 8008488:	6062      	str	r2, [r4, #4]
 800848a:	bf04      	itt	eq
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	605c      	str	r4, [r3, #4]
 8008492:	e7c7      	b.n	8008424 <_free_r+0x24>
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	bf00      	nop
 8008498:	20014434 	.word	0x20014434

0800849c <_malloc_r>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	1ccd      	adds	r5, r1, #3
 80084a0:	f025 0503 	bic.w	r5, r5, #3
 80084a4:	3508      	adds	r5, #8
 80084a6:	2d0c      	cmp	r5, #12
 80084a8:	bf38      	it	cc
 80084aa:	250c      	movcc	r5, #12
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	4606      	mov	r6, r0
 80084b0:	db01      	blt.n	80084b6 <_malloc_r+0x1a>
 80084b2:	42a9      	cmp	r1, r5
 80084b4:	d903      	bls.n	80084be <_malloc_r+0x22>
 80084b6:	230c      	movs	r3, #12
 80084b8:	6033      	str	r3, [r6, #0]
 80084ba:	2000      	movs	r0, #0
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	f000 fb4a 	bl	8008b56 <__malloc_lock>
 80084c2:	4a21      	ldr	r2, [pc, #132]	; (8008548 <_malloc_r+0xac>)
 80084c4:	6814      	ldr	r4, [r2, #0]
 80084c6:	4621      	mov	r1, r4
 80084c8:	b991      	cbnz	r1, 80084f0 <_malloc_r+0x54>
 80084ca:	4c20      	ldr	r4, [pc, #128]	; (800854c <_malloc_r+0xb0>)
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	b91b      	cbnz	r3, 80084d8 <_malloc_r+0x3c>
 80084d0:	4630      	mov	r0, r6
 80084d2:	f000 fb17 	bl	8008b04 <_sbrk_r>
 80084d6:	6020      	str	r0, [r4, #0]
 80084d8:	4629      	mov	r1, r5
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 fb12 	bl	8008b04 <_sbrk_r>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d124      	bne.n	800852e <_malloc_r+0x92>
 80084e4:	230c      	movs	r3, #12
 80084e6:	6033      	str	r3, [r6, #0]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 fb35 	bl	8008b58 <__malloc_unlock>
 80084ee:	e7e4      	b.n	80084ba <_malloc_r+0x1e>
 80084f0:	680b      	ldr	r3, [r1, #0]
 80084f2:	1b5b      	subs	r3, r3, r5
 80084f4:	d418      	bmi.n	8008528 <_malloc_r+0x8c>
 80084f6:	2b0b      	cmp	r3, #11
 80084f8:	d90f      	bls.n	800851a <_malloc_r+0x7e>
 80084fa:	600b      	str	r3, [r1, #0]
 80084fc:	50cd      	str	r5, [r1, r3]
 80084fe:	18cc      	adds	r4, r1, r3
 8008500:	4630      	mov	r0, r6
 8008502:	f000 fb29 	bl	8008b58 <__malloc_unlock>
 8008506:	f104 000b 	add.w	r0, r4, #11
 800850a:	1d23      	adds	r3, r4, #4
 800850c:	f020 0007 	bic.w	r0, r0, #7
 8008510:	1ac3      	subs	r3, r0, r3
 8008512:	d0d3      	beq.n	80084bc <_malloc_r+0x20>
 8008514:	425a      	negs	r2, r3
 8008516:	50e2      	str	r2, [r4, r3]
 8008518:	e7d0      	b.n	80084bc <_malloc_r+0x20>
 800851a:	428c      	cmp	r4, r1
 800851c:	684b      	ldr	r3, [r1, #4]
 800851e:	bf16      	itet	ne
 8008520:	6063      	strne	r3, [r4, #4]
 8008522:	6013      	streq	r3, [r2, #0]
 8008524:	460c      	movne	r4, r1
 8008526:	e7eb      	b.n	8008500 <_malloc_r+0x64>
 8008528:	460c      	mov	r4, r1
 800852a:	6849      	ldr	r1, [r1, #4]
 800852c:	e7cc      	b.n	80084c8 <_malloc_r+0x2c>
 800852e:	1cc4      	adds	r4, r0, #3
 8008530:	f024 0403 	bic.w	r4, r4, #3
 8008534:	42a0      	cmp	r0, r4
 8008536:	d005      	beq.n	8008544 <_malloc_r+0xa8>
 8008538:	1a21      	subs	r1, r4, r0
 800853a:	4630      	mov	r0, r6
 800853c:	f000 fae2 	bl	8008b04 <_sbrk_r>
 8008540:	3001      	adds	r0, #1
 8008542:	d0cf      	beq.n	80084e4 <_malloc_r+0x48>
 8008544:	6025      	str	r5, [r4, #0]
 8008546:	e7db      	b.n	8008500 <_malloc_r+0x64>
 8008548:	20014434 	.word	0x20014434
 800854c:	20014438 	.word	0x20014438

08008550 <__ssputs_r>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	688e      	ldr	r6, [r1, #8]
 8008556:	429e      	cmp	r6, r3
 8008558:	4682      	mov	sl, r0
 800855a:	460c      	mov	r4, r1
 800855c:	4690      	mov	r8, r2
 800855e:	4699      	mov	r9, r3
 8008560:	d837      	bhi.n	80085d2 <__ssputs_r+0x82>
 8008562:	898a      	ldrh	r2, [r1, #12]
 8008564:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008568:	d031      	beq.n	80085ce <__ssputs_r+0x7e>
 800856a:	6825      	ldr	r5, [r4, #0]
 800856c:	6909      	ldr	r1, [r1, #16]
 800856e:	1a6f      	subs	r7, r5, r1
 8008570:	6965      	ldr	r5, [r4, #20]
 8008572:	2302      	movs	r3, #2
 8008574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008578:	fb95 f5f3 	sdiv	r5, r5, r3
 800857c:	f109 0301 	add.w	r3, r9, #1
 8008580:	443b      	add	r3, r7
 8008582:	429d      	cmp	r5, r3
 8008584:	bf38      	it	cc
 8008586:	461d      	movcc	r5, r3
 8008588:	0553      	lsls	r3, r2, #21
 800858a:	d530      	bpl.n	80085ee <__ssputs_r+0x9e>
 800858c:	4629      	mov	r1, r5
 800858e:	f7ff ff85 	bl	800849c <_malloc_r>
 8008592:	4606      	mov	r6, r0
 8008594:	b950      	cbnz	r0, 80085ac <__ssputs_r+0x5c>
 8008596:	230c      	movs	r3, #12
 8008598:	f8ca 3000 	str.w	r3, [sl]
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a2:	81a3      	strh	r3, [r4, #12]
 80085a4:	f04f 30ff 	mov.w	r0, #4294967295
 80085a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ac:	463a      	mov	r2, r7
 80085ae:	6921      	ldr	r1, [r4, #16]
 80085b0:	f7ff fe81 	bl	80082b6 <memcpy>
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	6126      	str	r6, [r4, #16]
 80085c2:	6165      	str	r5, [r4, #20]
 80085c4:	443e      	add	r6, r7
 80085c6:	1bed      	subs	r5, r5, r7
 80085c8:	6026      	str	r6, [r4, #0]
 80085ca:	60a5      	str	r5, [r4, #8]
 80085cc:	464e      	mov	r6, r9
 80085ce:	454e      	cmp	r6, r9
 80085d0:	d900      	bls.n	80085d4 <__ssputs_r+0x84>
 80085d2:	464e      	mov	r6, r9
 80085d4:	4632      	mov	r2, r6
 80085d6:	4641      	mov	r1, r8
 80085d8:	6820      	ldr	r0, [r4, #0]
 80085da:	f000 faa3 	bl	8008b24 <memmove>
 80085de:	68a3      	ldr	r3, [r4, #8]
 80085e0:	1b9b      	subs	r3, r3, r6
 80085e2:	60a3      	str	r3, [r4, #8]
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	441e      	add	r6, r3
 80085e8:	6026      	str	r6, [r4, #0]
 80085ea:	2000      	movs	r0, #0
 80085ec:	e7dc      	b.n	80085a8 <__ssputs_r+0x58>
 80085ee:	462a      	mov	r2, r5
 80085f0:	f000 fab3 	bl	8008b5a <_realloc_r>
 80085f4:	4606      	mov	r6, r0
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d1e2      	bne.n	80085c0 <__ssputs_r+0x70>
 80085fa:	6921      	ldr	r1, [r4, #16]
 80085fc:	4650      	mov	r0, sl
 80085fe:	f7ff feff 	bl	8008400 <_free_r>
 8008602:	e7c8      	b.n	8008596 <__ssputs_r+0x46>

08008604 <_svfiprintf_r>:
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	461d      	mov	r5, r3
 800860a:	898b      	ldrh	r3, [r1, #12]
 800860c:	061f      	lsls	r7, r3, #24
 800860e:	b09d      	sub	sp, #116	; 0x74
 8008610:	4680      	mov	r8, r0
 8008612:	460c      	mov	r4, r1
 8008614:	4616      	mov	r6, r2
 8008616:	d50f      	bpl.n	8008638 <_svfiprintf_r+0x34>
 8008618:	690b      	ldr	r3, [r1, #16]
 800861a:	b96b      	cbnz	r3, 8008638 <_svfiprintf_r+0x34>
 800861c:	2140      	movs	r1, #64	; 0x40
 800861e:	f7ff ff3d 	bl	800849c <_malloc_r>
 8008622:	6020      	str	r0, [r4, #0]
 8008624:	6120      	str	r0, [r4, #16]
 8008626:	b928      	cbnz	r0, 8008634 <_svfiprintf_r+0x30>
 8008628:	230c      	movs	r3, #12
 800862a:	f8c8 3000 	str.w	r3, [r8]
 800862e:	f04f 30ff 	mov.w	r0, #4294967295
 8008632:	e0c8      	b.n	80087c6 <_svfiprintf_r+0x1c2>
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	6163      	str	r3, [r4, #20]
 8008638:	2300      	movs	r3, #0
 800863a:	9309      	str	r3, [sp, #36]	; 0x24
 800863c:	2320      	movs	r3, #32
 800863e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008642:	2330      	movs	r3, #48	; 0x30
 8008644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008648:	9503      	str	r5, [sp, #12]
 800864a:	f04f 0b01 	mov.w	fp, #1
 800864e:	4637      	mov	r7, r6
 8008650:	463d      	mov	r5, r7
 8008652:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008656:	b10b      	cbz	r3, 800865c <_svfiprintf_r+0x58>
 8008658:	2b25      	cmp	r3, #37	; 0x25
 800865a:	d13e      	bne.n	80086da <_svfiprintf_r+0xd6>
 800865c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008660:	d00b      	beq.n	800867a <_svfiprintf_r+0x76>
 8008662:	4653      	mov	r3, sl
 8008664:	4632      	mov	r2, r6
 8008666:	4621      	mov	r1, r4
 8008668:	4640      	mov	r0, r8
 800866a:	f7ff ff71 	bl	8008550 <__ssputs_r>
 800866e:	3001      	adds	r0, #1
 8008670:	f000 80a4 	beq.w	80087bc <_svfiprintf_r+0x1b8>
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	4453      	add	r3, sl
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
 800867a:	783b      	ldrb	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 809d 	beq.w	80087bc <_svfiprintf_r+0x1b8>
 8008682:	2300      	movs	r3, #0
 8008684:	f04f 32ff 	mov.w	r2, #4294967295
 8008688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	9307      	str	r3, [sp, #28]
 8008690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008694:	931a      	str	r3, [sp, #104]	; 0x68
 8008696:	462f      	mov	r7, r5
 8008698:	2205      	movs	r2, #5
 800869a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800869e:	4850      	ldr	r0, [pc, #320]	; (80087e0 <_svfiprintf_r+0x1dc>)
 80086a0:	f7f7 fdf6 	bl	8000290 <memchr>
 80086a4:	9b04      	ldr	r3, [sp, #16]
 80086a6:	b9d0      	cbnz	r0, 80086de <_svfiprintf_r+0xda>
 80086a8:	06d9      	lsls	r1, r3, #27
 80086aa:	bf44      	itt	mi
 80086ac:	2220      	movmi	r2, #32
 80086ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086b2:	071a      	lsls	r2, r3, #28
 80086b4:	bf44      	itt	mi
 80086b6:	222b      	movmi	r2, #43	; 0x2b
 80086b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80086bc:	782a      	ldrb	r2, [r5, #0]
 80086be:	2a2a      	cmp	r2, #42	; 0x2a
 80086c0:	d015      	beq.n	80086ee <_svfiprintf_r+0xea>
 80086c2:	9a07      	ldr	r2, [sp, #28]
 80086c4:	462f      	mov	r7, r5
 80086c6:	2000      	movs	r0, #0
 80086c8:	250a      	movs	r5, #10
 80086ca:	4639      	mov	r1, r7
 80086cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d0:	3b30      	subs	r3, #48	; 0x30
 80086d2:	2b09      	cmp	r3, #9
 80086d4:	d94d      	bls.n	8008772 <_svfiprintf_r+0x16e>
 80086d6:	b1b8      	cbz	r0, 8008708 <_svfiprintf_r+0x104>
 80086d8:	e00f      	b.n	80086fa <_svfiprintf_r+0xf6>
 80086da:	462f      	mov	r7, r5
 80086dc:	e7b8      	b.n	8008650 <_svfiprintf_r+0x4c>
 80086de:	4a40      	ldr	r2, [pc, #256]	; (80087e0 <_svfiprintf_r+0x1dc>)
 80086e0:	1a80      	subs	r0, r0, r2
 80086e2:	fa0b f000 	lsl.w	r0, fp, r0
 80086e6:	4318      	orrs	r0, r3
 80086e8:	9004      	str	r0, [sp, #16]
 80086ea:	463d      	mov	r5, r7
 80086ec:	e7d3      	b.n	8008696 <_svfiprintf_r+0x92>
 80086ee:	9a03      	ldr	r2, [sp, #12]
 80086f0:	1d11      	adds	r1, r2, #4
 80086f2:	6812      	ldr	r2, [r2, #0]
 80086f4:	9103      	str	r1, [sp, #12]
 80086f6:	2a00      	cmp	r2, #0
 80086f8:	db01      	blt.n	80086fe <_svfiprintf_r+0xfa>
 80086fa:	9207      	str	r2, [sp, #28]
 80086fc:	e004      	b.n	8008708 <_svfiprintf_r+0x104>
 80086fe:	4252      	negs	r2, r2
 8008700:	f043 0302 	orr.w	r3, r3, #2
 8008704:	9207      	str	r2, [sp, #28]
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	783b      	ldrb	r3, [r7, #0]
 800870a:	2b2e      	cmp	r3, #46	; 0x2e
 800870c:	d10c      	bne.n	8008728 <_svfiprintf_r+0x124>
 800870e:	787b      	ldrb	r3, [r7, #1]
 8008710:	2b2a      	cmp	r3, #42	; 0x2a
 8008712:	d133      	bne.n	800877c <_svfiprintf_r+0x178>
 8008714:	9b03      	ldr	r3, [sp, #12]
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	9203      	str	r2, [sp, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	bfb8      	it	lt
 8008720:	f04f 33ff 	movlt.w	r3, #4294967295
 8008724:	3702      	adds	r7, #2
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	4d2e      	ldr	r5, [pc, #184]	; (80087e4 <_svfiprintf_r+0x1e0>)
 800872a:	7839      	ldrb	r1, [r7, #0]
 800872c:	2203      	movs	r2, #3
 800872e:	4628      	mov	r0, r5
 8008730:	f7f7 fdae 	bl	8000290 <memchr>
 8008734:	b138      	cbz	r0, 8008746 <_svfiprintf_r+0x142>
 8008736:	2340      	movs	r3, #64	; 0x40
 8008738:	1b40      	subs	r0, r0, r5
 800873a:	fa03 f000 	lsl.w	r0, r3, r0
 800873e:	9b04      	ldr	r3, [sp, #16]
 8008740:	4303      	orrs	r3, r0
 8008742:	3701      	adds	r7, #1
 8008744:	9304      	str	r3, [sp, #16]
 8008746:	7839      	ldrb	r1, [r7, #0]
 8008748:	4827      	ldr	r0, [pc, #156]	; (80087e8 <_svfiprintf_r+0x1e4>)
 800874a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800874e:	2206      	movs	r2, #6
 8008750:	1c7e      	adds	r6, r7, #1
 8008752:	f7f7 fd9d 	bl	8000290 <memchr>
 8008756:	2800      	cmp	r0, #0
 8008758:	d038      	beq.n	80087cc <_svfiprintf_r+0x1c8>
 800875a:	4b24      	ldr	r3, [pc, #144]	; (80087ec <_svfiprintf_r+0x1e8>)
 800875c:	bb13      	cbnz	r3, 80087a4 <_svfiprintf_r+0x1a0>
 800875e:	9b03      	ldr	r3, [sp, #12]
 8008760:	3307      	adds	r3, #7
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	3308      	adds	r3, #8
 8008768:	9303      	str	r3, [sp, #12]
 800876a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800876c:	444b      	add	r3, r9
 800876e:	9309      	str	r3, [sp, #36]	; 0x24
 8008770:	e76d      	b.n	800864e <_svfiprintf_r+0x4a>
 8008772:	fb05 3202 	mla	r2, r5, r2, r3
 8008776:	2001      	movs	r0, #1
 8008778:	460f      	mov	r7, r1
 800877a:	e7a6      	b.n	80086ca <_svfiprintf_r+0xc6>
 800877c:	2300      	movs	r3, #0
 800877e:	3701      	adds	r7, #1
 8008780:	9305      	str	r3, [sp, #20]
 8008782:	4619      	mov	r1, r3
 8008784:	250a      	movs	r5, #10
 8008786:	4638      	mov	r0, r7
 8008788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800878c:	3a30      	subs	r2, #48	; 0x30
 800878e:	2a09      	cmp	r2, #9
 8008790:	d903      	bls.n	800879a <_svfiprintf_r+0x196>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d0c8      	beq.n	8008728 <_svfiprintf_r+0x124>
 8008796:	9105      	str	r1, [sp, #20]
 8008798:	e7c6      	b.n	8008728 <_svfiprintf_r+0x124>
 800879a:	fb05 2101 	mla	r1, r5, r1, r2
 800879e:	2301      	movs	r3, #1
 80087a0:	4607      	mov	r7, r0
 80087a2:	e7f0      	b.n	8008786 <_svfiprintf_r+0x182>
 80087a4:	ab03      	add	r3, sp, #12
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	4622      	mov	r2, r4
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <_svfiprintf_r+0x1ec>)
 80087ac:	a904      	add	r1, sp, #16
 80087ae:	4640      	mov	r0, r8
 80087b0:	f3af 8000 	nop.w
 80087b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80087b8:	4681      	mov	r9, r0
 80087ba:	d1d6      	bne.n	800876a <_svfiprintf_r+0x166>
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	065b      	lsls	r3, r3, #25
 80087c0:	f53f af35 	bmi.w	800862e <_svfiprintf_r+0x2a>
 80087c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087c6:	b01d      	add	sp, #116	; 0x74
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	ab03      	add	r3, sp, #12
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	4622      	mov	r2, r4
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <_svfiprintf_r+0x1ec>)
 80087d4:	a904      	add	r1, sp, #16
 80087d6:	4640      	mov	r0, r8
 80087d8:	f000 f882 	bl	80088e0 <_printf_i>
 80087dc:	e7ea      	b.n	80087b4 <_svfiprintf_r+0x1b0>
 80087de:	bf00      	nop
 80087e0:	08008d36 	.word	0x08008d36
 80087e4:	08008d3c 	.word	0x08008d3c
 80087e8:	08008d40 	.word	0x08008d40
 80087ec:	00000000 	.word	0x00000000
 80087f0:	08008551 	.word	0x08008551

080087f4 <_printf_common>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	4691      	mov	r9, r2
 80087fa:	461f      	mov	r7, r3
 80087fc:	688a      	ldr	r2, [r1, #8]
 80087fe:	690b      	ldr	r3, [r1, #16]
 8008800:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008804:	4293      	cmp	r3, r2
 8008806:	bfb8      	it	lt
 8008808:	4613      	movlt	r3, r2
 800880a:	f8c9 3000 	str.w	r3, [r9]
 800880e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008812:	4606      	mov	r6, r0
 8008814:	460c      	mov	r4, r1
 8008816:	b112      	cbz	r2, 800881e <_printf_common+0x2a>
 8008818:	3301      	adds	r3, #1
 800881a:	f8c9 3000 	str.w	r3, [r9]
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	0699      	lsls	r1, r3, #26
 8008822:	bf42      	ittt	mi
 8008824:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008828:	3302      	addmi	r3, #2
 800882a:	f8c9 3000 	strmi.w	r3, [r9]
 800882e:	6825      	ldr	r5, [r4, #0]
 8008830:	f015 0506 	ands.w	r5, r5, #6
 8008834:	d107      	bne.n	8008846 <_printf_common+0x52>
 8008836:	f104 0a19 	add.w	sl, r4, #25
 800883a:	68e3      	ldr	r3, [r4, #12]
 800883c:	f8d9 2000 	ldr.w	r2, [r9]
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	42ab      	cmp	r3, r5
 8008844:	dc28      	bgt.n	8008898 <_printf_common+0xa4>
 8008846:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800884a:	6822      	ldr	r2, [r4, #0]
 800884c:	3300      	adds	r3, #0
 800884e:	bf18      	it	ne
 8008850:	2301      	movne	r3, #1
 8008852:	0692      	lsls	r2, r2, #26
 8008854:	d42d      	bmi.n	80088b2 <_printf_common+0xbe>
 8008856:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800885a:	4639      	mov	r1, r7
 800885c:	4630      	mov	r0, r6
 800885e:	47c0      	blx	r8
 8008860:	3001      	adds	r0, #1
 8008862:	d020      	beq.n	80088a6 <_printf_common+0xb2>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	68e5      	ldr	r5, [r4, #12]
 8008868:	f8d9 2000 	ldr.w	r2, [r9]
 800886c:	f003 0306 	and.w	r3, r3, #6
 8008870:	2b04      	cmp	r3, #4
 8008872:	bf08      	it	eq
 8008874:	1aad      	subeq	r5, r5, r2
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	f04f 0900 	mov.w	r9, #0
 800888e:	341a      	adds	r4, #26
 8008890:	454d      	cmp	r5, r9
 8008892:	d11a      	bne.n	80088ca <_printf_common+0xd6>
 8008894:	2000      	movs	r0, #0
 8008896:	e008      	b.n	80088aa <_printf_common+0xb6>
 8008898:	2301      	movs	r3, #1
 800889a:	4652      	mov	r2, sl
 800889c:	4639      	mov	r1, r7
 800889e:	4630      	mov	r0, r6
 80088a0:	47c0      	blx	r8
 80088a2:	3001      	adds	r0, #1
 80088a4:	d103      	bne.n	80088ae <_printf_common+0xba>
 80088a6:	f04f 30ff 	mov.w	r0, #4294967295
 80088aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ae:	3501      	adds	r5, #1
 80088b0:	e7c3      	b.n	800883a <_printf_common+0x46>
 80088b2:	18e1      	adds	r1, r4, r3
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	2030      	movs	r0, #48	; 0x30
 80088b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088bc:	4422      	add	r2, r4
 80088be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c6:	3302      	adds	r3, #2
 80088c8:	e7c5      	b.n	8008856 <_printf_common+0x62>
 80088ca:	2301      	movs	r3, #1
 80088cc:	4622      	mov	r2, r4
 80088ce:	4639      	mov	r1, r7
 80088d0:	4630      	mov	r0, r6
 80088d2:	47c0      	blx	r8
 80088d4:	3001      	adds	r0, #1
 80088d6:	d0e6      	beq.n	80088a6 <_printf_common+0xb2>
 80088d8:	f109 0901 	add.w	r9, r9, #1
 80088dc:	e7d8      	b.n	8008890 <_printf_common+0x9c>
	...

080088e0 <_printf_i>:
 80088e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80088e8:	460c      	mov	r4, r1
 80088ea:	7e09      	ldrb	r1, [r1, #24]
 80088ec:	b085      	sub	sp, #20
 80088ee:	296e      	cmp	r1, #110	; 0x6e
 80088f0:	4617      	mov	r7, r2
 80088f2:	4606      	mov	r6, r0
 80088f4:	4698      	mov	r8, r3
 80088f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088f8:	f000 80b3 	beq.w	8008a62 <_printf_i+0x182>
 80088fc:	d822      	bhi.n	8008944 <_printf_i+0x64>
 80088fe:	2963      	cmp	r1, #99	; 0x63
 8008900:	d036      	beq.n	8008970 <_printf_i+0x90>
 8008902:	d80a      	bhi.n	800891a <_printf_i+0x3a>
 8008904:	2900      	cmp	r1, #0
 8008906:	f000 80b9 	beq.w	8008a7c <_printf_i+0x19c>
 800890a:	2958      	cmp	r1, #88	; 0x58
 800890c:	f000 8083 	beq.w	8008a16 <_printf_i+0x136>
 8008910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008914:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008918:	e032      	b.n	8008980 <_printf_i+0xa0>
 800891a:	2964      	cmp	r1, #100	; 0x64
 800891c:	d001      	beq.n	8008922 <_printf_i+0x42>
 800891e:	2969      	cmp	r1, #105	; 0x69
 8008920:	d1f6      	bne.n	8008910 <_printf_i+0x30>
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	6813      	ldr	r3, [r2, #0]
 8008926:	0605      	lsls	r5, r0, #24
 8008928:	f103 0104 	add.w	r1, r3, #4
 800892c:	d52a      	bpl.n	8008984 <_printf_i+0xa4>
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6011      	str	r1, [r2, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	da03      	bge.n	800893e <_printf_i+0x5e>
 8008936:	222d      	movs	r2, #45	; 0x2d
 8008938:	425b      	negs	r3, r3
 800893a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800893e:	486f      	ldr	r0, [pc, #444]	; (8008afc <_printf_i+0x21c>)
 8008940:	220a      	movs	r2, #10
 8008942:	e039      	b.n	80089b8 <_printf_i+0xd8>
 8008944:	2973      	cmp	r1, #115	; 0x73
 8008946:	f000 809d 	beq.w	8008a84 <_printf_i+0x1a4>
 800894a:	d808      	bhi.n	800895e <_printf_i+0x7e>
 800894c:	296f      	cmp	r1, #111	; 0x6f
 800894e:	d020      	beq.n	8008992 <_printf_i+0xb2>
 8008950:	2970      	cmp	r1, #112	; 0x70
 8008952:	d1dd      	bne.n	8008910 <_printf_i+0x30>
 8008954:	6823      	ldr	r3, [r4, #0]
 8008956:	f043 0320 	orr.w	r3, r3, #32
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	e003      	b.n	8008966 <_printf_i+0x86>
 800895e:	2975      	cmp	r1, #117	; 0x75
 8008960:	d017      	beq.n	8008992 <_printf_i+0xb2>
 8008962:	2978      	cmp	r1, #120	; 0x78
 8008964:	d1d4      	bne.n	8008910 <_printf_i+0x30>
 8008966:	2378      	movs	r3, #120	; 0x78
 8008968:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800896c:	4864      	ldr	r0, [pc, #400]	; (8008b00 <_printf_i+0x220>)
 800896e:	e055      	b.n	8008a1c <_printf_i+0x13c>
 8008970:	6813      	ldr	r3, [r2, #0]
 8008972:	1d19      	adds	r1, r3, #4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	6011      	str	r1, [r2, #0]
 8008978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800897c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008980:	2301      	movs	r3, #1
 8008982:	e08c      	b.n	8008a9e <_printf_i+0x1be>
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6011      	str	r1, [r2, #0]
 8008988:	f010 0f40 	tst.w	r0, #64	; 0x40
 800898c:	bf18      	it	ne
 800898e:	b21b      	sxthne	r3, r3
 8008990:	e7cf      	b.n	8008932 <_printf_i+0x52>
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	6825      	ldr	r5, [r4, #0]
 8008996:	1d18      	adds	r0, r3, #4
 8008998:	6010      	str	r0, [r2, #0]
 800899a:	0628      	lsls	r0, r5, #24
 800899c:	d501      	bpl.n	80089a2 <_printf_i+0xc2>
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	e002      	b.n	80089a8 <_printf_i+0xc8>
 80089a2:	0668      	lsls	r0, r5, #25
 80089a4:	d5fb      	bpl.n	800899e <_printf_i+0xbe>
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	4854      	ldr	r0, [pc, #336]	; (8008afc <_printf_i+0x21c>)
 80089aa:	296f      	cmp	r1, #111	; 0x6f
 80089ac:	bf14      	ite	ne
 80089ae:	220a      	movne	r2, #10
 80089b0:	2208      	moveq	r2, #8
 80089b2:	2100      	movs	r1, #0
 80089b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089b8:	6865      	ldr	r5, [r4, #4]
 80089ba:	60a5      	str	r5, [r4, #8]
 80089bc:	2d00      	cmp	r5, #0
 80089be:	f2c0 8095 	blt.w	8008aec <_printf_i+0x20c>
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	f021 0104 	bic.w	r1, r1, #4
 80089c8:	6021      	str	r1, [r4, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d13d      	bne.n	8008a4a <_printf_i+0x16a>
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	f040 808e 	bne.w	8008af0 <_printf_i+0x210>
 80089d4:	4665      	mov	r5, ip
 80089d6:	2a08      	cmp	r2, #8
 80089d8:	d10b      	bne.n	80089f2 <_printf_i+0x112>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	07db      	lsls	r3, r3, #31
 80089de:	d508      	bpl.n	80089f2 <_printf_i+0x112>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	6862      	ldr	r2, [r4, #4]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	bfde      	ittt	le
 80089e8:	2330      	movle	r3, #48	; 0x30
 80089ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089f2:	ebac 0305 	sub.w	r3, ip, r5
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	f8cd 8000 	str.w	r8, [sp]
 80089fc:	463b      	mov	r3, r7
 80089fe:	aa03      	add	r2, sp, #12
 8008a00:	4621      	mov	r1, r4
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff fef6 	bl	80087f4 <_printf_common>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d14d      	bne.n	8008aa8 <_printf_i+0x1c8>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	b005      	add	sp, #20
 8008a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a16:	4839      	ldr	r0, [pc, #228]	; (8008afc <_printf_i+0x21c>)
 8008a18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008a1c:	6813      	ldr	r3, [r2, #0]
 8008a1e:	6821      	ldr	r1, [r4, #0]
 8008a20:	1d1d      	adds	r5, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6015      	str	r5, [r2, #0]
 8008a26:	060a      	lsls	r2, r1, #24
 8008a28:	d50b      	bpl.n	8008a42 <_printf_i+0x162>
 8008a2a:	07ca      	lsls	r2, r1, #31
 8008a2c:	bf44      	itt	mi
 8008a2e:	f041 0120 	orrmi.w	r1, r1, #32
 8008a32:	6021      	strmi	r1, [r4, #0]
 8008a34:	b91b      	cbnz	r3, 8008a3e <_printf_i+0x15e>
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	f022 0220 	bic.w	r2, r2, #32
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	2210      	movs	r2, #16
 8008a40:	e7b7      	b.n	80089b2 <_printf_i+0xd2>
 8008a42:	064d      	lsls	r5, r1, #25
 8008a44:	bf48      	it	mi
 8008a46:	b29b      	uxthmi	r3, r3
 8008a48:	e7ef      	b.n	8008a2a <_printf_i+0x14a>
 8008a4a:	4665      	mov	r5, ip
 8008a4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a50:	fb02 3311 	mls	r3, r2, r1, r3
 8008a54:	5cc3      	ldrb	r3, [r0, r3]
 8008a56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	2900      	cmp	r1, #0
 8008a5e:	d1f5      	bne.n	8008a4c <_printf_i+0x16c>
 8008a60:	e7b9      	b.n	80089d6 <_printf_i+0xf6>
 8008a62:	6813      	ldr	r3, [r2, #0]
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	6961      	ldr	r1, [r4, #20]
 8008a68:	1d18      	adds	r0, r3, #4
 8008a6a:	6010      	str	r0, [r2, #0]
 8008a6c:	0628      	lsls	r0, r5, #24
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	d501      	bpl.n	8008a76 <_printf_i+0x196>
 8008a72:	6019      	str	r1, [r3, #0]
 8008a74:	e002      	b.n	8008a7c <_printf_i+0x19c>
 8008a76:	066a      	lsls	r2, r5, #25
 8008a78:	d5fb      	bpl.n	8008a72 <_printf_i+0x192>
 8008a7a:	8019      	strh	r1, [r3, #0]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	4665      	mov	r5, ip
 8008a82:	e7b9      	b.n	80089f8 <_printf_i+0x118>
 8008a84:	6813      	ldr	r3, [r2, #0]
 8008a86:	1d19      	adds	r1, r3, #4
 8008a88:	6011      	str	r1, [r2, #0]
 8008a8a:	681d      	ldr	r5, [r3, #0]
 8008a8c:	6862      	ldr	r2, [r4, #4]
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4628      	mov	r0, r5
 8008a92:	f7f7 fbfd 	bl	8000290 <memchr>
 8008a96:	b108      	cbz	r0, 8008a9c <_printf_i+0x1bc>
 8008a98:	1b40      	subs	r0, r0, r5
 8008a9a:	6060      	str	r0, [r4, #4]
 8008a9c:	6863      	ldr	r3, [r4, #4]
 8008a9e:	6123      	str	r3, [r4, #16]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa6:	e7a7      	b.n	80089f8 <_printf_i+0x118>
 8008aa8:	6923      	ldr	r3, [r4, #16]
 8008aaa:	462a      	mov	r2, r5
 8008aac:	4639      	mov	r1, r7
 8008aae:	4630      	mov	r0, r6
 8008ab0:	47c0      	blx	r8
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	d0aa      	beq.n	8008a0c <_printf_i+0x12c>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	079b      	lsls	r3, r3, #30
 8008aba:	d413      	bmi.n	8008ae4 <_printf_i+0x204>
 8008abc:	68e0      	ldr	r0, [r4, #12]
 8008abe:	9b03      	ldr	r3, [sp, #12]
 8008ac0:	4298      	cmp	r0, r3
 8008ac2:	bfb8      	it	lt
 8008ac4:	4618      	movlt	r0, r3
 8008ac6:	e7a3      	b.n	8008a10 <_printf_i+0x130>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	464a      	mov	r2, r9
 8008acc:	4639      	mov	r1, r7
 8008ace:	4630      	mov	r0, r6
 8008ad0:	47c0      	blx	r8
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d09a      	beq.n	8008a0c <_printf_i+0x12c>
 8008ad6:	3501      	adds	r5, #1
 8008ad8:	68e3      	ldr	r3, [r4, #12]
 8008ada:	9a03      	ldr	r2, [sp, #12]
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	42ab      	cmp	r3, r5
 8008ae0:	dcf2      	bgt.n	8008ac8 <_printf_i+0x1e8>
 8008ae2:	e7eb      	b.n	8008abc <_printf_i+0x1dc>
 8008ae4:	2500      	movs	r5, #0
 8008ae6:	f104 0919 	add.w	r9, r4, #25
 8008aea:	e7f5      	b.n	8008ad8 <_printf_i+0x1f8>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1ac      	bne.n	8008a4a <_printf_i+0x16a>
 8008af0:	7803      	ldrb	r3, [r0, #0]
 8008af2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008afa:	e76c      	b.n	80089d6 <_printf_i+0xf6>
 8008afc:	08008d47 	.word	0x08008d47
 8008b00:	08008d58 	.word	0x08008d58

08008b04 <_sbrk_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4c06      	ldr	r4, [pc, #24]	; (8008b20 <_sbrk_r+0x1c>)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	4608      	mov	r0, r1
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	f7f8 fa96 	bl	8001040 <_sbrk>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_sbrk_r+0x1a>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_sbrk_r+0x1a>
 8008b1c:	602b      	str	r3, [r5, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	20014668 	.word	0x20014668

08008b24 <memmove>:
 8008b24:	4288      	cmp	r0, r1
 8008b26:	b510      	push	{r4, lr}
 8008b28:	eb01 0302 	add.w	r3, r1, r2
 8008b2c:	d807      	bhi.n	8008b3e <memmove+0x1a>
 8008b2e:	1e42      	subs	r2, r0, #1
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d00a      	beq.n	8008b4a <memmove+0x26>
 8008b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b38:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b3c:	e7f8      	b.n	8008b30 <memmove+0xc>
 8008b3e:	4283      	cmp	r3, r0
 8008b40:	d9f5      	bls.n	8008b2e <memmove+0xa>
 8008b42:	1881      	adds	r1, r0, r2
 8008b44:	1ad2      	subs	r2, r2, r3
 8008b46:	42d3      	cmn	r3, r2
 8008b48:	d100      	bne.n	8008b4c <memmove+0x28>
 8008b4a:	bd10      	pop	{r4, pc}
 8008b4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b50:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b54:	e7f7      	b.n	8008b46 <memmove+0x22>

08008b56 <__malloc_lock>:
 8008b56:	4770      	bx	lr

08008b58 <__malloc_unlock>:
 8008b58:	4770      	bx	lr

08008b5a <_realloc_r>:
 8008b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	4614      	mov	r4, r2
 8008b60:	460e      	mov	r6, r1
 8008b62:	b921      	cbnz	r1, 8008b6e <_realloc_r+0x14>
 8008b64:	4611      	mov	r1, r2
 8008b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b6a:	f7ff bc97 	b.w	800849c <_malloc_r>
 8008b6e:	b922      	cbnz	r2, 8008b7a <_realloc_r+0x20>
 8008b70:	f7ff fc46 	bl	8008400 <_free_r>
 8008b74:	4625      	mov	r5, r4
 8008b76:	4628      	mov	r0, r5
 8008b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b7a:	f000 f814 	bl	8008ba6 <_malloc_usable_size_r>
 8008b7e:	42a0      	cmp	r0, r4
 8008b80:	d20f      	bcs.n	8008ba2 <_realloc_r+0x48>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4638      	mov	r0, r7
 8008b86:	f7ff fc89 	bl	800849c <_malloc_r>
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d0f2      	beq.n	8008b76 <_realloc_r+0x1c>
 8008b90:	4631      	mov	r1, r6
 8008b92:	4622      	mov	r2, r4
 8008b94:	f7ff fb8f 	bl	80082b6 <memcpy>
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7ff fc30 	bl	8008400 <_free_r>
 8008ba0:	e7e9      	b.n	8008b76 <_realloc_r+0x1c>
 8008ba2:	4635      	mov	r5, r6
 8008ba4:	e7e7      	b.n	8008b76 <_realloc_r+0x1c>

08008ba6 <_malloc_usable_size_r>:
 8008ba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008baa:	1f18      	subs	r0, r3, #4
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	bfbc      	itt	lt
 8008bb0:	580b      	ldrlt	r3, [r1, r0]
 8008bb2:	18c0      	addlt	r0, r0, r3
 8008bb4:	4770      	bx	lr
	...

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
